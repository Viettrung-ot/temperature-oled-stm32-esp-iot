
cam bien nhiet do esp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000112c  08007130  08007130  00008130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800825c  0800825c  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008264  08008264  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00009264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008268  08008268  00009268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800826c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  200001dc  08008448  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  08008448  0000a868  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1ae  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002192  00000000  00000000  000193b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9e  00000000  00000000  0001c540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019058  00000000  00000000  0001d1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001382f  00000000  00000000  00036236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed72  00000000  00000000  00049a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d87d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  000d881c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000dde38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007118 	.word	0x08007118

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007118 	.word	0x08007118

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <microDelay>:
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <microDelay+0x2c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001036:	bf00      	nop
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <microDelay+0x2c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	429a      	cmp	r2, r3
 8001042:	d3f9      	bcc.n	8001038 <microDelay+0x14>
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	2000024c 	.word	0x2000024c

08001054 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 800106a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800106e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	482c      	ldr	r0, [pc, #176]	@ (8001134 <DHT11_Start+0xe0>)
 8001082:	f001 f97b 	bl	800237c <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800108c:	4829      	ldr	r0, [pc, #164]	@ (8001134 <DHT11_Start+0xe0>)
 800108e:	f001 fb10 	bl	80026b2 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001092:	2014      	movs	r0, #20
 8001094:	f001 f86a 	bl	800216c <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109e:	4825      	ldr	r0, [pc, #148]	@ (8001134 <DHT11_Start+0xe0>)
 80010a0:	f001 fb07 	bl	80026b2 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80010a4:	201e      	movs	r0, #30
 80010a6:	f7ff ffbd 	bl	8001024 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	481f      	ldr	r0, [pc, #124]	@ (8001134 <DHT11_Start+0xe0>)
 80010b8:	f001 f960 	bl	800237c <HAL_GPIO_Init>
  microDelay (40);
 80010bc:	2028      	movs	r0, #40	@ 0x28
 80010be:	f7ff ffb1 	bl	8001024 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010c6:	481b      	ldr	r0, [pc, #108]	@ (8001134 <DHT11_Start+0xe0>)
 80010c8:	f001 fadc 	bl	8002684 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10c      	bne.n	80010ec <DHT11_Start+0x98>
  {
    microDelay (80);
 80010d2:	2050      	movs	r0, #80	@ 0x50
 80010d4:	f7ff ffa6 	bl	8001024 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80010d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010dc:	4815      	ldr	r0, [pc, #84]	@ (8001134 <DHT11_Start+0xe0>)
 80010de:	f001 fad1 	bl	8002684 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <DHT11_Start+0x98>
 80010e8:	2301      	movs	r3, #1
 80010ea:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 80010ec:	f001 f834 	bl	8002158 <HAL_GetTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <DHT11_Start+0xe4>)
 80010f4:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 80010f6:	f001 f82f 	bl	8002158 <HAL_GetTick>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a0f      	ldr	r2, [pc, #60]	@ (800113c <DHT11_Start+0xe8>)
 80010fe:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001100:	e004      	b.n	800110c <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8001102:	f001 f829 	bl	8002158 <HAL_GetTick>
 8001106:	4603      	mov	r3, r0
 8001108:	4a0c      	ldr	r2, [pc, #48]	@ (800113c <DHT11_Start+0xe8>)
 800110a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800110c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <DHT11_Start+0xe0>)
 8001112:	f001 fab7 	bl	8002684 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <DHT11_Start+0xd6>
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <DHT11_Start+0xe4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1c9a      	adds	r2, r3, #2
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <DHT11_Start+0xe8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d8eb      	bhi.n	8001102 <DHT11_Start+0xae>
  }
  return Response;
 800112a:	7dfb      	ldrb	r3, [r7, #23]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40010c00 	.word	0x40010c00
 8001138:	200002e4 	.word	0x200002e4
 800113c:	200002e8 	.word	0x200002e8

08001140 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e066      	b.n	800121a <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 800114c:	f001 f804 	bl	8002158 <HAL_GetTick>
 8001150:	4603      	mov	r3, r0
 8001152:	4a36      	ldr	r2, [pc, #216]	@ (800122c <DHT11_Read+0xec>)
 8001154:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001156:	f000 ffff 	bl	8002158 <HAL_GetTick>
 800115a:	4603      	mov	r3, r0
 800115c:	4a34      	ldr	r2, [pc, #208]	@ (8001230 <DHT11_Read+0xf0>)
 800115e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001160:	e004      	b.n	800116c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001162:	f000 fff9 	bl	8002158 <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	4a31      	ldr	r2, [pc, #196]	@ (8001230 <DHT11_Read+0xf0>)
 800116a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800116c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001170:	4830      	ldr	r0, [pc, #192]	@ (8001234 <DHT11_Read+0xf4>)
 8001172:	f001 fa87 	bl	8002684 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <DHT11_Read+0x4a>
 800117c:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <DHT11_Read+0xec>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	1c9a      	adds	r2, r3, #2
 8001182:	4b2b      	ldr	r3, [pc, #172]	@ (8001230 <DHT11_Read+0xf0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d8eb      	bhi.n	8001162 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800118a:	2028      	movs	r0, #40	@ 0x28
 800118c:	f7ff ff4a 	bl	8001024 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001194:	4827      	ldr	r0, [pc, #156]	@ (8001234 <DHT11_Read+0xf4>)
 8001196:	f001 fa75 	bl	8002684 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10e      	bne.n	80011be <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2201      	movs	r2, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011b6:	4013      	ands	r3, r2
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	71bb      	strb	r3, [r7, #6]
 80011bc:	e00b      	b.n	80011d6 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f1c3 0307 	rsb	r3, r3, #7
 80011c4:	2201      	movs	r2, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	b25a      	sxtb	r2, r3
 80011cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80011d6:	f000 ffbf 	bl	8002158 <HAL_GetTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a13      	ldr	r2, [pc, #76]	@ (800122c <DHT11_Read+0xec>)
 80011de:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80011e0:	f000 ffba 	bl	8002158 <HAL_GetTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <DHT11_Read+0xf0>)
 80011e8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011ea:	e004      	b.n	80011f6 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80011ec:	f000 ffb4 	bl	8002158 <HAL_GetTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001230 <DHT11_Read+0xf0>)
 80011f4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fa:	480e      	ldr	r0, [pc, #56]	@ (8001234 <DHT11_Read+0xf4>)
 80011fc:	f001 fa42 	bl	8002684 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <DHT11_Read+0xd4>
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <DHT11_Read+0xec>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1c9a      	adds	r2, r3, #2
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <DHT11_Read+0xf0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8eb      	bhi.n	80011ec <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d995      	bls.n	800114c <DHT11_Read+0xc>
    }
  }
  return b;
 8001220:	79bb      	ldrb	r3, [r7, #6]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200002e4 	.word	0x200002e4
 8001230:	200002e8 	.word	0x200002e8
 8001234:	40010c00 	.word	0x40010c00

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b090      	sub	sp, #64	@ 0x40
 800123c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123e:	f000 ff33 	bl	80020a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001242:	f000 f949 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 fa35 	bl	80016b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800124a:	f000 f98b 	bl	8001564 <MX_I2C1_Init>
  MX_TIM1_Init();
 800124e:	f000 f9b7 	bl	80015c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001252:	f000 fa05 	bl	8001660 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001256:	488a      	ldr	r0, [pc, #552]	@ (8001480 <main+0x248>)
 8001258:	f002 fc6e 	bl	8003b38 <HAL_TIM_Base_Start>
    SSD1306_Init();
 800125c:	f000 fa76 	bl	800174c <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
      {
        if(DHT11_Start())
 8001260:	f7ff fef8 	bl	8001054 <DHT11_Start>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 8104 	beq.w	8001474 <main+0x23c>
        {
          RHI = DHT11_Read(); // Relative humidity integral
 800126c:	f7ff ff68 	bl	8001140 <DHT11_Read>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b83      	ldr	r3, [pc, #524]	@ (8001484 <main+0x24c>)
 8001276:	701a      	strb	r2, [r3, #0]
          RHD = DHT11_Read(); // Relative humidity decimal
 8001278:	f7ff ff62 	bl	8001140 <DHT11_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b81      	ldr	r3, [pc, #516]	@ (8001488 <main+0x250>)
 8001282:	701a      	strb	r2, [r3, #0]
          TCI = DHT11_Read(); // Celsius integral
 8001284:	f7ff ff5c 	bl	8001140 <DHT11_Read>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b7f      	ldr	r3, [pc, #508]	@ (800148c <main+0x254>)
 800128e:	701a      	strb	r2, [r3, #0]
          TCD = DHT11_Read(); // Celsius decimal
 8001290:	f7ff ff56 	bl	8001140 <DHT11_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b7d      	ldr	r3, [pc, #500]	@ (8001490 <main+0x258>)
 800129a:	701a      	strb	r2, [r3, #0]
          SUM = DHT11_Read(); // Check sum
 800129c:	f7ff ff50 	bl	8001140 <DHT11_Read>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001494 <main+0x25c>)
 80012a6:	701a      	strb	r2, [r3, #0]
          if (RHI + RHD + TCI + TCD == SUM)
 80012a8:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <main+0x24c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b76      	ldr	r3, [pc, #472]	@ (8001488 <main+0x250>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a75      	ldr	r2, [pc, #468]	@ (800148c <main+0x254>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a75      	ldr	r2, [pc, #468]	@ (8001490 <main+0x258>)
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a74      	ldr	r2, [pc, #464]	@ (8001494 <main+0x25c>)
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	4293      	cmp	r3, r2
 80012c6:	f040 80d5 	bne.w	8001474 <main+0x23c>
          {
            // Can use RHI and TCI for any purposes if whole number only needed
            tCelsius = (float)TCI + (float)(TCD/10.0);
 80012ca:	4b70      	ldr	r3, [pc, #448]	@ (800148c <main+0x254>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fce0 	bl	8000c94 <__aeabi_ui2f>
 80012d4:	4604      	mov	r4, r0
 80012d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001490 <main+0x258>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f892 	bl	8000404 <__aeabi_i2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001498 <main+0x260>)
 80012e6:	f7ff fa21 	bl	800072c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fbc9 	bl	8000a88 <__aeabi_d2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4619      	mov	r1, r3
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff fc1a 	bl	8000b34 <__addsf3>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b65      	ldr	r3, [pc, #404]	@ (800149c <main+0x264>)
 8001306:	601a      	str	r2, [r3, #0]
            tFahrenheit = tCelsius * 9/5 + 32;
 8001308:	4b64      	ldr	r3, [pc, #400]	@ (800149c <main+0x264>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4964      	ldr	r1, [pc, #400]	@ (80014a0 <main+0x268>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fd18 	bl	8000d44 <__aeabi_fmul>
 8001314:	4603      	mov	r3, r0
 8001316:	4963      	ldr	r1, [pc, #396]	@ (80014a4 <main+0x26c>)
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fdc7 	bl	8000eac <__aeabi_fdiv>
 800131e:	4603      	mov	r3, r0
 8001320:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fc05 	bl	8000b34 <__addsf3>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b5e      	ldr	r3, [pc, #376]	@ (80014a8 <main+0x270>)
 8001330:	601a      	str	r2, [r3, #0]
            RH = (float)RHI + (float)(RHD/10.0);
 8001332:	4b54      	ldr	r3, [pc, #336]	@ (8001484 <main+0x24c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fcac 	bl	8000c94 <__aeabi_ui2f>
 800133c:	4604      	mov	r4, r0
 800133e:	4b52      	ldr	r3, [pc, #328]	@ (8001488 <main+0x250>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f85e 	bl	8000404 <__aeabi_i2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b52      	ldr	r3, [pc, #328]	@ (8001498 <main+0x260>)
 800134e:	f7ff f9ed 	bl	800072c <__aeabi_ddiv>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fb95 	bl	8000a88 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	4619      	mov	r1, r3
 8001362:	4620      	mov	r0, r4
 8001364:	f7ff fbe6 	bl	8000b34 <__addsf3>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b4f      	ldr	r3, [pc, #316]	@ (80014ac <main+0x274>)
 800136e:	601a      	str	r2, [r3, #0]
            // Can use tCelsius, tFahrenheit and RH for any purposes
            TFI = tFahrenheit;  // Fahrenheit integral
 8001370:	4b4d      	ldr	r3, [pc, #308]	@ (80014a8 <main+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe35 	bl	8000fe4 <__aeabi_f2uiz>
 800137a:	4603      	mov	r3, r0
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b4c      	ldr	r3, [pc, #304]	@ (80014b0 <main+0x278>)
 8001380:	701a      	strb	r2, [r3, #0]
            TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8001382:	4b49      	ldr	r3, [pc, #292]	@ (80014a8 <main+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	494b      	ldr	r1, [pc, #300]	@ (80014b4 <main+0x27c>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fcdb 	bl	8000d44 <__aeabi_fmul>
 800138e:	4603      	mov	r3, r0
 8001390:	461c      	mov	r4, r3
 8001392:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <main+0x278>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc7b 	bl	8000c9c <__aeabi_i2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff fbc0 	bl	8000b30 <__aeabi_fsub>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe16 	bl	8000fe4 <__aeabi_f2uiz>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b3e      	ldr	r3, [pc, #248]	@ (80014b8 <main+0x280>)
 80013be:	701a      	strb	r2, [r3, #0]
            sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 80013c0:	4b32      	ldr	r3, [pc, #200]	@ (800148c <main+0x254>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <main+0x258>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	493c      	ldr	r1, [pc, #240]	@ (80014bc <main+0x284>)
 80013cc:	483c      	ldr	r0, [pc, #240]	@ (80014c0 <main+0x288>)
 80013ce:	f003 fd67 	bl	8004ea0 <siprintf>
            SSD1306_GotoXY (0, 0);
 80013d2:	2100      	movs	r1, #0
 80013d4:	2000      	movs	r0, #0
 80013d6:	f000 fb21 	bl	8001a1c <SSD1306_GotoXY>
            SSD1306_Puts (strCopy, &Font_11x18, 1);
 80013da:	2201      	movs	r2, #1
 80013dc:	4939      	ldr	r1, [pc, #228]	@ (80014c4 <main+0x28c>)
 80013de:	4838      	ldr	r0, [pc, #224]	@ (80014c0 <main+0x288>)
 80013e0:	f000 fbb0 	bl	8001b44 <SSD1306_Puts>
            sprintf(strCopy,"%d.%d F   ", TFI, TFD);
 80013e4:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <main+0x278>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <main+0x280>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4936      	ldr	r1, [pc, #216]	@ (80014c8 <main+0x290>)
 80013f0:	4833      	ldr	r0, [pc, #204]	@ (80014c0 <main+0x288>)
 80013f2:	f003 fd55 	bl	8004ea0 <siprintf>
            SSD1306_GotoXY (0, 20);
 80013f6:	2114      	movs	r1, #20
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 fb0f 	bl	8001a1c <SSD1306_GotoXY>
            SSD1306_Puts (strCopy, &Font_11x18, 1);
 80013fe:	2201      	movs	r2, #1
 8001400:	4930      	ldr	r1, [pc, #192]	@ (80014c4 <main+0x28c>)
 8001402:	482f      	ldr	r0, [pc, #188]	@ (80014c0 <main+0x288>)
 8001404:	f000 fb9e 	bl	8001b44 <SSD1306_Puts>
            sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 8001408:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <main+0x24c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <main+0x250>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	492e      	ldr	r1, [pc, #184]	@ (80014cc <main+0x294>)
 8001414:	482a      	ldr	r0, [pc, #168]	@ (80014c0 <main+0x288>)
 8001416:	f003 fd43 	bl	8004ea0 <siprintf>
            SSD1306_GotoXY (0, 40);
 800141a:	2128      	movs	r1, #40	@ 0x28
 800141c:	2000      	movs	r0, #0
 800141e:	f000 fafd 	bl	8001a1c <SSD1306_GotoXY>
            SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	4927      	ldr	r1, [pc, #156]	@ (80014c4 <main+0x28c>)
 8001426:	4826      	ldr	r0, [pc, #152]	@ (80014c0 <main+0x288>)
 8001428:	f000 fb8c 	bl	8001b44 <SSD1306_Puts>
            SSD1306_UpdateScreen();
 800142c:	f000 fa52 	bl	80018d4 <SSD1306_UpdateScreen>

            char uart_buf[50];
            sprintf(uart_buf, "%.1f,%.1f\n", tCelsius, RH);
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <main+0x264>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe fff7 	bl	8000428 <__aeabi_f2d>
 800143a:	4604      	mov	r4, r0
 800143c:	460d      	mov	r5, r1
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <main+0x274>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fff0 	bl	8000428 <__aeabi_f2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	1d38      	adds	r0, r7, #4
 800144e:	e9cd 2300 	strd	r2, r3, [sp]
 8001452:	4622      	mov	r2, r4
 8001454:	462b      	mov	r3, r5
 8001456:	491e      	ldr	r1, [pc, #120]	@ (80014d0 <main+0x298>)
 8001458:	f003 fd22 	bl	8004ea0 <siprintf>
             HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe fe76 	bl	8000150 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	1d39      	adds	r1, r7, #4
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	4819      	ldr	r0, [pc, #100]	@ (80014d4 <main+0x29c>)
 8001470:	f002 fe26 	bl	80040c0 <HAL_UART_Transmit>
          }
        }
        HAL_Delay(2000);
 8001474:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001478:	f000 fe78 	bl	800216c <HAL_Delay>
        if(DHT11_Start())
 800147c:	e6f0      	b.n	8001260 <main+0x28>
 800147e:	bf00      	nop
 8001480:	2000024c 	.word	0x2000024c
 8001484:	200002dc 	.word	0x200002dc
 8001488:	200002dd 	.word	0x200002dd
 800148c:	200002de 	.word	0x200002de
 8001490:	200002df 	.word	0x200002df
 8001494:	200002e0 	.word	0x200002e0
 8001498:	40240000 	.word	0x40240000
 800149c:	200002ec 	.word	0x200002ec
 80014a0:	41100000 	.word	0x41100000
 80014a4:	40a00000 	.word	0x40a00000
 80014a8:	200002f0 	.word	0x200002f0
 80014ac:	200002f4 	.word	0x200002f4
 80014b0:	200002f8 	.word	0x200002f8
 80014b4:	41200000 	.word	0x41200000
 80014b8:	200002f9 	.word	0x200002f9
 80014bc:	08007130 	.word	0x08007130
 80014c0:	200002fc 	.word	0x200002fc
 80014c4:	20000000 	.word	0x20000000
 80014c8:	0800713c 	.word	0x0800713c
 80014cc:	08007148 	.word	0x08007148
 80014d0:	08007154 	.word	0x08007154
 80014d4:	20000294 	.word	0x20000294

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	@ 0x40
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	2228      	movs	r2, #40	@ 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fd3f 	bl	8004f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001502:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001510:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001514:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001516:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800151a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fea9 	bl	8003278 <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800152c:	f000 f908 	bl	8001740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	230f      	movs	r3, #15
 8001532:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2102      	movs	r1, #2
 800154a:	4618      	mov	r0, r3
 800154c:	f002 f916 	bl	800377c <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001556:	f000 f8f3 	bl	8001740 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3740      	adds	r7, #64	@ 0x40
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <MX_I2C1_Init+0x54>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_I2C1_Init+0x58>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001582:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_I2C1_Init+0x50>)
 80015a2:	f001 f89f 	bl	80026e4 <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 f8c8 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200001f8 	.word	0x200001f8
 80015b8:	40005400 	.word	0x40005400
 80015bc:	00061a80 	.word	0x00061a80

080015c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <MX_TIM1_Init+0x98>)
 80015de:	4a1f      	ldr	r2, [pc, #124]	@ (800165c <MX_TIM1_Init+0x9c>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <MX_TIM1_Init+0x98>)
 80015e4:	2247      	movs	r2, #71	@ 0x47
 80015e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_TIM1_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <MX_TIM1_Init+0x98>)
 80015f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_TIM1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015fc:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_TIM1_Init+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_TIM1_Init+0x98>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001608:	4813      	ldr	r0, [pc, #76]	@ (8001658 <MX_TIM1_Init+0x98>)
 800160a:	f002 fa45 	bl	8003a98 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001614:	f000 f894 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	@ (8001658 <MX_TIM1_Init+0x98>)
 8001626:	f002 fad1 	bl	8003bcc <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001630:	f000 f886 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_TIM1_Init+0x98>)
 8001642:	f002 fc8f 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800164c:	f000 f878 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000024c 	.word	0x2000024c
 800165c:	40012c00 	.word	0x40012c00

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <MX_USART1_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 800166c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_USART1_UART_Init+0x4c>)
 8001698:	f002 fcc2 	bl	8004020 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 f84d 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000294 	.word	0x20000294
 80016b0:	40013800 	.word	0x40013800

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_GPIO_Init+0x80>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <MX_GPIO_Init+0x80>)
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_GPIO_Init+0x80>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_GPIO_Init+0x80>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <MX_GPIO_Init+0x80>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_GPIO_Init+0x80>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <MX_GPIO_Init+0x80>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <MX_GPIO_Init+0x80>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <MX_GPIO_Init+0x80>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <MX_GPIO_Init+0x84>)
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	@ (800173c <MX_GPIO_Init+0x88>)
 8001726:	f000 fe29 	bl	800237c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	10110000 	.word	0x10110000
 800173c:	40010c00 	.word	0x40010c00

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <Error_Handler+0x8>

0800174c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001752:	f000 fa1d 	bl	8001b90 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001756:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800175a:	2201      	movs	r2, #1
 800175c:	2178      	movs	r1, #120	@ 0x78
 800175e:	485b      	ldr	r0, [pc, #364]	@ (80018cc <SSD1306_Init+0x180>)
 8001760:	f001 fa02 	bl	8002b68 <HAL_I2C_IsDeviceReady>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800176a:	2300      	movs	r3, #0
 800176c:	e0a9      	b.n	80018c2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800176e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001772:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001774:	e002      	b.n	800177c <SSD1306_Init+0x30>
		p--;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3b01      	subs	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001782:	22ae      	movs	r2, #174	@ 0xae
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	@ 0x78
 8001788:	f000 fa7c 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800178c:	2220      	movs	r2, #32
 800178e:	2100      	movs	r1, #0
 8001790:	2078      	movs	r0, #120	@ 0x78
 8001792:	f000 fa77 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001796:	2210      	movs	r2, #16
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	@ 0x78
 800179c:	f000 fa72 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017a0:	22b0      	movs	r2, #176	@ 0xb0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2078      	movs	r0, #120	@ 0x78
 80017a6:	f000 fa6d 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80017aa:	22c8      	movs	r2, #200	@ 0xc8
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	@ 0x78
 80017b0:	f000 fa68 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2078      	movs	r0, #120	@ 0x78
 80017ba:	f000 fa63 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80017be:	2210      	movs	r2, #16
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	@ 0x78
 80017c4:	f000 fa5e 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80017c8:	2240      	movs	r2, #64	@ 0x40
 80017ca:	2100      	movs	r1, #0
 80017cc:	2078      	movs	r0, #120	@ 0x78
 80017ce:	f000 fa59 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017d2:	2281      	movs	r2, #129	@ 0x81
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	@ 0x78
 80017d8:	f000 fa54 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017dc:	22ff      	movs	r2, #255	@ 0xff
 80017de:	2100      	movs	r1, #0
 80017e0:	2078      	movs	r0, #120	@ 0x78
 80017e2:	f000 fa4f 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80017e6:	22a1      	movs	r2, #161	@ 0xa1
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	@ 0x78
 80017ec:	f000 fa4a 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017f0:	22a6      	movs	r2, #166	@ 0xa6
 80017f2:	2100      	movs	r1, #0
 80017f4:	2078      	movs	r0, #120	@ 0x78
 80017f6:	f000 fa45 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80017fa:	22a8      	movs	r2, #168	@ 0xa8
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	@ 0x78
 8001800:	f000 fa40 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001804:	223f      	movs	r2, #63	@ 0x3f
 8001806:	2100      	movs	r1, #0
 8001808:	2078      	movs	r0, #120	@ 0x78
 800180a:	f000 fa3b 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800180e:	22a4      	movs	r2, #164	@ 0xa4
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	@ 0x78
 8001814:	f000 fa36 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001818:	22d3      	movs	r2, #211	@ 0xd3
 800181a:	2100      	movs	r1, #0
 800181c:	2078      	movs	r0, #120	@ 0x78
 800181e:	f000 fa31 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2078      	movs	r0, #120	@ 0x78
 8001828:	f000 fa2c 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800182c:	22d5      	movs	r2, #213	@ 0xd5
 800182e:	2100      	movs	r1, #0
 8001830:	2078      	movs	r0, #120	@ 0x78
 8001832:	f000 fa27 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001836:	22f0      	movs	r2, #240	@ 0xf0
 8001838:	2100      	movs	r1, #0
 800183a:	2078      	movs	r0, #120	@ 0x78
 800183c:	f000 fa22 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001840:	22d9      	movs	r2, #217	@ 0xd9
 8001842:	2100      	movs	r1, #0
 8001844:	2078      	movs	r0, #120	@ 0x78
 8001846:	f000 fa1d 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800184a:	2222      	movs	r2, #34	@ 0x22
 800184c:	2100      	movs	r1, #0
 800184e:	2078      	movs	r0, #120	@ 0x78
 8001850:	f000 fa18 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001854:	22da      	movs	r2, #218	@ 0xda
 8001856:	2100      	movs	r1, #0
 8001858:	2078      	movs	r0, #120	@ 0x78
 800185a:	f000 fa13 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800185e:	2212      	movs	r2, #18
 8001860:	2100      	movs	r1, #0
 8001862:	2078      	movs	r0, #120	@ 0x78
 8001864:	f000 fa0e 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001868:	22db      	movs	r2, #219	@ 0xdb
 800186a:	2100      	movs	r1, #0
 800186c:	2078      	movs	r0, #120	@ 0x78
 800186e:	f000 fa09 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001872:	2220      	movs	r2, #32
 8001874:	2100      	movs	r1, #0
 8001876:	2078      	movs	r0, #120	@ 0x78
 8001878:	f000 fa04 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800187c:	228d      	movs	r2, #141	@ 0x8d
 800187e:	2100      	movs	r1, #0
 8001880:	2078      	movs	r0, #120	@ 0x78
 8001882:	f000 f9ff 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001886:	2214      	movs	r2, #20
 8001888:	2100      	movs	r1, #0
 800188a:	2078      	movs	r0, #120	@ 0x78
 800188c:	f000 f9fa 	bl	8001c84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001890:	22af      	movs	r2, #175	@ 0xaf
 8001892:	2100      	movs	r1, #0
 8001894:	2078      	movs	r0, #120	@ 0x78
 8001896:	f000 f9f5 	bl	8001c84 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800189a:	222e      	movs	r2, #46	@ 0x2e
 800189c:	2100      	movs	r1, #0
 800189e:	2078      	movs	r0, #120	@ 0x78
 80018a0:	f000 f9f0 	bl	8001c84 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 f843 	bl	8001930 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80018aa:	f000 f813 	bl	80018d4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <SSD1306_Init+0x184>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <SSD1306_Init+0x184>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018ba:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <SSD1306_Init+0x184>)
 80018bc:	2201      	movs	r2, #1
 80018be:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200001f8 	.word	0x200001f8
 80018d0:	2000070c 	.word	0x2000070c

080018d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80018da:	2300      	movs	r3, #0
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	e01d      	b.n	800191c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	3b50      	subs	r3, #80	@ 0x50
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	2100      	movs	r1, #0
 80018ea:	2078      	movs	r0, #120	@ 0x78
 80018ec:	f000 f9ca 	bl	8001c84 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2078      	movs	r0, #120	@ 0x78
 80018f6:	f000 f9c5 	bl	8001c84 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018fa:	2210      	movs	r2, #16
 80018fc:	2100      	movs	r1, #0
 80018fe:	2078      	movs	r0, #120	@ 0x78
 8001900:	f000 f9c0 	bl	8001c84 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	01db      	lsls	r3, r3, #7
 8001908:	4a08      	ldr	r2, [pc, #32]	@ (800192c <SSD1306_UpdateScreen+0x58>)
 800190a:	441a      	add	r2, r3
 800190c:	2380      	movs	r3, #128	@ 0x80
 800190e:	2140      	movs	r1, #64	@ 0x40
 8001910:	2078      	movs	r0, #120	@ 0x78
 8001912:	f000 f951 	bl	8001bb8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3301      	adds	r3, #1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b07      	cmp	r3, #7
 8001920:	d9de      	bls.n	80018e0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000030c 	.word	0x2000030c

08001930 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <SSD1306_Fill+0x14>
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <SSD1306_Fill+0x16>
 8001944:	23ff      	movs	r3, #255	@ 0xff
 8001946:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800194a:	4619      	mov	r1, r3
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <SSD1306_Fill+0x2c>)
 800194e:	f003 fb0c 	bl	8004f6a <memset>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000030c 	.word	0x2000030c

08001960 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
 800196a:	460b      	mov	r3, r1
 800196c:	80bb      	strh	r3, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	70fb      	strb	r3, [r7, #3]
	if (
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	2b7f      	cmp	r3, #127	@ 0x7f
 8001976:	d848      	bhi.n	8001a0a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	2b3f      	cmp	r3, #63	@ 0x3f
 800197c:	d845      	bhi.n	8001a0a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800197e:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <SSD1306_DrawPixel+0xb4>)
 8001980:	791b      	ldrb	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d11a      	bne.n	80019d0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800199a:	88fa      	ldrh	r2, [r7, #6]
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	b298      	uxth	r0, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	01db      	lsls	r3, r3, #7
 80019a6:	4413      	add	r3, r2
 80019a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a18 <SSD1306_DrawPixel+0xb8>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b259      	sxtb	r1, r3
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	4603      	mov	r3, r0
 80019c4:	01db      	lsls	r3, r3, #7
 80019c6:	4413      	add	r3, r2
 80019c8:	b2c9      	uxtb	r1, r1
 80019ca:	4a13      	ldr	r2, [pc, #76]	@ (8001a18 <SSD1306_DrawPixel+0xb8>)
 80019cc:	54d1      	strb	r1, [r2, r3]
 80019ce:	e01d      	b.n	8001a0c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	88bb      	ldrh	r3, [r7, #4]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	b298      	uxth	r0, r3
 80019d8:	4603      	mov	r3, r0
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	4413      	add	r3, r2
 80019de:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <SSD1306_DrawPixel+0xb8>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	b25a      	sxtb	r2, r3
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	4013      	ands	r3, r2
 80019f8:	b259      	sxtb	r1, r3
 80019fa:	88fa      	ldrh	r2, [r7, #6]
 80019fc:	4603      	mov	r3, r0
 80019fe:	01db      	lsls	r3, r3, #7
 8001a00:	4413      	add	r3, r2
 8001a02:	b2c9      	uxtb	r1, r1
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <SSD1306_DrawPixel+0xb8>)
 8001a06:	54d1      	strb	r1, [r2, r3]
 8001a08:	e000      	b.n	8001a0c <SSD1306_DrawPixel+0xac>
		return;
 8001a0a:	bf00      	nop
	}
}
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	2000070c 	.word	0x2000070c
 8001a18:	2000030c 	.word	0x2000030c

08001a1c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	80fb      	strh	r3, [r7, #6]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a2c:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <SSD1306_GotoXY+0x28>)
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a32:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <SSD1306_GotoXY+0x28>)
 8001a34:	88bb      	ldrh	r3, [r7, #4]
 8001a36:	8053      	strh	r3, [r2, #2]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000070c 	.word	0x2000070c

08001a48 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a58:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <SSD1306_Putc+0xf8>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
	if (
 8001a64:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a66:	dc07      	bgt.n	8001a78 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a68:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <SSD1306_Putc+0xf8>)
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	785b      	ldrb	r3, [r3, #1]
 8001a72:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a74:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a76:	dd01      	ble.n	8001a7c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e05d      	b.n	8001b38 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e04b      	b.n	8001b1a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	3b20      	subs	r3, #32
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	7849      	ldrb	r1, [r1, #1]
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	440b      	add	r3, r1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e030      	b.n	8001b08 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d010      	beq.n	8001ad8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ab6:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <SSD1306_Putc+0xf8>)
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <SSD1306_Putc+0xf8>)
 8001ac4:	885a      	ldrh	r2, [r3, #2]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	79ba      	ldrb	r2, [r7, #6]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff ff45 	bl	8001960 <SSD1306_DrawPixel>
 8001ad6:	e014      	b.n	8001b02 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <SSD1306_Putc+0xf8>)
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b298      	uxth	r0, r3
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <SSD1306_Putc+0xf8>)
 8001ae6:	885a      	ldrh	r2, [r3, #2]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	b299      	uxth	r1, r3
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	f7ff ff2f 	bl	8001960 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	3301      	adds	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d3c8      	bcc.n	8001aa6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d3ad      	bcc.n	8001a82 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <SSD1306_Putc+0xf8>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <SSD1306_Putc+0xf8>)
 8001b34:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000070c 	.word	0x2000070c

08001b44 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b52:	e012      	b.n	8001b7a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	79fa      	ldrb	r2, [r7, #7]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff73 	bl	8001a48 <SSD1306_Putc>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d002      	beq.n	8001b74 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	e008      	b.n	8001b86 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3301      	adds	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e8      	bne.n	8001b54 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	781b      	ldrb	r3, [r3, #0]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <ssd1306_I2C_Init+0x24>)
 8001b98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b9a:	e002      	b.n	8001ba2 <ssd1306_I2C_Init+0x12>
		p--;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	0003d090 	.word	0x0003d090

08001bb8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b0c7      	sub	sp, #284	@ 0x11c
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001bc6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001bca:	600a      	str	r2, [r1, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bd2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bde:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001be2:	4602      	mov	r2, r0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bee:	460a      	mov	r2, r1
 8001bf0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bfa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bfe:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c0c:	e015      	b.n	8001c3a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001c0e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c12:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c16:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c22:	3301      	adds	r3, #1
 8001c24:	7811      	ldrb	r1, [r2, #0]
 8001c26:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c2a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001c2e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c30:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c34:	3301      	adds	r3, #1
 8001c36:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c3a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c44:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d8df      	bhi.n	8001c0e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c52:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b299      	uxth	r1, r3
 8001c5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	f107 020c 	add.w	r2, r7, #12
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	9000      	str	r0, [sp, #0]
 8001c70:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c72:	f000 fe7b 	bl	800296c <HAL_I2C_Master_Transmit>
}
 8001c76:	bf00      	nop
 8001c78:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	200001f8 	.word	0x200001f8

08001c84 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	71bb      	strb	r3, [r7, #6]
 8001c92:	4613      	mov	r3, r2
 8001c94:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c9a:	797b      	ldrb	r3, [r7, #5]
 8001c9c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2302      	movs	r3, #2
 8001cac:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <ssd1306_I2C_Write+0x38>)
 8001cae:	f000 fe5d 	bl	800296c <HAL_I2C_Master_Transmit>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200001f8 	.word	0x200001f8

08001cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <HAL_MspInit+0x5c>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	4a14      	ldr	r2, [pc, #80]	@ (8001d1c <HAL_MspInit+0x5c>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6193      	str	r3, [r2, #24]
 8001cd2:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_MspInit+0x5c>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <HAL_MspInit+0x5c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <HAL_MspInit+0x5c>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <HAL_MspInit+0x5c>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_MspInit+0x60>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <HAL_MspInit+0x60>)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000

08001d24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a15      	ldr	r2, [pc, #84]	@ (8001d94 <HAL_I2C_MspInit+0x70>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d123      	bne.n	8001d8c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_I2C_MspInit+0x74>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a13      	ldr	r2, [pc, #76]	@ (8001d98 <HAL_I2C_MspInit+0x74>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_I2C_MspInit+0x74>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d5c:	23c0      	movs	r3, #192	@ 0xc0
 8001d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d60:	2312      	movs	r3, #18
 8001d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480b      	ldr	r0, [pc, #44]	@ (8001d9c <HAL_I2C_MspInit+0x78>)
 8001d70:	f000 fb04 	bl	800237c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_I2C_MspInit+0x74>)
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_I2C_MspInit+0x74>)
 8001d7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d7e:	61d3      	str	r3, [r2, #28]
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_I2C_MspInit+0x74>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40005400 	.word	0x40005400
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010c00 	.word	0x40010c00

08001da0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x34>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d10b      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x38>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	4a08      	ldr	r2, [pc, #32]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x38>)
 8001db8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dbc:	6193      	str	r3, [r2, #24]
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x38>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <HAL_UART_MspInit+0x8c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d131      	bne.n	8001e60 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_UART_MspInit+0x90>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a1a      	ldr	r2, [pc, #104]	@ (8001e6c <HAL_UART_MspInit+0x90>)
 8001e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_UART_MspInit+0x90>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_UART_MspInit+0x90>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a14      	ldr	r2, [pc, #80]	@ (8001e6c <HAL_UART_MspInit+0x90>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_UART_MspInit+0x90>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480b      	ldr	r0, [pc, #44]	@ (8001e70 <HAL_UART_MspInit+0x94>)
 8001e42:	f000 fa9b 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_UART_MspInit+0x94>)
 8001e5c:	f000 fa8e 	bl	800237c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010800 	.word	0x40010800

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <NMI_Handler+0x4>

08001e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f000 f936 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <_kill>:

int _kill(int pid, int sig)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ee4:	f003 f894 	bl	8005010 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2216      	movs	r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
  return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_exit>:

void _exit (int status)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffe7 	bl	8001eda <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <_exit+0x12>

08001f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e00a      	b.n	8001f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f22:	f3af 8000 	nop.w
 8001f26:	4601      	mov	r1, r0
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbf0      	blt.n	8001f22 <_read+0x12>
  }

  return len;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e009      	b.n	8001f70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	60ba      	str	r2, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf1      	blt.n	8001f5c <_write+0x12>
  }
  return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa8:	605a      	str	r2, [r3, #4]
  return 0;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <_isatty>:

int _isatty(int file)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
	...

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f002 fffc 	bl	8005010 <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20005000 	.word	0x20005000
 8002044:	00000400 	.word	0x00000400
 8002048:	20000714 	.word	0x20000714
 800204c:	20000868 	.word	0x20000868

08002050 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800205c:	f7ff fff8 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002060:	480b      	ldr	r0, [pc, #44]	@ (8002090 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002062:	490c      	ldr	r1, [pc, #48]	@ (8002094 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002064:	4a0c      	ldr	r2, [pc, #48]	@ (8002098 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a09      	ldr	r2, [pc, #36]	@ (800209c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002078:	4c09      	ldr	r4, [pc, #36]	@ (80020a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002086:	f002 ffc9 	bl	800501c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800208a:	f7ff f8d5 	bl	8001238 <main>
  bx lr
 800208e:	4770      	bx	lr
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002098:	0800826c 	.word	0x0800826c
  ldr r2, =_sbss
 800209c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80020a0:	20000868 	.word	0x20000868

080020a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC1_2_IRQHandler>
	...

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_Init+0x28>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <HAL_Init+0x28>)
 80020b2:	f043 0310 	orr.w	r3, r3, #16
 80020b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f000 f92b 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020be:	200f      	movs	r0, #15
 80020c0:	f000 f808 	bl	80020d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c4:	f7ff fdfc 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40022000 	.word	0x40022000

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_InitTick+0x54>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_InitTick+0x58>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f935 	bl	8002362 <HAL_SYSTICK_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00e      	b.n	8002120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d80a      	bhi.n	800211e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f000 f90b 	bl	800232a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	4a06      	ldr	r2, [pc, #24]	@ (8002130 <HAL_InitTick+0x5c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000008 	.word	0x20000008
 800212c:	20000010 	.word	0x20000010
 8002130:	2000000c 	.word	0x2000000c

08002134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_IncTick+0x1c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_IncTick+0x20>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a03      	ldr	r2, [pc, #12]	@ (8002154 <HAL_IncTick+0x20>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000010 	.word	0x20000010
 8002154:	20000718 	.word	0x20000718

08002158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b02      	ldr	r3, [pc, #8]	@ (8002168 <HAL_GetTick+0x10>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	20000718 	.word	0x20000718

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff fff0 	bl	8002158 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffe0 	bl	8002158 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000010 	.word	0x20000010

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	@ (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	@ (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff90 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff49 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff5e 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff90 	bl	800226c <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5f 	bl	8002218 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffb0 	bl	80022d0 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b08b      	sub	sp, #44	@ 0x2c
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238e:	e169      	b.n	8002664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002390:	2201      	movs	r2, #1
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f040 8158 	bne.w	800265e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a9a      	ldr	r2, [pc, #616]	@ (800261c <HAL_GPIO_Init+0x2a0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d05e      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023b8:	4a98      	ldr	r2, [pc, #608]	@ (800261c <HAL_GPIO_Init+0x2a0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d875      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023be:	4a98      	ldr	r2, [pc, #608]	@ (8002620 <HAL_GPIO_Init+0x2a4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d058      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023c4:	4a96      	ldr	r2, [pc, #600]	@ (8002620 <HAL_GPIO_Init+0x2a4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d86f      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023ca:	4a96      	ldr	r2, [pc, #600]	@ (8002624 <HAL_GPIO_Init+0x2a8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d052      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023d0:	4a94      	ldr	r2, [pc, #592]	@ (8002624 <HAL_GPIO_Init+0x2a8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d869      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023d6:	4a94      	ldr	r2, [pc, #592]	@ (8002628 <HAL_GPIO_Init+0x2ac>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d04c      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023dc:	4a92      	ldr	r2, [pc, #584]	@ (8002628 <HAL_GPIO_Init+0x2ac>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d863      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023e2:	4a92      	ldr	r2, [pc, #584]	@ (800262c <HAL_GPIO_Init+0x2b0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d046      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023e8:	4a90      	ldr	r2, [pc, #576]	@ (800262c <HAL_GPIO_Init+0x2b0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d85d      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023ee:	2b12      	cmp	r3, #18
 80023f0:	d82a      	bhi.n	8002448 <HAL_GPIO_Init+0xcc>
 80023f2:	2b12      	cmp	r3, #18
 80023f4:	d859      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023f6:	a201      	add	r2, pc, #4	@ (adr r2, 80023fc <HAL_GPIO_Init+0x80>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	08002477 	.word	0x08002477
 8002400:	08002451 	.word	0x08002451
 8002404:	08002463 	.word	0x08002463
 8002408:	080024a5 	.word	0x080024a5
 800240c:	080024ab 	.word	0x080024ab
 8002410:	080024ab 	.word	0x080024ab
 8002414:	080024ab 	.word	0x080024ab
 8002418:	080024ab 	.word	0x080024ab
 800241c:	080024ab 	.word	0x080024ab
 8002420:	080024ab 	.word	0x080024ab
 8002424:	080024ab 	.word	0x080024ab
 8002428:	080024ab 	.word	0x080024ab
 800242c:	080024ab 	.word	0x080024ab
 8002430:	080024ab 	.word	0x080024ab
 8002434:	080024ab 	.word	0x080024ab
 8002438:	080024ab 	.word	0x080024ab
 800243c:	080024ab 	.word	0x080024ab
 8002440:	08002459 	.word	0x08002459
 8002444:	0800246d 	.word	0x0800246d
 8002448:	4a79      	ldr	r2, [pc, #484]	@ (8002630 <HAL_GPIO_Init+0x2b4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800244e:	e02c      	b.n	80024aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	623b      	str	r3, [r7, #32]
          break;
 8002456:	e029      	b.n	80024ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	3304      	adds	r3, #4
 800245e:	623b      	str	r3, [r7, #32]
          break;
 8002460:	e024      	b.n	80024ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	3308      	adds	r3, #8
 8002468:	623b      	str	r3, [r7, #32]
          break;
 800246a:	e01f      	b.n	80024ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	330c      	adds	r3, #12
 8002472:	623b      	str	r3, [r7, #32]
          break;
 8002474:	e01a      	b.n	80024ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800247e:	2304      	movs	r3, #4
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e013      	b.n	80024ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800248c:	2308      	movs	r3, #8
 800248e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	611a      	str	r2, [r3, #16]
          break;
 8002496:	e009      	b.n	80024ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002498:	2308      	movs	r3, #8
 800249a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	615a      	str	r2, [r3, #20]
          break;
 80024a2:	e003      	b.n	80024ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
          break;
 80024a8:	e000      	b.n	80024ac <HAL_GPIO_Init+0x130>
          break;
 80024aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2bff      	cmp	r3, #255	@ 0xff
 80024b0:	d801      	bhi.n	80024b6 <HAL_GPIO_Init+0x13a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	e001      	b.n	80024ba <HAL_GPIO_Init+0x13e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2bff      	cmp	r3, #255	@ 0xff
 80024c0:	d802      	bhi.n	80024c8 <HAL_GPIO_Init+0x14c>
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	e002      	b.n	80024ce <HAL_GPIO_Init+0x152>
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	3b08      	subs	r3, #8
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	210f      	movs	r1, #15
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	401a      	ands	r2, r3
 80024e0:	6a39      	ldr	r1, [r7, #32]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	431a      	orrs	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80b1 	beq.w	800265e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002634 <HAL_GPIO_Init+0x2b8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a4c      	ldr	r2, [pc, #304]	@ (8002634 <HAL_GPIO_Init+0x2b8>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b4a      	ldr	r3, [pc, #296]	@ (8002634 <HAL_GPIO_Init+0x2b8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002514:	4a48      	ldr	r2, [pc, #288]	@ (8002638 <HAL_GPIO_Init+0x2bc>)
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a40      	ldr	r2, [pc, #256]	@ (800263c <HAL_GPIO_Init+0x2c0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_GPIO_Init+0x1ec>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3f      	ldr	r2, [pc, #252]	@ (8002640 <HAL_GPIO_Init+0x2c4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00d      	beq.n	8002564 <HAL_GPIO_Init+0x1e8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3e      	ldr	r2, [pc, #248]	@ (8002644 <HAL_GPIO_Init+0x2c8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <HAL_GPIO_Init+0x1e4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a3d      	ldr	r2, [pc, #244]	@ (8002648 <HAL_GPIO_Init+0x2cc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_GPIO_Init+0x1e0>
 8002558:	2303      	movs	r3, #3
 800255a:	e006      	b.n	800256a <HAL_GPIO_Init+0x1ee>
 800255c:	2304      	movs	r3, #4
 800255e:	e004      	b.n	800256a <HAL_GPIO_Init+0x1ee>
 8002560:	2302      	movs	r3, #2
 8002562:	e002      	b.n	800256a <HAL_GPIO_Init+0x1ee>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_GPIO_Init+0x1ee>
 8002568:	2300      	movs	r3, #0
 800256a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256c:	f002 0203 	and.w	r2, r2, #3
 8002570:	0092      	lsls	r2, r2, #2
 8002572:	4093      	lsls	r3, r2
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800257a:	492f      	ldr	r1, [pc, #188]	@ (8002638 <HAL_GPIO_Init+0x2bc>)
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002594:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	492c      	ldr	r1, [pc, #176]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025a2:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4928      	ldr	r1, [pc, #160]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025bc:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	4922      	ldr	r1, [pc, #136]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60cb      	str	r3, [r1, #12]
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	491e      	ldr	r1, [pc, #120]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4918      	ldr	r1, [pc, #96]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4914      	ldr	r1, [pc, #80]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d021      	beq.n	8002650 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	490e      	ldr	r1, [pc, #56]	@ (800264c <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	e021      	b.n	800265e <HAL_GPIO_Init+0x2e2>
 800261a:	bf00      	nop
 800261c:	10320000 	.word	0x10320000
 8002620:	10310000 	.word	0x10310000
 8002624:	10220000 	.word	0x10220000
 8002628:	10210000 	.word	0x10210000
 800262c:	10120000 	.word	0x10120000
 8002630:	10110000 	.word	0x10110000
 8002634:	40021000 	.word	0x40021000
 8002638:	40010000 	.word	0x40010000
 800263c:	40010800 	.word	0x40010800
 8002640:	40010c00 	.word	0x40010c00
 8002644:	40011000 	.word	0x40011000
 8002648:	40011400 	.word	0x40011400
 800264c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002650:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <HAL_GPIO_Init+0x304>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	43db      	mvns	r3, r3
 8002658:	4909      	ldr	r1, [pc, #36]	@ (8002680 <HAL_GPIO_Init+0x304>)
 800265a:	4013      	ands	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	3301      	adds	r3, #1
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	f47f ae8e 	bne.w	8002390 <HAL_GPIO_Init+0x14>
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	372c      	adds	r7, #44	@ 0x2c
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40010400 	.word	0x40010400

08002684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e001      	b.n	80026a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	807b      	strh	r3, [r7, #2]
 80026be:	4613      	mov	r3, r2
 80026c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c2:	787b      	ldrb	r3, [r7, #1]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c8:	887a      	ldrh	r2, [r7, #2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026ce:	e003      	b.n	80026d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	041a      	lsls	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	611a      	str	r2, [r3, #16]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e12b      	b.n	800294e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fb0a 	bl	8001d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2224      	movs	r2, #36	@ 0x24
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002736:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002746:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002748:	f001 f960 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 800274c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a81      	ldr	r2, [pc, #516]	@ (8002958 <HAL_I2C_Init+0x274>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d807      	bhi.n	8002768 <HAL_I2C_Init+0x84>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a80      	ldr	r2, [pc, #512]	@ (800295c <HAL_I2C_Init+0x278>)
 800275c:	4293      	cmp	r3, r2
 800275e:	bf94      	ite	ls
 8002760:	2301      	movls	r3, #1
 8002762:	2300      	movhi	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e006      	b.n	8002776 <HAL_I2C_Init+0x92>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a7d      	ldr	r2, [pc, #500]	@ (8002960 <HAL_I2C_Init+0x27c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	bf94      	ite	ls
 8002770:	2301      	movls	r3, #1
 8002772:	2300      	movhi	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0e7      	b.n	800294e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a78      	ldr	r2, [pc, #480]	@ (8002964 <HAL_I2C_Init+0x280>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0c9b      	lsrs	r3, r3, #18
 8002788:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002958 <HAL_I2C_Init+0x274>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d802      	bhi.n	80027b8 <HAL_I2C_Init+0xd4>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	e009      	b.n	80027cc <HAL_I2C_Init+0xe8>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	4a69      	ldr	r2, [pc, #420]	@ (8002968 <HAL_I2C_Init+0x284>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	3301      	adds	r3, #1
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	495c      	ldr	r1, [pc, #368]	@ (8002958 <HAL_I2C_Init+0x274>)
 80027e8:	428b      	cmp	r3, r1
 80027ea:	d819      	bhi.n	8002820 <HAL_I2C_Init+0x13c>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e59      	subs	r1, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002800:	400b      	ands	r3, r1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_I2C_Init+0x138>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1e59      	subs	r1, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fbb1 f3f3 	udiv	r3, r1, r3
 8002814:	3301      	adds	r3, #1
 8002816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281a:	e051      	b.n	80028c0 <HAL_I2C_Init+0x1dc>
 800281c:	2304      	movs	r3, #4
 800281e:	e04f      	b.n	80028c0 <HAL_I2C_Init+0x1dc>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d111      	bne.n	800284c <HAL_I2C_Init+0x168>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e58      	subs	r0, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	440b      	add	r3, r1
 8002836:	fbb0 f3f3 	udiv	r3, r0, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e012      	b.n	8002872 <HAL_I2C_Init+0x18e>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Init+0x196>
 8002876:	2301      	movs	r3, #1
 8002878:	e022      	b.n	80028c0 <HAL_I2C_Init+0x1dc>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10e      	bne.n	80028a0 <HAL_I2C_Init+0x1bc>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e58      	subs	r0, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	440b      	add	r3, r1
 8002890:	fbb0 f3f3 	udiv	r3, r0, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800289e:	e00f      	b.n	80028c0 <HAL_I2C_Init+0x1dc>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	0099      	lsls	r1, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	6809      	ldr	r1, [r1, #0]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6911      	ldr	r1, [r2, #16]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	000186a0 	.word	0x000186a0
 800295c:	001e847f 	.word	0x001e847f
 8002960:	003d08ff 	.word	0x003d08ff
 8002964:	431bde83 	.word	0x431bde83
 8002968:	10624dd3 	.word	0x10624dd3

0800296c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	461a      	mov	r2, r3
 8002978:	460b      	mov	r3, r1
 800297a:	817b      	strh	r3, [r7, #10]
 800297c:	4613      	mov	r3, r2
 800297e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff fbea 	bl	8002158 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	f040 80e0 	bne.w	8002b54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	2201      	movs	r2, #1
 800299c:	4970      	ldr	r1, [pc, #448]	@ (8002b60 <HAL_I2C_Master_Transmit+0x1f4>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fa92 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	e0d3      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_I2C_Master_Transmit+0x50>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0cc      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d007      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	@ 0x21
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2210      	movs	r2, #16
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	893a      	ldrh	r2, [r7, #8]
 8002a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a50      	ldr	r2, [pc, #320]	@ (8002b64 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a24:	8979      	ldrh	r1, [r7, #10]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f9ca 	bl	8002dc4 <I2C_MasterRequestWrite>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e08d      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a50:	e066      	b.n	8002b20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fb50 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x188>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d017      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	6a39      	ldr	r1, [r7, #32]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fb47 	bl	800318c <I2C_WaitOnBTFFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d107      	bne.n	8002b1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e01a      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d194      	bne.n	8002a52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	00100002 	.word	0x00100002
 8002b64:	ffff0000 	.word	0xffff0000

08002b68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff faee 	bl	8002158 <HAL_GetTick>
 8002b7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	f040 8111 	bne.w	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2319      	movs	r3, #25
 8002b96:	2201      	movs	r2, #1
 8002b98:	4988      	ldr	r1, [pc, #544]	@ (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f994 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e104      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_I2C_IsDeviceReady+0x50>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0fd      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d007      	beq.n	8002bde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2224      	movs	r2, #36	@ 0x24
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a70      	ldr	r2, [pc, #448]	@ (8002dc0 <HAL_I2C_IsDeviceReady+0x258>)
 8002c00:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f952 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c38:	d103      	bne.n	8002c42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c40:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e0b6      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c56:	f7ff fa7f 	bl	8002158 <HAL_GetTick>
 8002c5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c8a:	e025      	b.n	8002cd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c8c:	f7ff fa64 	bl	8002158 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d302      	bcc.n	8002ca2 <HAL_I2C_IsDeviceReady+0x13a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22a0      	movs	r2, #160	@ 0xa0
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_I2C_IsDeviceReady+0x188>
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_I2C_IsDeviceReady+0x188>
 8002cea:	7dbb      	ldrb	r3, [r7, #22]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0cd      	beq.n	8002c8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d129      	bne.n	8002d5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2319      	movs	r3, #25
 8002d32:	2201      	movs	r2, #1
 8002d34:	4921      	ldr	r1, [pc, #132]	@ (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f8c6 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e036      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e02c      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2319      	movs	r3, #25
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	490f      	ldr	r1, [pc, #60]	@ (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f8a2 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e012      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	3301      	adds	r3, #1
 8002d92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	f4ff af32 	bcc.w	8002c02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	00100002 	.word	0x00100002
 8002dc0:	ffff0000 	.word	0xffff0000

08002dc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d006      	beq.n	8002dee <I2C_MasterRequestWrite+0x2a>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d003      	beq.n	8002dee <I2C_MasterRequestWrite+0x2a>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dec:	d108      	bne.n	8002e00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e00b      	b.n	8002e18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	d107      	bne.n	8002e18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f84f 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3e:	d103      	bne.n	8002e48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e035      	b.n	8002eb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e54:	d108      	bne.n	8002e68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	e01b      	b.n	8002ea0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	11db      	asrs	r3, r3, #7
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0306 	and.w	r3, r3, #6
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f063 030f 	orn	r3, r3, #15
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	490e      	ldr	r1, [pc, #56]	@ (8002ec0 <I2C_MasterRequestWrite+0xfc>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f898 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e010      	b.n	8002eb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e96:	897b      	ldrh	r3, [r7, #10]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4907      	ldr	r1, [pc, #28]	@ (8002ec4 <I2C_MasterRequestWrite+0x100>)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f888 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	00010008 	.word	0x00010008
 8002ec4:	00010002 	.word	0x00010002

08002ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed8:	e048      	b.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d044      	beq.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7ff f939 	bl	8002158 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d139      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10d      	bne.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	e00c      	b.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d116      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e023      	b.n	8002fb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10d      	bne.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	e00c      	b.n	8002fac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d093      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fca:	e071      	b.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d123      	bne.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f043 0204 	orr.w	r2, r3, #4
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e067      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d041      	beq.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7ff f894 	bl	8002158 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d136      	bne.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10c      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	e00b      	b.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	43da      	mvns	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4013      	ands	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d016      	beq.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e021      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10c      	bne.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e00b      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f af6d 	bne.w	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003108:	e034      	b.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f886 	bl	800321c <I2C_IsAcknowledgeFailed>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e034      	b.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d028      	beq.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7ff f819 	bl	8002158 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d11d      	bne.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003142:	2b80      	cmp	r3, #128	@ 0x80
 8003144:	d016      	beq.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e007      	b.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317e:	2b80      	cmp	r3, #128	@ 0x80
 8003180:	d1c3      	bne.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003198:	e034      	b.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f83e 	bl	800321c <I2C_IsAcknowledgeFailed>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e034      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d028      	beq.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fe ffd1 	bl	8002158 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11d      	bne.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d016      	beq.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d1c3      	bne.n	800319a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d11b      	bne.n	800326c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800323c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	f043 0204 	orr.w	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e272      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8087 	beq.w	80033a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003298:	4b92      	ldr	r3, [pc, #584]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d00c      	beq.n	80032be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a4:	4b8f      	ldr	r3, [pc, #572]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d112      	bne.n	80032d6 <HAL_RCC_OscConfig+0x5e>
 80032b0:	4b8c      	ldr	r3, [pc, #560]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032bc:	d10b      	bne.n	80032d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032be:	4b89      	ldr	r3, [pc, #548]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d06c      	beq.n	80033a4 <HAL_RCC_OscConfig+0x12c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d168      	bne.n	80033a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e24c      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x76>
 80032e0:	4b80      	ldr	r3, [pc, #512]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a7f      	ldr	r2, [pc, #508]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	e02e      	b.n	800334c <HAL_RCC_OscConfig+0xd4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x98>
 80032f6:	4b7b      	ldr	r3, [pc, #492]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7a      	ldr	r2, [pc, #488]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b78      	ldr	r3, [pc, #480]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a77      	ldr	r2, [pc, #476]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xd4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0xbc>
 800331a:	4b72      	ldr	r3, [pc, #456]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a71      	ldr	r2, [pc, #452]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b6f      	ldr	r3, [pc, #444]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6e      	ldr	r2, [pc, #440]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xd4>
 8003334:	4b6b      	ldr	r3, [pc, #428]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a6a      	ldr	r2, [pc, #424]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b68      	ldr	r3, [pc, #416]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a67      	ldr	r2, [pc, #412]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe ff00 	bl	8002158 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fefc 	bl	8002158 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e200      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b5d      	ldr	r3, [pc, #372]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xe4>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe feec 	bl	8002158 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe fee8 	bl	8002158 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	@ 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1ec      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x10c>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b2:	4b4c      	ldr	r3, [pc, #304]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033be:	4b49      	ldr	r3, [pc, #292]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x18c>
 80033ca:	4b46      	ldr	r3, [pc, #280]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b43      	ldr	r3, [pc, #268]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x176>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1c0      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4939      	ldr	r1, [pc, #228]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b36      	ldr	r3, [pc, #216]	@ (80034e8 <HAL_RCC_OscConfig+0x270>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003412:	f7fe fea1 	bl	8002158 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe fe9d 	bl	8002158 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1a1      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b2d      	ldr	r3, [pc, #180]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b2a      	ldr	r3, [pc, #168]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4927      	ldr	r1, [pc, #156]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fe80 	bl	8002158 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe fe7c 	bl	8002158 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e180      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d03a      	beq.n	80034fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d019      	beq.n	80034c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b17      	ldr	r3, [pc, #92]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7fe fe60 	bl	8002158 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fe5c 	bl	8002158 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e160      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f000 face 	bl	8003a5c <RCC_Delay>
 80034c0:	e01c      	b.n	80034fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c2:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c8:	f7fe fe46 	bl	8002158 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ce:	e00f      	b.n	80034f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe fe42 	bl	8002158 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d908      	bls.n	80034f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e146      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	42420000 	.word	0x42420000
 80034ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	4b92      	ldr	r3, [pc, #584]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e9      	bne.n	80034d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80a6 	beq.w	8003656 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350e:	4b8b      	ldr	r3, [pc, #556]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10d      	bne.n	8003536 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351a:	4b88      	ldr	r3, [pc, #544]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	4a87      	ldr	r2, [pc, #540]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003524:	61d3      	str	r3, [r2, #28]
 8003526:	4b85      	ldr	r3, [pc, #532]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b82      	ldr	r3, [pc, #520]	@ (8003740 <HAL_RCC_OscConfig+0x4c8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003542:	4b7f      	ldr	r3, [pc, #508]	@ (8003740 <HAL_RCC_OscConfig+0x4c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7e      	ldr	r2, [pc, #504]	@ (8003740 <HAL_RCC_OscConfig+0x4c8>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fe fe03 	bl	8002158 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fe fdff 	bl	8002158 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b64      	cmp	r3, #100	@ 0x64
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e103      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	4b75      	ldr	r3, [pc, #468]	@ (8003740 <HAL_RCC_OscConfig+0x4c8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x312>
 800357c:	4b6f      	ldr	r3, [pc, #444]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4a6e      	ldr	r2, [pc, #440]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6213      	str	r3, [r2, #32]
 8003588:	e02d      	b.n	80035e6 <HAL_RCC_OscConfig+0x36e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x334>
 8003592:	4b6a      	ldr	r3, [pc, #424]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4a69      	ldr	r2, [pc, #420]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	6213      	str	r3, [r2, #32]
 800359e:	4b67      	ldr	r3, [pc, #412]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a66      	ldr	r2, [pc, #408]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f023 0304 	bic.w	r3, r3, #4
 80035a8:	6213      	str	r3, [r2, #32]
 80035aa:	e01c      	b.n	80035e6 <HAL_RCC_OscConfig+0x36e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d10c      	bne.n	80035ce <HAL_RCC_OscConfig+0x356>
 80035b4:	4b61      	ldr	r3, [pc, #388]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a60      	ldr	r2, [pc, #384]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	f043 0304 	orr.w	r3, r3, #4
 80035be:	6213      	str	r3, [r2, #32]
 80035c0:	4b5e      	ldr	r3, [pc, #376]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a5d      	ldr	r2, [pc, #372]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6213      	str	r3, [r2, #32]
 80035cc:	e00b      	b.n	80035e6 <HAL_RCC_OscConfig+0x36e>
 80035ce:	4b5b      	ldr	r3, [pc, #364]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4a5a      	ldr	r2, [pc, #360]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6213      	str	r3, [r2, #32]
 80035da:	4b58      	ldr	r3, [pc, #352]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a57      	ldr	r2, [pc, #348]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d015      	beq.n	800361a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ee:	f7fe fdb3 	bl	8002158 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f4:	e00a      	b.n	800360c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f6:	f7fe fdaf 	bl	8002158 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e0b1      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	4b4b      	ldr	r3, [pc, #300]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0ee      	beq.n	80035f6 <HAL_RCC_OscConfig+0x37e>
 8003618:	e014      	b.n	8003644 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fe fd9d 	bl	8002158 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fe fd99 	bl	8002158 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e09b      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003638:	4b40      	ldr	r3, [pc, #256]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ee      	bne.n	8003622 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d105      	bne.n	8003656 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b3c      	ldr	r3, [pc, #240]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	4a3b      	ldr	r2, [pc, #236]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003654:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8087 	beq.w	800376e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003660:	4b36      	ldr	r3, [pc, #216]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d061      	beq.n	8003730 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d146      	bne.n	8003702 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003674:	4b33      	ldr	r3, [pc, #204]	@ (8003744 <HAL_RCC_OscConfig+0x4cc>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367a:	f7fe fd6d 	bl	8002158 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003682:	f7fe fd69 	bl	8002158 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e06d      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003694:	4b29      	ldr	r3, [pc, #164]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a8:	d108      	bne.n	80036bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4921      	ldr	r1, [pc, #132]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036bc:	4b1f      	ldr	r3, [pc, #124]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a19      	ldr	r1, [r3, #32]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	430b      	orrs	r3, r1
 80036ce:	491b      	ldr	r1, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <HAL_RCC_OscConfig+0x4cc>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fe fd3d 	bl	8002158 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fe fd39 	bl	8002158 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e03d      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f4:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x46a>
 8003700:	e035      	b.n	800376e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_RCC_OscConfig+0x4cc>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe fd26 	bl	8002158 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe fd22 	bl	8002158 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e026      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_RCC_OscConfig+0x4c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x498>
 800372e:	e01e      	b.n	800376e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e019      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
 800373c:	40021000 	.word	0x40021000
 8003740:	40007000 	.word	0x40007000
 8003744:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003748:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <HAL_RCC_OscConfig+0x500>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	429a      	cmp	r2, r3
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0d0      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b6a      	ldr	r3, [pc, #424]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d910      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b67      	ldr	r3, [pc, #412]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	4965      	ldr	r1, [pc, #404]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b63      	ldr	r3, [pc, #396]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d8:	4b59      	ldr	r3, [pc, #356]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4a58      	ldr	r2, [pc, #352]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f0:	4b53      	ldr	r3, [pc, #332]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a52      	ldr	r2, [pc, #328]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b50      	ldr	r3, [pc, #320]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	494d      	ldr	r1, [pc, #308]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d040      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b47      	ldr	r3, [pc, #284]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d115      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e073      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3d      	ldr	r3, [pc, #244]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06b      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b39      	ldr	r3, [pc, #228]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4936      	ldr	r1, [pc, #216]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fe fc74 	bl	8002158 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe fc70 	bl	8002158 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e053      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b27      	ldr	r3, [pc, #156]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d210      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b24      	ldr	r3, [pc, #144]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 0207 	bic.w	r2, r3, #7
 80038b2:	4922      	ldr	r1, [pc, #136]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b20      	ldr	r3, [pc, #128]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e032      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4916      	ldr	r1, [pc, #88]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038f6:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490e      	ldr	r1, [pc, #56]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800390a:	f000 f821 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490a      	ldr	r1, [pc, #40]	@ (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	@ (8003948 <HAL_RCC_ClockConfig+0x1cc>)
 8003924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x1d0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fbd2 	bl	80020d4 <HAL_InitTick>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40022000 	.word	0x40022000
 8003940:	40021000 	.word	0x40021000
 8003944:	08007ebc 	.word	0x08007ebc
 8003948:	20000008 	.word	0x20000008
 800394c:	2000000c 	.word	0x2000000c

08003950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800396a:	4b1e      	ldr	r3, [pc, #120]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b04      	cmp	r3, #4
 8003978:	d002      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x30>
 800397a:	2b08      	cmp	r3, #8
 800397c:	d003      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x36>
 800397e:	e027      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003980:	4b19      	ldr	r3, [pc, #100]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003982:	613b      	str	r3, [r7, #16]
      break;
 8003984:	e027      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	0c9b      	lsrs	r3, r3, #18
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d010      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800399e:	4b11      	ldr	r3, [pc, #68]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	0c5b      	lsrs	r3, r3, #17
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	4a11      	ldr	r2, [pc, #68]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039aa:	5cd3      	ldrb	r3, [r2, r3]
 80039ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a0d      	ldr	r2, [pc, #52]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80039b2:	fb03 f202 	mul.w	r2, r3, r2
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e004      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a0c      	ldr	r2, [pc, #48]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	613b      	str	r3, [r7, #16]
      break;
 80039ce:	e002      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80039d2:	613b      	str	r3, [r7, #16]
      break;
 80039d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d6:	693b      	ldr	r3, [r7, #16]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
 80039e8:	007a1200 	.word	0x007a1200
 80039ec:	08007ed4 	.word	0x08007ed4
 80039f0:	08007ee4 	.word	0x08007ee4
 80039f4:	003d0900 	.word	0x003d0900

080039f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b02      	ldr	r3, [pc, #8]	@ (8003a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	20000008 	.word	0x20000008

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a10:	f7ff fff2 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	@ (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08007ecc 	.word	0x08007ecc

08003a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a38:	f7ff ffde 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0adb      	lsrs	r3, r3, #11
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4903      	ldr	r1, [pc, #12]	@ (8003a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	08007ecc 	.word	0x08007ecc

08003a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <RCC_Delay+0x34>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0a      	ldr	r2, [pc, #40]	@ (8003a94 <RCC_Delay+0x38>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0a5b      	lsrs	r3, r3, #9
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a78:	bf00      	nop
  }
  while (Delay --);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	60fa      	str	r2, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f9      	bne.n	8003a78 <RCC_Delay+0x1c>
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	20000008 	.word	0x20000008
 8003a94:	10624dd3 	.word	0x10624dd3

08003a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e041      	b.n	8003b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe f96e 	bl	8001da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	f000 f940 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d001      	beq.n	8003b50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a18      	ldr	r2, [pc, #96]	@ (8003bc0 <HAL_TIM_Base_Start+0x88>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_TIM_Base_Start+0x48>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b6a:	d009      	beq.n	8003b80 <HAL_TIM_Base_Start+0x48>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a14      	ldr	r2, [pc, #80]	@ (8003bc4 <HAL_TIM_Base_Start+0x8c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_TIM_Base_Start+0x48>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a13      	ldr	r2, [pc, #76]	@ (8003bc8 <HAL_TIM_Base_Start+0x90>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d111      	bne.n	8003ba4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d010      	beq.n	8003bb4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba2:	e007      	b.n	8003bb4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800

08003bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0b4      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x186>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c20:	d03e      	beq.n	8003ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c26:	f200 8087 	bhi.w	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2e:	f000 8086 	beq.w	8003d3e <HAL_TIM_ConfigClockSource+0x172>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c36:	d87f      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b70      	cmp	r3, #112	@ 0x70
 8003c3a:	d01a      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0xa6>
 8003c3c:	2b70      	cmp	r3, #112	@ 0x70
 8003c3e:	d87b      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b60      	cmp	r3, #96	@ 0x60
 8003c42:	d050      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c44:	2b60      	cmp	r3, #96	@ 0x60
 8003c46:	d877      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b50      	cmp	r3, #80	@ 0x50
 8003c4a:	d03c      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c4c:	2b50      	cmp	r3, #80	@ 0x50
 8003c4e:	d873      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b40      	cmp	r3, #64	@ 0x40
 8003c52:	d058      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x13a>
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	d86f      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b30      	cmp	r3, #48	@ 0x30
 8003c5a:	d064      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x15a>
 8003c5c:	2b30      	cmp	r3, #48	@ 0x30
 8003c5e:	d86b      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d060      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x15a>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d867      	bhi.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d05c      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x15a>
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d05a      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x15a>
 8003c70:	e062      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c82:	f000 f950 	bl	8003f26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	609a      	str	r2, [r3, #8]
      break;
 8003c9e:	e04f      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb0:	f000 f939 	bl	8003f26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cc2:	609a      	str	r2, [r3, #8]
      break;
 8003cc4:	e03c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f000 f8b0 	bl	8003e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2150      	movs	r1, #80	@ 0x50
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f907 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003ce4:	e02c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f000 f8ce 	bl	8003e94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2160      	movs	r1, #96	@ 0x60
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f8f7 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003d04:	e01c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 f890 	bl	8003e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2140      	movs	r1, #64	@ 0x40
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f8e7 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003d24:	e00c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f000 f8de 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003d36:	e003      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e000      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e2c <TIM_Base_SetConfig+0xd0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x30>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x30>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e30 <TIM_Base_SetConfig+0xd4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x30>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	@ (8003e34 <TIM_Base_SetConfig+0xd8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a22      	ldr	r2, [pc, #136]	@ (8003e2c <TIM_Base_SetConfig+0xd0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <TIM_Base_SetConfig+0x62>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d007      	beq.n	8003dbe <TIM_Base_SetConfig+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e30 <TIM_Base_SetConfig+0xd4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_Base_SetConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e34 <TIM_Base_SetConfig+0xd8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d108      	bne.n	8003dd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0d      	ldr	r2, [pc, #52]	@ (8003e2c <TIM_Base_SetConfig+0xd0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d103      	bne.n	8003e04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f023 0201 	bic.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	611a      	str	r2, [r3, #16]
  }
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800

08003e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0201 	bic.w	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 030a 	bic.w	r3, r3, #10
 8003e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0210 	bic.w	r2, r3, #16
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	031b      	lsls	r3, r3, #12
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f043 0307 	orr.w	r3, r3, #7
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	021a      	lsls	r2, r3, #8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e046      	b.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a16      	ldr	r2, [pc, #88]	@ (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc8:	d009      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a10      	ldr	r2, [pc, #64]	@ (800401c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800

08004020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e042      	b.n	80040b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fec8 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	@ 0x24
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f971 	bl	800434c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	@ 0x28
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d175      	bne.n	80041cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Transmit+0x2c>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e06e      	b.n	80041ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2221      	movs	r2, #33	@ 0x21
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040fe:	f7fe f82b 	bl	8002158 <HAL_GetTick>
 8004102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004118:	d108      	bne.n	800412c <HAL_UART_Transmit+0x6c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d104      	bne.n	800412c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	e003      	b.n	8004134 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004134:	e02e      	b.n	8004194 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2200      	movs	r2, #0
 800413e:	2180      	movs	r1, #128	@ 0x80
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f848 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e03a      	b.n	80041ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	3302      	adds	r3, #2
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	e007      	b.n	8004186 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	3301      	adds	r3, #1
 8004184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1cb      	bne.n	8004136 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2140      	movs	r1, #64	@ 0x40
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f814 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e006      	b.n	80041ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	e03b      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d037      	beq.n	8004260 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fd ffb2 	bl	8002158 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	6a3a      	ldr	r2, [r7, #32]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <UART_WaitOnFlagUntilTimeout+0x30>
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e03a      	b.n	8004280 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d023      	beq.n	8004260 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b80      	cmp	r3, #128	@ 0x80
 800421c:	d020      	beq.n	8004260 <UART_WaitOnFlagUntilTimeout+0x8a>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b40      	cmp	r3, #64	@ 0x40
 8004222:	d01d      	beq.n	8004260 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b08      	cmp	r3, #8
 8004230:	d116      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f81d 	bl	8004288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2208      	movs	r2, #8
 8004252:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e00f      	b.n	8004280 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	429a      	cmp	r2, r3
 800427c:	d0b4      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b095      	sub	sp, #84	@ 0x54
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80042b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d119      	bne.n	8004334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f023 0310 	bic.w	r3, r3, #16
 8004316:	647b      	str	r3, [r7, #68]	@ 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004320:	61ba      	str	r2, [r7, #24]
 8004322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6979      	ldr	r1, [r7, #20]
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	613b      	str	r3, [r7, #16]
   return(result);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004342:	bf00      	nop
 8004344:	3754      	adds	r7, #84	@ 0x54
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004386:	f023 030c 	bic.w	r3, r3, #12
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	430b      	orrs	r3, r1
 8004392:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004460 <UART_SetConfig+0x114>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d103      	bne.n	80043bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043b4:	f7ff fb3e 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	e002      	b.n	80043c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7ff fb26 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 80043c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	4a22      	ldr	r2, [pc, #136]	@ (8004464 <UART_SetConfig+0x118>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	0119      	lsls	r1, r3, #4
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004464 <UART_SetConfig+0x118>)
 80043fa:	fba3 0302 	umull	r0, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2064      	movs	r0, #100	@ 0x64
 8004402:	fb00 f303 	mul.w	r3, r0, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	3332      	adds	r3, #50	@ 0x32
 800440c:	4a15      	ldr	r2, [pc, #84]	@ (8004464 <UART_SetConfig+0x118>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004418:	4419      	add	r1, r3
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009a      	lsls	r2, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <UART_SetConfig+0x118>)
 8004432:	fba3 0302 	umull	r0, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2064      	movs	r0, #100	@ 0x64
 800443a:	fb00 f303 	mul.w	r3, r0, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	3332      	adds	r3, #50	@ 0x32
 8004444:	4a07      	ldr	r2, [pc, #28]	@ (8004464 <UART_SetConfig+0x118>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	f003 020f 	and.w	r2, r3, #15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	440a      	add	r2, r1
 8004456:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40013800 	.word	0x40013800
 8004464:	51eb851f 	.word	0x51eb851f

08004468 <__cvt>:
 8004468:	2b00      	cmp	r3, #0
 800446a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800446e:	461d      	mov	r5, r3
 8004470:	bfbb      	ittet	lt
 8004472:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004476:	461d      	movlt	r5, r3
 8004478:	2300      	movge	r3, #0
 800447a:	232d      	movlt	r3, #45	@ 0x2d
 800447c:	b088      	sub	sp, #32
 800447e:	4614      	mov	r4, r2
 8004480:	bfb8      	it	lt
 8004482:	4614      	movlt	r4, r2
 8004484:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004486:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004488:	7013      	strb	r3, [r2, #0]
 800448a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800448c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004490:	f023 0820 	bic.w	r8, r3, #32
 8004494:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004498:	d005      	beq.n	80044a6 <__cvt+0x3e>
 800449a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800449e:	d100      	bne.n	80044a2 <__cvt+0x3a>
 80044a0:	3601      	adds	r6, #1
 80044a2:	2302      	movs	r3, #2
 80044a4:	e000      	b.n	80044a8 <__cvt+0x40>
 80044a6:	2303      	movs	r3, #3
 80044a8:	aa07      	add	r2, sp, #28
 80044aa:	9204      	str	r2, [sp, #16]
 80044ac:	aa06      	add	r2, sp, #24
 80044ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80044b2:	e9cd 3600 	strd	r3, r6, [sp]
 80044b6:	4622      	mov	r2, r4
 80044b8:	462b      	mov	r3, r5
 80044ba:	f000 fe6d 	bl	8005198 <_dtoa_r>
 80044be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80044c2:	4607      	mov	r7, r0
 80044c4:	d119      	bne.n	80044fa <__cvt+0x92>
 80044c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80044c8:	07db      	lsls	r3, r3, #31
 80044ca:	d50e      	bpl.n	80044ea <__cvt+0x82>
 80044cc:	eb00 0906 	add.w	r9, r0, r6
 80044d0:	2200      	movs	r2, #0
 80044d2:	2300      	movs	r3, #0
 80044d4:	4620      	mov	r0, r4
 80044d6:	4629      	mov	r1, r5
 80044d8:	f7fc fa66 	bl	80009a8 <__aeabi_dcmpeq>
 80044dc:	b108      	cbz	r0, 80044e2 <__cvt+0x7a>
 80044de:	f8cd 901c 	str.w	r9, [sp, #28]
 80044e2:	2230      	movs	r2, #48	@ 0x30
 80044e4:	9b07      	ldr	r3, [sp, #28]
 80044e6:	454b      	cmp	r3, r9
 80044e8:	d31e      	bcc.n	8004528 <__cvt+0xc0>
 80044ea:	4638      	mov	r0, r7
 80044ec:	9b07      	ldr	r3, [sp, #28]
 80044ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80044f0:	1bdb      	subs	r3, r3, r7
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	b008      	add	sp, #32
 80044f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80044fe:	eb00 0906 	add.w	r9, r0, r6
 8004502:	d1e5      	bne.n	80044d0 <__cvt+0x68>
 8004504:	7803      	ldrb	r3, [r0, #0]
 8004506:	2b30      	cmp	r3, #48	@ 0x30
 8004508:	d10a      	bne.n	8004520 <__cvt+0xb8>
 800450a:	2200      	movs	r2, #0
 800450c:	2300      	movs	r3, #0
 800450e:	4620      	mov	r0, r4
 8004510:	4629      	mov	r1, r5
 8004512:	f7fc fa49 	bl	80009a8 <__aeabi_dcmpeq>
 8004516:	b918      	cbnz	r0, 8004520 <__cvt+0xb8>
 8004518:	f1c6 0601 	rsb	r6, r6, #1
 800451c:	f8ca 6000 	str.w	r6, [sl]
 8004520:	f8da 3000 	ldr.w	r3, [sl]
 8004524:	4499      	add	r9, r3
 8004526:	e7d3      	b.n	80044d0 <__cvt+0x68>
 8004528:	1c59      	adds	r1, r3, #1
 800452a:	9107      	str	r1, [sp, #28]
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	e7d9      	b.n	80044e4 <__cvt+0x7c>

08004530 <__exponent>:
 8004530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004532:	2900      	cmp	r1, #0
 8004534:	bfb6      	itet	lt
 8004536:	232d      	movlt	r3, #45	@ 0x2d
 8004538:	232b      	movge	r3, #43	@ 0x2b
 800453a:	4249      	neglt	r1, r1
 800453c:	2909      	cmp	r1, #9
 800453e:	7002      	strb	r2, [r0, #0]
 8004540:	7043      	strb	r3, [r0, #1]
 8004542:	dd29      	ble.n	8004598 <__exponent+0x68>
 8004544:	f10d 0307 	add.w	r3, sp, #7
 8004548:	461d      	mov	r5, r3
 800454a:	270a      	movs	r7, #10
 800454c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004550:	461a      	mov	r2, r3
 8004552:	fb07 1416 	mls	r4, r7, r6, r1
 8004556:	3430      	adds	r4, #48	@ 0x30
 8004558:	f802 4c01 	strb.w	r4, [r2, #-1]
 800455c:	460c      	mov	r4, r1
 800455e:	2c63      	cmp	r4, #99	@ 0x63
 8004560:	4631      	mov	r1, r6
 8004562:	f103 33ff 	add.w	r3, r3, #4294967295
 8004566:	dcf1      	bgt.n	800454c <__exponent+0x1c>
 8004568:	3130      	adds	r1, #48	@ 0x30
 800456a:	1e94      	subs	r4, r2, #2
 800456c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004570:	4623      	mov	r3, r4
 8004572:	1c41      	adds	r1, r0, #1
 8004574:	42ab      	cmp	r3, r5
 8004576:	d30a      	bcc.n	800458e <__exponent+0x5e>
 8004578:	f10d 0309 	add.w	r3, sp, #9
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	42ac      	cmp	r4, r5
 8004580:	bf88      	it	hi
 8004582:	2300      	movhi	r3, #0
 8004584:	3302      	adds	r3, #2
 8004586:	4403      	add	r3, r0
 8004588:	1a18      	subs	r0, r3, r0
 800458a:	b003      	add	sp, #12
 800458c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800458e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004592:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004596:	e7ed      	b.n	8004574 <__exponent+0x44>
 8004598:	2330      	movs	r3, #48	@ 0x30
 800459a:	3130      	adds	r1, #48	@ 0x30
 800459c:	7083      	strb	r3, [r0, #2]
 800459e:	70c1      	strb	r1, [r0, #3]
 80045a0:	1d03      	adds	r3, r0, #4
 80045a2:	e7f1      	b.n	8004588 <__exponent+0x58>

080045a4 <_printf_float>:
 80045a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a8:	b091      	sub	sp, #68	@ 0x44
 80045aa:	460c      	mov	r4, r1
 80045ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80045b0:	4616      	mov	r6, r2
 80045b2:	461f      	mov	r7, r3
 80045b4:	4605      	mov	r5, r0
 80045b6:	f000 fce1 	bl	8004f7c <_localeconv_r>
 80045ba:	6803      	ldr	r3, [r0, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	9308      	str	r3, [sp, #32]
 80045c0:	f7fb fdc6 	bl	8000150 <strlen>
 80045c4:	2300      	movs	r3, #0
 80045c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80045c8:	f8d8 3000 	ldr.w	r3, [r8]
 80045cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80045ce:	3307      	adds	r3, #7
 80045d0:	f023 0307 	bic.w	r3, r3, #7
 80045d4:	f103 0208 	add.w	r2, r3, #8
 80045d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045dc:	f8d4 b000 	ldr.w	fp, [r4]
 80045e0:	f8c8 2000 	str.w	r2, [r8]
 80045e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80045ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045ee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80045f2:	f04f 32ff 	mov.w	r2, #4294967295
 80045f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80045fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80045fe:	4b9c      	ldr	r3, [pc, #624]	@ (8004870 <_printf_float+0x2cc>)
 8004600:	f7fc fa04 	bl	8000a0c <__aeabi_dcmpun>
 8004604:	bb70      	cbnz	r0, 8004664 <_printf_float+0xc0>
 8004606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800460a:	f04f 32ff 	mov.w	r2, #4294967295
 800460e:	4b98      	ldr	r3, [pc, #608]	@ (8004870 <_printf_float+0x2cc>)
 8004610:	f7fc f9de 	bl	80009d0 <__aeabi_dcmple>
 8004614:	bb30      	cbnz	r0, 8004664 <_printf_float+0xc0>
 8004616:	2200      	movs	r2, #0
 8004618:	2300      	movs	r3, #0
 800461a:	4640      	mov	r0, r8
 800461c:	4649      	mov	r1, r9
 800461e:	f7fc f9cd 	bl	80009bc <__aeabi_dcmplt>
 8004622:	b110      	cbz	r0, 800462a <_printf_float+0x86>
 8004624:	232d      	movs	r3, #45	@ 0x2d
 8004626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800462a:	4a92      	ldr	r2, [pc, #584]	@ (8004874 <_printf_float+0x2d0>)
 800462c:	4b92      	ldr	r3, [pc, #584]	@ (8004878 <_printf_float+0x2d4>)
 800462e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004632:	bf8c      	ite	hi
 8004634:	4690      	movhi	r8, r2
 8004636:	4698      	movls	r8, r3
 8004638:	2303      	movs	r3, #3
 800463a:	f04f 0900 	mov.w	r9, #0
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	f02b 0304 	bic.w	r3, fp, #4
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	4633      	mov	r3, r6
 8004648:	4621      	mov	r1, r4
 800464a:	4628      	mov	r0, r5
 800464c:	9700      	str	r7, [sp, #0]
 800464e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004650:	f000 f9d4 	bl	80049fc <_printf_common>
 8004654:	3001      	adds	r0, #1
 8004656:	f040 8090 	bne.w	800477a <_printf_float+0x1d6>
 800465a:	f04f 30ff 	mov.w	r0, #4294967295
 800465e:	b011      	add	sp, #68	@ 0x44
 8004660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	4640      	mov	r0, r8
 800466a:	4649      	mov	r1, r9
 800466c:	f7fc f9ce 	bl	8000a0c <__aeabi_dcmpun>
 8004670:	b148      	cbz	r0, 8004686 <_printf_float+0xe2>
 8004672:	464b      	mov	r3, r9
 8004674:	2b00      	cmp	r3, #0
 8004676:	bfb8      	it	lt
 8004678:	232d      	movlt	r3, #45	@ 0x2d
 800467a:	4a80      	ldr	r2, [pc, #512]	@ (800487c <_printf_float+0x2d8>)
 800467c:	bfb8      	it	lt
 800467e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004682:	4b7f      	ldr	r3, [pc, #508]	@ (8004880 <_printf_float+0x2dc>)
 8004684:	e7d3      	b.n	800462e <_printf_float+0x8a>
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	d13f      	bne.n	8004710 <_printf_float+0x16c>
 8004690:	2306      	movs	r3, #6
 8004692:	6063      	str	r3, [r4, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	9206      	str	r2, [sp, #24]
 800469e:	aa0e      	add	r2, sp, #56	@ 0x38
 80046a0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80046a4:	aa0d      	add	r2, sp, #52	@ 0x34
 80046a6:	9203      	str	r2, [sp, #12]
 80046a8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80046ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	4642      	mov	r2, r8
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	4628      	mov	r0, r5
 80046b8:	464b      	mov	r3, r9
 80046ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80046bc:	f7ff fed4 	bl	8004468 <__cvt>
 80046c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80046c2:	4680      	mov	r8, r0
 80046c4:	2947      	cmp	r1, #71	@ 0x47
 80046c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80046c8:	d128      	bne.n	800471c <_printf_float+0x178>
 80046ca:	1cc8      	adds	r0, r1, #3
 80046cc:	db02      	blt.n	80046d4 <_printf_float+0x130>
 80046ce:	6863      	ldr	r3, [r4, #4]
 80046d0:	4299      	cmp	r1, r3
 80046d2:	dd40      	ble.n	8004756 <_printf_float+0x1b2>
 80046d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80046d8:	fa5f fa8a 	uxtb.w	sl, sl
 80046dc:	4652      	mov	r2, sl
 80046de:	3901      	subs	r1, #1
 80046e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80046e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80046e6:	f7ff ff23 	bl	8004530 <__exponent>
 80046ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046ec:	4681      	mov	r9, r0
 80046ee:	1813      	adds	r3, r2, r0
 80046f0:	2a01      	cmp	r2, #1
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	dc02      	bgt.n	80046fc <_printf_float+0x158>
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	07d2      	lsls	r2, r2, #31
 80046fa:	d501      	bpl.n	8004700 <_printf_float+0x15c>
 80046fc:	3301      	adds	r3, #1
 80046fe:	6123      	str	r3, [r4, #16]
 8004700:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004704:	2b00      	cmp	r3, #0
 8004706:	d09e      	beq.n	8004646 <_printf_float+0xa2>
 8004708:	232d      	movs	r3, #45	@ 0x2d
 800470a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800470e:	e79a      	b.n	8004646 <_printf_float+0xa2>
 8004710:	2947      	cmp	r1, #71	@ 0x47
 8004712:	d1bf      	bne.n	8004694 <_printf_float+0xf0>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1bd      	bne.n	8004694 <_printf_float+0xf0>
 8004718:	2301      	movs	r3, #1
 800471a:	e7ba      	b.n	8004692 <_printf_float+0xee>
 800471c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004720:	d9dc      	bls.n	80046dc <_printf_float+0x138>
 8004722:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004726:	d118      	bne.n	800475a <_printf_float+0x1b6>
 8004728:	2900      	cmp	r1, #0
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	dd0b      	ble.n	8004746 <_printf_float+0x1a2>
 800472e:	6121      	str	r1, [r4, #16]
 8004730:	b913      	cbnz	r3, 8004738 <_printf_float+0x194>
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	07d0      	lsls	r0, r2, #31
 8004736:	d502      	bpl.n	800473e <_printf_float+0x19a>
 8004738:	3301      	adds	r3, #1
 800473a:	440b      	add	r3, r1
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	f04f 0900 	mov.w	r9, #0
 8004742:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004744:	e7dc      	b.n	8004700 <_printf_float+0x15c>
 8004746:	b913      	cbnz	r3, 800474e <_printf_float+0x1aa>
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	07d2      	lsls	r2, r2, #31
 800474c:	d501      	bpl.n	8004752 <_printf_float+0x1ae>
 800474e:	3302      	adds	r3, #2
 8004750:	e7f4      	b.n	800473c <_printf_float+0x198>
 8004752:	2301      	movs	r3, #1
 8004754:	e7f2      	b.n	800473c <_printf_float+0x198>
 8004756:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800475a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800475c:	4299      	cmp	r1, r3
 800475e:	db05      	blt.n	800476c <_printf_float+0x1c8>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	6121      	str	r1, [r4, #16]
 8004764:	07d8      	lsls	r0, r3, #31
 8004766:	d5ea      	bpl.n	800473e <_printf_float+0x19a>
 8004768:	1c4b      	adds	r3, r1, #1
 800476a:	e7e7      	b.n	800473c <_printf_float+0x198>
 800476c:	2900      	cmp	r1, #0
 800476e:	bfcc      	ite	gt
 8004770:	2201      	movgt	r2, #1
 8004772:	f1c1 0202 	rsble	r2, r1, #2
 8004776:	4413      	add	r3, r2
 8004778:	e7e0      	b.n	800473c <_printf_float+0x198>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	055a      	lsls	r2, r3, #21
 800477e:	d407      	bmi.n	8004790 <_printf_float+0x1ec>
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	4642      	mov	r2, r8
 8004784:	4631      	mov	r1, r6
 8004786:	4628      	mov	r0, r5
 8004788:	47b8      	blx	r7
 800478a:	3001      	adds	r0, #1
 800478c:	d12b      	bne.n	80047e6 <_printf_float+0x242>
 800478e:	e764      	b.n	800465a <_printf_float+0xb6>
 8004790:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004794:	f240 80dc 	bls.w	8004950 <_printf_float+0x3ac>
 8004798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800479c:	2200      	movs	r2, #0
 800479e:	2300      	movs	r3, #0
 80047a0:	f7fc f902 	bl	80009a8 <__aeabi_dcmpeq>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d033      	beq.n	8004810 <_printf_float+0x26c>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4631      	mov	r1, r6
 80047ac:	4628      	mov	r0, r5
 80047ae:	4a35      	ldr	r2, [pc, #212]	@ (8004884 <_printf_float+0x2e0>)
 80047b0:	47b8      	blx	r7
 80047b2:	3001      	adds	r0, #1
 80047b4:	f43f af51 	beq.w	800465a <_printf_float+0xb6>
 80047b8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80047bc:	4543      	cmp	r3, r8
 80047be:	db02      	blt.n	80047c6 <_printf_float+0x222>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	07d8      	lsls	r0, r3, #31
 80047c4:	d50f      	bpl.n	80047e6 <_printf_float+0x242>
 80047c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f af42 	beq.w	800465a <_printf_float+0xb6>
 80047d6:	f04f 0900 	mov.w	r9, #0
 80047da:	f108 38ff 	add.w	r8, r8, #4294967295
 80047de:	f104 0a1a 	add.w	sl, r4, #26
 80047e2:	45c8      	cmp	r8, r9
 80047e4:	dc09      	bgt.n	80047fa <_printf_float+0x256>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	079b      	lsls	r3, r3, #30
 80047ea:	f100 8102 	bmi.w	80049f2 <_printf_float+0x44e>
 80047ee:	68e0      	ldr	r0, [r4, #12]
 80047f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80047f2:	4298      	cmp	r0, r3
 80047f4:	bfb8      	it	lt
 80047f6:	4618      	movlt	r0, r3
 80047f8:	e731      	b.n	800465e <_printf_float+0xba>
 80047fa:	2301      	movs	r3, #1
 80047fc:	4652      	mov	r2, sl
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	47b8      	blx	r7
 8004804:	3001      	adds	r0, #1
 8004806:	f43f af28 	beq.w	800465a <_printf_float+0xb6>
 800480a:	f109 0901 	add.w	r9, r9, #1
 800480e:	e7e8      	b.n	80047e2 <_printf_float+0x23e>
 8004810:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004812:	2b00      	cmp	r3, #0
 8004814:	dc38      	bgt.n	8004888 <_printf_float+0x2e4>
 8004816:	2301      	movs	r3, #1
 8004818:	4631      	mov	r1, r6
 800481a:	4628      	mov	r0, r5
 800481c:	4a19      	ldr	r2, [pc, #100]	@ (8004884 <_printf_float+0x2e0>)
 800481e:	47b8      	blx	r7
 8004820:	3001      	adds	r0, #1
 8004822:	f43f af1a 	beq.w	800465a <_printf_float+0xb6>
 8004826:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800482a:	ea59 0303 	orrs.w	r3, r9, r3
 800482e:	d102      	bne.n	8004836 <_printf_float+0x292>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07d9      	lsls	r1, r3, #31
 8004834:	d5d7      	bpl.n	80047e6 <_printf_float+0x242>
 8004836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800483a:	4631      	mov	r1, r6
 800483c:	4628      	mov	r0, r5
 800483e:	47b8      	blx	r7
 8004840:	3001      	adds	r0, #1
 8004842:	f43f af0a 	beq.w	800465a <_printf_float+0xb6>
 8004846:	f04f 0a00 	mov.w	sl, #0
 800484a:	f104 0b1a 	add.w	fp, r4, #26
 800484e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004850:	425b      	negs	r3, r3
 8004852:	4553      	cmp	r3, sl
 8004854:	dc01      	bgt.n	800485a <_printf_float+0x2b6>
 8004856:	464b      	mov	r3, r9
 8004858:	e793      	b.n	8004782 <_printf_float+0x1de>
 800485a:	2301      	movs	r3, #1
 800485c:	465a      	mov	r2, fp
 800485e:	4631      	mov	r1, r6
 8004860:	4628      	mov	r0, r5
 8004862:	47b8      	blx	r7
 8004864:	3001      	adds	r0, #1
 8004866:	f43f aef8 	beq.w	800465a <_printf_float+0xb6>
 800486a:	f10a 0a01 	add.w	sl, sl, #1
 800486e:	e7ee      	b.n	800484e <_printf_float+0x2aa>
 8004870:	7fefffff 	.word	0x7fefffff
 8004874:	08007eea 	.word	0x08007eea
 8004878:	08007ee6 	.word	0x08007ee6
 800487c:	08007ef2 	.word	0x08007ef2
 8004880:	08007eee 	.word	0x08007eee
 8004884:	08007ef6 	.word	0x08007ef6
 8004888:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800488a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800488e:	4553      	cmp	r3, sl
 8004890:	bfa8      	it	ge
 8004892:	4653      	movge	r3, sl
 8004894:	2b00      	cmp	r3, #0
 8004896:	4699      	mov	r9, r3
 8004898:	dc36      	bgt.n	8004908 <_printf_float+0x364>
 800489a:	f04f 0b00 	mov.w	fp, #0
 800489e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048a2:	f104 021a 	add.w	r2, r4, #26
 80048a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80048aa:	eba3 0309 	sub.w	r3, r3, r9
 80048ae:	455b      	cmp	r3, fp
 80048b0:	dc31      	bgt.n	8004916 <_printf_float+0x372>
 80048b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048b4:	459a      	cmp	sl, r3
 80048b6:	dc3a      	bgt.n	800492e <_printf_float+0x38a>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	07da      	lsls	r2, r3, #31
 80048bc:	d437      	bmi.n	800492e <_printf_float+0x38a>
 80048be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048c0:	ebaa 0903 	sub.w	r9, sl, r3
 80048c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048c6:	ebaa 0303 	sub.w	r3, sl, r3
 80048ca:	4599      	cmp	r9, r3
 80048cc:	bfa8      	it	ge
 80048ce:	4699      	movge	r9, r3
 80048d0:	f1b9 0f00 	cmp.w	r9, #0
 80048d4:	dc33      	bgt.n	800493e <_printf_float+0x39a>
 80048d6:	f04f 0800 	mov.w	r8, #0
 80048da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048de:	f104 0b1a 	add.w	fp, r4, #26
 80048e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048e4:	ebaa 0303 	sub.w	r3, sl, r3
 80048e8:	eba3 0309 	sub.w	r3, r3, r9
 80048ec:	4543      	cmp	r3, r8
 80048ee:	f77f af7a 	ble.w	80047e6 <_printf_float+0x242>
 80048f2:	2301      	movs	r3, #1
 80048f4:	465a      	mov	r2, fp
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f aeac 	beq.w	800465a <_printf_float+0xb6>
 8004902:	f108 0801 	add.w	r8, r8, #1
 8004906:	e7ec      	b.n	80048e2 <_printf_float+0x33e>
 8004908:	4642      	mov	r2, r8
 800490a:	4631      	mov	r1, r6
 800490c:	4628      	mov	r0, r5
 800490e:	47b8      	blx	r7
 8004910:	3001      	adds	r0, #1
 8004912:	d1c2      	bne.n	800489a <_printf_float+0x2f6>
 8004914:	e6a1      	b.n	800465a <_printf_float+0xb6>
 8004916:	2301      	movs	r3, #1
 8004918:	4631      	mov	r1, r6
 800491a:	4628      	mov	r0, r5
 800491c:	920a      	str	r2, [sp, #40]	@ 0x28
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	f43f ae9a 	beq.w	800465a <_printf_float+0xb6>
 8004926:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004928:	f10b 0b01 	add.w	fp, fp, #1
 800492c:	e7bb      	b.n	80048a6 <_printf_float+0x302>
 800492e:	4631      	mov	r1, r6
 8004930:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004934:	4628      	mov	r0, r5
 8004936:	47b8      	blx	r7
 8004938:	3001      	adds	r0, #1
 800493a:	d1c0      	bne.n	80048be <_printf_float+0x31a>
 800493c:	e68d      	b.n	800465a <_printf_float+0xb6>
 800493e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004940:	464b      	mov	r3, r9
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	4442      	add	r2, r8
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	d1c3      	bne.n	80048d6 <_printf_float+0x332>
 800494e:	e684      	b.n	800465a <_printf_float+0xb6>
 8004950:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004954:	f1ba 0f01 	cmp.w	sl, #1
 8004958:	dc01      	bgt.n	800495e <_printf_float+0x3ba>
 800495a:	07db      	lsls	r3, r3, #31
 800495c:	d536      	bpl.n	80049cc <_printf_float+0x428>
 800495e:	2301      	movs	r3, #1
 8004960:	4642      	mov	r2, r8
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	47b8      	blx	r7
 8004968:	3001      	adds	r0, #1
 800496a:	f43f ae76 	beq.w	800465a <_printf_float+0xb6>
 800496e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004972:	4631      	mov	r1, r6
 8004974:	4628      	mov	r0, r5
 8004976:	47b8      	blx	r7
 8004978:	3001      	adds	r0, #1
 800497a:	f43f ae6e 	beq.w	800465a <_printf_float+0xb6>
 800497e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004982:	2200      	movs	r2, #0
 8004984:	2300      	movs	r3, #0
 8004986:	f10a 3aff 	add.w	sl, sl, #4294967295
 800498a:	f7fc f80d 	bl	80009a8 <__aeabi_dcmpeq>
 800498e:	b9c0      	cbnz	r0, 80049c2 <_printf_float+0x41e>
 8004990:	4653      	mov	r3, sl
 8004992:	f108 0201 	add.w	r2, r8, #1
 8004996:	4631      	mov	r1, r6
 8004998:	4628      	mov	r0, r5
 800499a:	47b8      	blx	r7
 800499c:	3001      	adds	r0, #1
 800499e:	d10c      	bne.n	80049ba <_printf_float+0x416>
 80049a0:	e65b      	b.n	800465a <_printf_float+0xb6>
 80049a2:	2301      	movs	r3, #1
 80049a4:	465a      	mov	r2, fp
 80049a6:	4631      	mov	r1, r6
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b8      	blx	r7
 80049ac:	3001      	adds	r0, #1
 80049ae:	f43f ae54 	beq.w	800465a <_printf_float+0xb6>
 80049b2:	f108 0801 	add.w	r8, r8, #1
 80049b6:	45d0      	cmp	r8, sl
 80049b8:	dbf3      	blt.n	80049a2 <_printf_float+0x3fe>
 80049ba:	464b      	mov	r3, r9
 80049bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80049c0:	e6e0      	b.n	8004784 <_printf_float+0x1e0>
 80049c2:	f04f 0800 	mov.w	r8, #0
 80049c6:	f104 0b1a 	add.w	fp, r4, #26
 80049ca:	e7f4      	b.n	80049b6 <_printf_float+0x412>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4642      	mov	r2, r8
 80049d0:	e7e1      	b.n	8004996 <_printf_float+0x3f2>
 80049d2:	2301      	movs	r3, #1
 80049d4:	464a      	mov	r2, r9
 80049d6:	4631      	mov	r1, r6
 80049d8:	4628      	mov	r0, r5
 80049da:	47b8      	blx	r7
 80049dc:	3001      	adds	r0, #1
 80049de:	f43f ae3c 	beq.w	800465a <_printf_float+0xb6>
 80049e2:	f108 0801 	add.w	r8, r8, #1
 80049e6:	68e3      	ldr	r3, [r4, #12]
 80049e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80049ea:	1a5b      	subs	r3, r3, r1
 80049ec:	4543      	cmp	r3, r8
 80049ee:	dcf0      	bgt.n	80049d2 <_printf_float+0x42e>
 80049f0:	e6fd      	b.n	80047ee <_printf_float+0x24a>
 80049f2:	f04f 0800 	mov.w	r8, #0
 80049f6:	f104 0919 	add.w	r9, r4, #25
 80049fa:	e7f4      	b.n	80049e6 <_printf_float+0x442>

080049fc <_printf_common>:
 80049fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a00:	4616      	mov	r6, r2
 8004a02:	4698      	mov	r8, r3
 8004a04:	688a      	ldr	r2, [r1, #8]
 8004a06:	690b      	ldr	r3, [r1, #16]
 8004a08:	4607      	mov	r7, r0
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	bfb8      	it	lt
 8004a0e:	4613      	movlt	r3, r2
 8004a10:	6033      	str	r3, [r6, #0]
 8004a12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a16:	460c      	mov	r4, r1
 8004a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a1c:	b10a      	cbz	r2, 8004a22 <_printf_common+0x26>
 8004a1e:	3301      	adds	r3, #1
 8004a20:	6033      	str	r3, [r6, #0]
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	0699      	lsls	r1, r3, #26
 8004a26:	bf42      	ittt	mi
 8004a28:	6833      	ldrmi	r3, [r6, #0]
 8004a2a:	3302      	addmi	r3, #2
 8004a2c:	6033      	strmi	r3, [r6, #0]
 8004a2e:	6825      	ldr	r5, [r4, #0]
 8004a30:	f015 0506 	ands.w	r5, r5, #6
 8004a34:	d106      	bne.n	8004a44 <_printf_common+0x48>
 8004a36:	f104 0a19 	add.w	sl, r4, #25
 8004a3a:	68e3      	ldr	r3, [r4, #12]
 8004a3c:	6832      	ldr	r2, [r6, #0]
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	42ab      	cmp	r3, r5
 8004a42:	dc2b      	bgt.n	8004a9c <_printf_common+0xa0>
 8004a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a48:	6822      	ldr	r2, [r4, #0]
 8004a4a:	3b00      	subs	r3, #0
 8004a4c:	bf18      	it	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	0692      	lsls	r2, r2, #26
 8004a52:	d430      	bmi.n	8004ab6 <_printf_common+0xba>
 8004a54:	4641      	mov	r1, r8
 8004a56:	4638      	mov	r0, r7
 8004a58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a5c:	47c8      	blx	r9
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d023      	beq.n	8004aaa <_printf_common+0xae>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	6922      	ldr	r2, [r4, #16]
 8004a66:	f003 0306 	and.w	r3, r3, #6
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	bf14      	ite	ne
 8004a6e:	2500      	movne	r5, #0
 8004a70:	6833      	ldreq	r3, [r6, #0]
 8004a72:	f04f 0600 	mov.w	r6, #0
 8004a76:	bf08      	it	eq
 8004a78:	68e5      	ldreq	r5, [r4, #12]
 8004a7a:	f104 041a 	add.w	r4, r4, #26
 8004a7e:	bf08      	it	eq
 8004a80:	1aed      	subeq	r5, r5, r3
 8004a82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a86:	bf08      	it	eq
 8004a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	bfc4      	itt	gt
 8004a90:	1a9b      	subgt	r3, r3, r2
 8004a92:	18ed      	addgt	r5, r5, r3
 8004a94:	42b5      	cmp	r5, r6
 8004a96:	d11a      	bne.n	8004ace <_printf_common+0xd2>
 8004a98:	2000      	movs	r0, #0
 8004a9a:	e008      	b.n	8004aae <_printf_common+0xb2>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4652      	mov	r2, sl
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	47c8      	blx	r9
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d103      	bne.n	8004ab2 <_printf_common+0xb6>
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	e7c1      	b.n	8004a3a <_printf_common+0x3e>
 8004ab6:	2030      	movs	r0, #48	@ 0x30
 8004ab8:	18e1      	adds	r1, r4, r3
 8004aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ac4:	4422      	add	r2, r4
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004acc:	e7c2      	b.n	8004a54 <_printf_common+0x58>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	47c8      	blx	r9
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d0e6      	beq.n	8004aaa <_printf_common+0xae>
 8004adc:	3601      	adds	r6, #1
 8004ade:	e7d9      	b.n	8004a94 <_printf_common+0x98>

08004ae0 <_printf_i>:
 8004ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	7e0f      	ldrb	r7, [r1, #24]
 8004ae6:	4691      	mov	r9, r2
 8004ae8:	2f78      	cmp	r7, #120	@ 0x78
 8004aea:	4680      	mov	r8, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	469a      	mov	sl, r3
 8004af0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004af6:	d807      	bhi.n	8004b08 <_printf_i+0x28>
 8004af8:	2f62      	cmp	r7, #98	@ 0x62
 8004afa:	d80a      	bhi.n	8004b12 <_printf_i+0x32>
 8004afc:	2f00      	cmp	r7, #0
 8004afe:	f000 80d1 	beq.w	8004ca4 <_printf_i+0x1c4>
 8004b02:	2f58      	cmp	r7, #88	@ 0x58
 8004b04:	f000 80b8 	beq.w	8004c78 <_printf_i+0x198>
 8004b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b10:	e03a      	b.n	8004b88 <_printf_i+0xa8>
 8004b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b16:	2b15      	cmp	r3, #21
 8004b18:	d8f6      	bhi.n	8004b08 <_printf_i+0x28>
 8004b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004b20 <_printf_i+0x40>)
 8004b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b20:	08004b79 	.word	0x08004b79
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b09 	.word	0x08004b09
 8004b2c:	08004b09 	.word	0x08004b09
 8004b30:	08004b09 	.word	0x08004b09
 8004b34:	08004b09 	.word	0x08004b09
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b09 	.word	0x08004b09
 8004b40:	08004b09 	.word	0x08004b09
 8004b44:	08004b09 	.word	0x08004b09
 8004b48:	08004b09 	.word	0x08004b09
 8004b4c:	08004c8b 	.word	0x08004c8b
 8004b50:	08004bb7 	.word	0x08004bb7
 8004b54:	08004c45 	.word	0x08004c45
 8004b58:	08004b09 	.word	0x08004b09
 8004b5c:	08004b09 	.word	0x08004b09
 8004b60:	08004cad 	.word	0x08004cad
 8004b64:	08004b09 	.word	0x08004b09
 8004b68:	08004bb7 	.word	0x08004bb7
 8004b6c:	08004b09 	.word	0x08004b09
 8004b70:	08004b09 	.word	0x08004b09
 8004b74:	08004c4d 	.word	0x08004c4d
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6032      	str	r2, [r6, #0]
 8004b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e09c      	b.n	8004cc6 <_printf_i+0x1e6>
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	1d19      	adds	r1, r3, #4
 8004b92:	6031      	str	r1, [r6, #0]
 8004b94:	0606      	lsls	r6, r0, #24
 8004b96:	d501      	bpl.n	8004b9c <_printf_i+0xbc>
 8004b98:	681d      	ldr	r5, [r3, #0]
 8004b9a:	e003      	b.n	8004ba4 <_printf_i+0xc4>
 8004b9c:	0645      	lsls	r5, r0, #25
 8004b9e:	d5fb      	bpl.n	8004b98 <_printf_i+0xb8>
 8004ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	da03      	bge.n	8004bb0 <_printf_i+0xd0>
 8004ba8:	232d      	movs	r3, #45	@ 0x2d
 8004baa:	426d      	negs	r5, r5
 8004bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb0:	230a      	movs	r3, #10
 8004bb2:	4858      	ldr	r0, [pc, #352]	@ (8004d14 <_printf_i+0x234>)
 8004bb4:	e011      	b.n	8004bda <_printf_i+0xfa>
 8004bb6:	6821      	ldr	r1, [r4, #0]
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	0608      	lsls	r0, r1, #24
 8004bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bc0:	d402      	bmi.n	8004bc8 <_printf_i+0xe8>
 8004bc2:	0649      	lsls	r1, r1, #25
 8004bc4:	bf48      	it	mi
 8004bc6:	b2ad      	uxthmi	r5, r5
 8004bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bca:	6033      	str	r3, [r6, #0]
 8004bcc:	bf14      	ite	ne
 8004bce:	230a      	movne	r3, #10
 8004bd0:	2308      	moveq	r3, #8
 8004bd2:	4850      	ldr	r0, [pc, #320]	@ (8004d14 <_printf_i+0x234>)
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bda:	6866      	ldr	r6, [r4, #4]
 8004bdc:	2e00      	cmp	r6, #0
 8004bde:	60a6      	str	r6, [r4, #8]
 8004be0:	db05      	blt.n	8004bee <_printf_i+0x10e>
 8004be2:	6821      	ldr	r1, [r4, #0]
 8004be4:	432e      	orrs	r6, r5
 8004be6:	f021 0104 	bic.w	r1, r1, #4
 8004bea:	6021      	str	r1, [r4, #0]
 8004bec:	d04b      	beq.n	8004c86 <_printf_i+0x1a6>
 8004bee:	4616      	mov	r6, r2
 8004bf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bf4:	fb03 5711 	mls	r7, r3, r1, r5
 8004bf8:	5dc7      	ldrb	r7, [r0, r7]
 8004bfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bfe:	462f      	mov	r7, r5
 8004c00:	42bb      	cmp	r3, r7
 8004c02:	460d      	mov	r5, r1
 8004c04:	d9f4      	bls.n	8004bf0 <_printf_i+0x110>
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d10b      	bne.n	8004c22 <_printf_i+0x142>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	07df      	lsls	r7, r3, #31
 8004c0e:	d508      	bpl.n	8004c22 <_printf_i+0x142>
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	6861      	ldr	r1, [r4, #4]
 8004c14:	4299      	cmp	r1, r3
 8004c16:	bfde      	ittt	le
 8004c18:	2330      	movle	r3, #48	@ 0x30
 8004c1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c22:	1b92      	subs	r2, r2, r6
 8004c24:	6122      	str	r2, [r4, #16]
 8004c26:	464b      	mov	r3, r9
 8004c28:	4621      	mov	r1, r4
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	f8cd a000 	str.w	sl, [sp]
 8004c30:	aa03      	add	r2, sp, #12
 8004c32:	f7ff fee3 	bl	80049fc <_printf_common>
 8004c36:	3001      	adds	r0, #1
 8004c38:	d14a      	bne.n	8004cd0 <_printf_i+0x1f0>
 8004c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3e:	b004      	add	sp, #16
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	f043 0320 	orr.w	r3, r3, #32
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	2778      	movs	r7, #120	@ 0x78
 8004c4e:	4832      	ldr	r0, [pc, #200]	@ (8004d18 <_printf_i+0x238>)
 8004c50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	061f      	lsls	r7, r3, #24
 8004c5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c5e:	d402      	bmi.n	8004c66 <_printf_i+0x186>
 8004c60:	065f      	lsls	r7, r3, #25
 8004c62:	bf48      	it	mi
 8004c64:	b2ad      	uxthmi	r5, r5
 8004c66:	6031      	str	r1, [r6, #0]
 8004c68:	07d9      	lsls	r1, r3, #31
 8004c6a:	bf44      	itt	mi
 8004c6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c70:	6023      	strmi	r3, [r4, #0]
 8004c72:	b11d      	cbz	r5, 8004c7c <_printf_i+0x19c>
 8004c74:	2310      	movs	r3, #16
 8004c76:	e7ad      	b.n	8004bd4 <_printf_i+0xf4>
 8004c78:	4826      	ldr	r0, [pc, #152]	@ (8004d14 <_printf_i+0x234>)
 8004c7a:	e7e9      	b.n	8004c50 <_printf_i+0x170>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	e7f6      	b.n	8004c74 <_printf_i+0x194>
 8004c86:	4616      	mov	r6, r2
 8004c88:	e7bd      	b.n	8004c06 <_printf_i+0x126>
 8004c8a:	6833      	ldr	r3, [r6, #0]
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	1d18      	adds	r0, r3, #4
 8004c90:	6961      	ldr	r1, [r4, #20]
 8004c92:	6030      	str	r0, [r6, #0]
 8004c94:	062e      	lsls	r6, r5, #24
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	d501      	bpl.n	8004c9e <_printf_i+0x1be>
 8004c9a:	6019      	str	r1, [r3, #0]
 8004c9c:	e002      	b.n	8004ca4 <_printf_i+0x1c4>
 8004c9e:	0668      	lsls	r0, r5, #25
 8004ca0:	d5fb      	bpl.n	8004c9a <_printf_i+0x1ba>
 8004ca2:	8019      	strh	r1, [r3, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4616      	mov	r6, r2
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	e7bc      	b.n	8004c26 <_printf_i+0x146>
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	2100      	movs	r1, #0
 8004cb0:	1d1a      	adds	r2, r3, #4
 8004cb2:	6032      	str	r2, [r6, #0]
 8004cb4:	681e      	ldr	r6, [r3, #0]
 8004cb6:	6862      	ldr	r2, [r4, #4]
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 f9d6 	bl	800506a <memchr>
 8004cbe:	b108      	cbz	r0, 8004cc4 <_printf_i+0x1e4>
 8004cc0:	1b80      	subs	r0, r0, r6
 8004cc2:	6060      	str	r0, [r4, #4]
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cce:	e7aa      	b.n	8004c26 <_printf_i+0x146>
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	4640      	mov	r0, r8
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	47d0      	blx	sl
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d0ad      	beq.n	8004c3a <_printf_i+0x15a>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	079b      	lsls	r3, r3, #30
 8004ce2:	d413      	bmi.n	8004d0c <_printf_i+0x22c>
 8004ce4:	68e0      	ldr	r0, [r4, #12]
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	4298      	cmp	r0, r3
 8004cea:	bfb8      	it	lt
 8004cec:	4618      	movlt	r0, r3
 8004cee:	e7a6      	b.n	8004c3e <_printf_i+0x15e>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	47d0      	blx	sl
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d09d      	beq.n	8004c3a <_printf_i+0x15a>
 8004cfe:	3501      	adds	r5, #1
 8004d00:	68e3      	ldr	r3, [r4, #12]
 8004d02:	9903      	ldr	r1, [sp, #12]
 8004d04:	1a5b      	subs	r3, r3, r1
 8004d06:	42ab      	cmp	r3, r5
 8004d08:	dcf2      	bgt.n	8004cf0 <_printf_i+0x210>
 8004d0a:	e7eb      	b.n	8004ce4 <_printf_i+0x204>
 8004d0c:	2500      	movs	r5, #0
 8004d0e:	f104 0619 	add.w	r6, r4, #25
 8004d12:	e7f5      	b.n	8004d00 <_printf_i+0x220>
 8004d14:	08007ef8 	.word	0x08007ef8
 8004d18:	08007f09 	.word	0x08007f09

08004d1c <std>:
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	4604      	mov	r4, r0
 8004d22:	e9c0 3300 	strd	r3, r3, [r0]
 8004d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d2a:	6083      	str	r3, [r0, #8]
 8004d2c:	8181      	strh	r1, [r0, #12]
 8004d2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d30:	81c2      	strh	r2, [r0, #14]
 8004d32:	6183      	str	r3, [r0, #24]
 8004d34:	4619      	mov	r1, r3
 8004d36:	2208      	movs	r2, #8
 8004d38:	305c      	adds	r0, #92	@ 0x5c
 8004d3a:	f000 f916 	bl	8004f6a <memset>
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <std+0x58>)
 8004d40:	6224      	str	r4, [r4, #32]
 8004d42:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d44:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <std+0x5c>)
 8004d46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d48:	4b0c      	ldr	r3, [pc, #48]	@ (8004d7c <std+0x60>)
 8004d4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <std+0x64>)
 8004d4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d50:	4b0c      	ldr	r3, [pc, #48]	@ (8004d84 <std+0x68>)
 8004d52:	429c      	cmp	r4, r3
 8004d54:	d006      	beq.n	8004d64 <std+0x48>
 8004d56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d5a:	4294      	cmp	r4, r2
 8004d5c:	d002      	beq.n	8004d64 <std+0x48>
 8004d5e:	33d0      	adds	r3, #208	@ 0xd0
 8004d60:	429c      	cmp	r4, r3
 8004d62:	d105      	bne.n	8004d70 <std+0x54>
 8004d64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6c:	f000 b97a 	b.w	8005064 <__retarget_lock_init_recursive>
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	bf00      	nop
 8004d74:	08004ee5 	.word	0x08004ee5
 8004d78:	08004f07 	.word	0x08004f07
 8004d7c:	08004f3f 	.word	0x08004f3f
 8004d80:	08004f63 	.word	0x08004f63
 8004d84:	2000071c 	.word	0x2000071c

08004d88 <stdio_exit_handler>:
 8004d88:	4a02      	ldr	r2, [pc, #8]	@ (8004d94 <stdio_exit_handler+0xc>)
 8004d8a:	4903      	ldr	r1, [pc, #12]	@ (8004d98 <stdio_exit_handler+0x10>)
 8004d8c:	4803      	ldr	r0, [pc, #12]	@ (8004d9c <stdio_exit_handler+0x14>)
 8004d8e:	f000 b869 	b.w	8004e64 <_fwalk_sglue>
 8004d92:	bf00      	nop
 8004d94:	20000014 	.word	0x20000014
 8004d98:	080069e1 	.word	0x080069e1
 8004d9c:	20000024 	.word	0x20000024

08004da0 <cleanup_stdio>:
 8004da0:	6841      	ldr	r1, [r0, #4]
 8004da2:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd4 <cleanup_stdio+0x34>)
 8004da4:	b510      	push	{r4, lr}
 8004da6:	4299      	cmp	r1, r3
 8004da8:	4604      	mov	r4, r0
 8004daa:	d001      	beq.n	8004db0 <cleanup_stdio+0x10>
 8004dac:	f001 fe18 	bl	80069e0 <_fflush_r>
 8004db0:	68a1      	ldr	r1, [r4, #8]
 8004db2:	4b09      	ldr	r3, [pc, #36]	@ (8004dd8 <cleanup_stdio+0x38>)
 8004db4:	4299      	cmp	r1, r3
 8004db6:	d002      	beq.n	8004dbe <cleanup_stdio+0x1e>
 8004db8:	4620      	mov	r0, r4
 8004dba:	f001 fe11 	bl	80069e0 <_fflush_r>
 8004dbe:	68e1      	ldr	r1, [r4, #12]
 8004dc0:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <cleanup_stdio+0x3c>)
 8004dc2:	4299      	cmp	r1, r3
 8004dc4:	d004      	beq.n	8004dd0 <cleanup_stdio+0x30>
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dcc:	f001 be08 	b.w	80069e0 <_fflush_r>
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000071c 	.word	0x2000071c
 8004dd8:	20000784 	.word	0x20000784
 8004ddc:	200007ec 	.word	0x200007ec

08004de0 <global_stdio_init.part.0>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <global_stdio_init.part.0+0x30>)
 8004de4:	4c0b      	ldr	r4, [pc, #44]	@ (8004e14 <global_stdio_init.part.0+0x34>)
 8004de6:	4a0c      	ldr	r2, [pc, #48]	@ (8004e18 <global_stdio_init.part.0+0x38>)
 8004de8:	4620      	mov	r0, r4
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	2104      	movs	r1, #4
 8004dee:	2200      	movs	r2, #0
 8004df0:	f7ff ff94 	bl	8004d1c <std>
 8004df4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004df8:	2201      	movs	r2, #1
 8004dfa:	2109      	movs	r1, #9
 8004dfc:	f7ff ff8e 	bl	8004d1c <std>
 8004e00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e04:	2202      	movs	r2, #2
 8004e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0a:	2112      	movs	r1, #18
 8004e0c:	f7ff bf86 	b.w	8004d1c <std>
 8004e10:	20000854 	.word	0x20000854
 8004e14:	2000071c 	.word	0x2000071c
 8004e18:	08004d89 	.word	0x08004d89

08004e1c <__sfp_lock_acquire>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	@ (8004e24 <__sfp_lock_acquire+0x8>)
 8004e1e:	f000 b922 	b.w	8005066 <__retarget_lock_acquire_recursive>
 8004e22:	bf00      	nop
 8004e24:	2000085d 	.word	0x2000085d

08004e28 <__sfp_lock_release>:
 8004e28:	4801      	ldr	r0, [pc, #4]	@ (8004e30 <__sfp_lock_release+0x8>)
 8004e2a:	f000 b91d 	b.w	8005068 <__retarget_lock_release_recursive>
 8004e2e:	bf00      	nop
 8004e30:	2000085d 	.word	0x2000085d

08004e34 <__sinit>:
 8004e34:	b510      	push	{r4, lr}
 8004e36:	4604      	mov	r4, r0
 8004e38:	f7ff fff0 	bl	8004e1c <__sfp_lock_acquire>
 8004e3c:	6a23      	ldr	r3, [r4, #32]
 8004e3e:	b11b      	cbz	r3, 8004e48 <__sinit+0x14>
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f7ff bff0 	b.w	8004e28 <__sfp_lock_release>
 8004e48:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <__sinit+0x28>)
 8004e4a:	6223      	str	r3, [r4, #32]
 8004e4c:	4b04      	ldr	r3, [pc, #16]	@ (8004e60 <__sinit+0x2c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f5      	bne.n	8004e40 <__sinit+0xc>
 8004e54:	f7ff ffc4 	bl	8004de0 <global_stdio_init.part.0>
 8004e58:	e7f2      	b.n	8004e40 <__sinit+0xc>
 8004e5a:	bf00      	nop
 8004e5c:	08004da1 	.word	0x08004da1
 8004e60:	20000854 	.word	0x20000854

08004e64 <_fwalk_sglue>:
 8004e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e68:	4607      	mov	r7, r0
 8004e6a:	4688      	mov	r8, r1
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	2600      	movs	r6, #0
 8004e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e74:	f1b9 0901 	subs.w	r9, r9, #1
 8004e78:	d505      	bpl.n	8004e86 <_fwalk_sglue+0x22>
 8004e7a:	6824      	ldr	r4, [r4, #0]
 8004e7c:	2c00      	cmp	r4, #0
 8004e7e:	d1f7      	bne.n	8004e70 <_fwalk_sglue+0xc>
 8004e80:	4630      	mov	r0, r6
 8004e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d907      	bls.n	8004e9c <_fwalk_sglue+0x38>
 8004e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e90:	3301      	adds	r3, #1
 8004e92:	d003      	beq.n	8004e9c <_fwalk_sglue+0x38>
 8004e94:	4629      	mov	r1, r5
 8004e96:	4638      	mov	r0, r7
 8004e98:	47c0      	blx	r8
 8004e9a:	4306      	orrs	r6, r0
 8004e9c:	3568      	adds	r5, #104	@ 0x68
 8004e9e:	e7e9      	b.n	8004e74 <_fwalk_sglue+0x10>

08004ea0 <siprintf>:
 8004ea0:	b40e      	push	{r1, r2, r3}
 8004ea2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ea6:	b510      	push	{r4, lr}
 8004ea8:	2400      	movs	r4, #0
 8004eaa:	b09d      	sub	sp, #116	@ 0x74
 8004eac:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004eae:	9002      	str	r0, [sp, #8]
 8004eb0:	9006      	str	r0, [sp, #24]
 8004eb2:	9107      	str	r1, [sp, #28]
 8004eb4:	9104      	str	r1, [sp, #16]
 8004eb6:	4809      	ldr	r0, [pc, #36]	@ (8004edc <siprintf+0x3c>)
 8004eb8:	4909      	ldr	r1, [pc, #36]	@ (8004ee0 <siprintf+0x40>)
 8004eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ebe:	9105      	str	r1, [sp, #20]
 8004ec0:	6800      	ldr	r0, [r0, #0]
 8004ec2:	a902      	add	r1, sp, #8
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004ec8:	f001 fc0e 	bl	80066e8 <_svfiprintf_r>
 8004ecc:	9b02      	ldr	r3, [sp, #8]
 8004ece:	701c      	strb	r4, [r3, #0]
 8004ed0:	b01d      	add	sp, #116	@ 0x74
 8004ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed6:	b003      	add	sp, #12
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000020 	.word	0x20000020
 8004ee0:	ffff0208 	.word	0xffff0208

08004ee4 <__sread>:
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eec:	f000 f86c 	bl	8004fc8 <_read_r>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	bfab      	itete	ge
 8004ef4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ef8:	181b      	addge	r3, r3, r0
 8004efa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004efe:	bfac      	ite	ge
 8004f00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f02:	81a3      	strhlt	r3, [r4, #12]
 8004f04:	bd10      	pop	{r4, pc}

08004f06 <__swrite>:
 8004f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0a:	461f      	mov	r7, r3
 8004f0c:	898b      	ldrh	r3, [r1, #12]
 8004f0e:	4605      	mov	r5, r0
 8004f10:	05db      	lsls	r3, r3, #23
 8004f12:	460c      	mov	r4, r1
 8004f14:	4616      	mov	r6, r2
 8004f16:	d505      	bpl.n	8004f24 <__swrite+0x1e>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f20:	f000 f840 	bl	8004fa4 <_lseek_r>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	4632      	mov	r2, r6
 8004f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	4628      	mov	r0, r5
 8004f30:	463b      	mov	r3, r7
 8004f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3a:	f000 b857 	b.w	8004fec <_write_r>

08004f3e <__sseek>:
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	460c      	mov	r4, r1
 8004f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f46:	f000 f82d 	bl	8004fa4 <_lseek_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	bf15      	itete	ne
 8004f50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f5a:	81a3      	strheq	r3, [r4, #12]
 8004f5c:	bf18      	it	ne
 8004f5e:	81a3      	strhne	r3, [r4, #12]
 8004f60:	bd10      	pop	{r4, pc}

08004f62 <__sclose>:
 8004f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f66:	f000 b80d 	b.w	8004f84 <_close_r>

08004f6a <memset>:
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4402      	add	r2, r0
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d100      	bne.n	8004f74 <memset+0xa>
 8004f72:	4770      	bx	lr
 8004f74:	f803 1b01 	strb.w	r1, [r3], #1
 8004f78:	e7f9      	b.n	8004f6e <memset+0x4>
	...

08004f7c <_localeconv_r>:
 8004f7c:	4800      	ldr	r0, [pc, #0]	@ (8004f80 <_localeconv_r+0x4>)
 8004f7e:	4770      	bx	lr
 8004f80:	20000160 	.word	0x20000160

08004f84 <_close_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	2300      	movs	r3, #0
 8004f88:	4d05      	ldr	r5, [pc, #20]	@ (8004fa0 <_close_r+0x1c>)
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fc fff7 	bl	8001f82 <_close>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_close_r+0x1a>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_close_r+0x1a>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	20000858 	.word	0x20000858

08004fa4 <_lseek_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	2200      	movs	r2, #0
 8004fae:	4d05      	ldr	r5, [pc, #20]	@ (8004fc4 <_lseek_r+0x20>)
 8004fb0:	602a      	str	r2, [r5, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7fd f809 	bl	8001fca <_lseek>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_lseek_r+0x1e>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_lseek_r+0x1e>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20000858 	.word	0x20000858

08004fc8 <_read_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4d05      	ldr	r5, [pc, #20]	@ (8004fe8 <_read_r+0x20>)
 8004fd4:	602a      	str	r2, [r5, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f7fc ff9a 	bl	8001f10 <_read>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_read_r+0x1e>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_read_r+0x1e>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20000858 	.word	0x20000858

08004fec <_write_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4d05      	ldr	r5, [pc, #20]	@ (800500c <_write_r+0x20>)
 8004ff8:	602a      	str	r2, [r5, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f7fc ffa5 	bl	8001f4a <_write>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_write_r+0x1e>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b103      	cbz	r3, 800500a <_write_r+0x1e>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	20000858 	.word	0x20000858

08005010 <__errno>:
 8005010:	4b01      	ldr	r3, [pc, #4]	@ (8005018 <__errno+0x8>)
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000020 	.word	0x20000020

0800501c <__libc_init_array>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	2600      	movs	r6, #0
 8005020:	4d0c      	ldr	r5, [pc, #48]	@ (8005054 <__libc_init_array+0x38>)
 8005022:	4c0d      	ldr	r4, [pc, #52]	@ (8005058 <__libc_init_array+0x3c>)
 8005024:	1b64      	subs	r4, r4, r5
 8005026:	10a4      	asrs	r4, r4, #2
 8005028:	42a6      	cmp	r6, r4
 800502a:	d109      	bne.n	8005040 <__libc_init_array+0x24>
 800502c:	f002 f874 	bl	8007118 <_init>
 8005030:	2600      	movs	r6, #0
 8005032:	4d0a      	ldr	r5, [pc, #40]	@ (800505c <__libc_init_array+0x40>)
 8005034:	4c0a      	ldr	r4, [pc, #40]	@ (8005060 <__libc_init_array+0x44>)
 8005036:	1b64      	subs	r4, r4, r5
 8005038:	10a4      	asrs	r4, r4, #2
 800503a:	42a6      	cmp	r6, r4
 800503c:	d105      	bne.n	800504a <__libc_init_array+0x2e>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	f855 3b04 	ldr.w	r3, [r5], #4
 8005044:	4798      	blx	r3
 8005046:	3601      	adds	r6, #1
 8005048:	e7ee      	b.n	8005028 <__libc_init_array+0xc>
 800504a:	f855 3b04 	ldr.w	r3, [r5], #4
 800504e:	4798      	blx	r3
 8005050:	3601      	adds	r6, #1
 8005052:	e7f2      	b.n	800503a <__libc_init_array+0x1e>
 8005054:	08008264 	.word	0x08008264
 8005058:	08008264 	.word	0x08008264
 800505c:	08008264 	.word	0x08008264
 8005060:	08008268 	.word	0x08008268

08005064 <__retarget_lock_init_recursive>:
 8005064:	4770      	bx	lr

08005066 <__retarget_lock_acquire_recursive>:
 8005066:	4770      	bx	lr

08005068 <__retarget_lock_release_recursive>:
 8005068:	4770      	bx	lr

0800506a <memchr>:
 800506a:	4603      	mov	r3, r0
 800506c:	b510      	push	{r4, lr}
 800506e:	b2c9      	uxtb	r1, r1
 8005070:	4402      	add	r2, r0
 8005072:	4293      	cmp	r3, r2
 8005074:	4618      	mov	r0, r3
 8005076:	d101      	bne.n	800507c <memchr+0x12>
 8005078:	2000      	movs	r0, #0
 800507a:	e003      	b.n	8005084 <memchr+0x1a>
 800507c:	7804      	ldrb	r4, [r0, #0]
 800507e:	3301      	adds	r3, #1
 8005080:	428c      	cmp	r4, r1
 8005082:	d1f6      	bne.n	8005072 <memchr+0x8>
 8005084:	bd10      	pop	{r4, pc}

08005086 <quorem>:
 8005086:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	6903      	ldr	r3, [r0, #16]
 800508c:	690c      	ldr	r4, [r1, #16]
 800508e:	4607      	mov	r7, r0
 8005090:	42a3      	cmp	r3, r4
 8005092:	db7e      	blt.n	8005192 <quorem+0x10c>
 8005094:	3c01      	subs	r4, #1
 8005096:	00a3      	lsls	r3, r4, #2
 8005098:	f100 0514 	add.w	r5, r0, #20
 800509c:	f101 0814 	add.w	r8, r1, #20
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050b0:	3301      	adds	r3, #1
 80050b2:	429a      	cmp	r2, r3
 80050b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80050b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050bc:	d32e      	bcc.n	800511c <quorem+0x96>
 80050be:	f04f 0a00 	mov.w	sl, #0
 80050c2:	46c4      	mov	ip, r8
 80050c4:	46ae      	mov	lr, r5
 80050c6:	46d3      	mov	fp, sl
 80050c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80050cc:	b298      	uxth	r0, r3
 80050ce:	fb06 a000 	mla	r0, r6, r0, sl
 80050d2:	0c1b      	lsrs	r3, r3, #16
 80050d4:	0c02      	lsrs	r2, r0, #16
 80050d6:	fb06 2303 	mla	r3, r6, r3, r2
 80050da:	f8de 2000 	ldr.w	r2, [lr]
 80050de:	b280      	uxth	r0, r0
 80050e0:	b292      	uxth	r2, r2
 80050e2:	1a12      	subs	r2, r2, r0
 80050e4:	445a      	add	r2, fp
 80050e6:	f8de 0000 	ldr.w	r0, [lr]
 80050ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80050f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80050f8:	b292      	uxth	r2, r2
 80050fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80050fe:	45e1      	cmp	r9, ip
 8005100:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005104:	f84e 2b04 	str.w	r2, [lr], #4
 8005108:	d2de      	bcs.n	80050c8 <quorem+0x42>
 800510a:	9b00      	ldr	r3, [sp, #0]
 800510c:	58eb      	ldr	r3, [r5, r3]
 800510e:	b92b      	cbnz	r3, 800511c <quorem+0x96>
 8005110:	9b01      	ldr	r3, [sp, #4]
 8005112:	3b04      	subs	r3, #4
 8005114:	429d      	cmp	r5, r3
 8005116:	461a      	mov	r2, r3
 8005118:	d32f      	bcc.n	800517a <quorem+0xf4>
 800511a:	613c      	str	r4, [r7, #16]
 800511c:	4638      	mov	r0, r7
 800511e:	f001 f97f 	bl	8006420 <__mcmp>
 8005122:	2800      	cmp	r0, #0
 8005124:	db25      	blt.n	8005172 <quorem+0xec>
 8005126:	4629      	mov	r1, r5
 8005128:	2000      	movs	r0, #0
 800512a:	f858 2b04 	ldr.w	r2, [r8], #4
 800512e:	f8d1 c000 	ldr.w	ip, [r1]
 8005132:	fa1f fe82 	uxth.w	lr, r2
 8005136:	fa1f f38c 	uxth.w	r3, ip
 800513a:	eba3 030e 	sub.w	r3, r3, lr
 800513e:	4403      	add	r3, r0
 8005140:	0c12      	lsrs	r2, r2, #16
 8005142:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005146:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800514a:	b29b      	uxth	r3, r3
 800514c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005150:	45c1      	cmp	r9, r8
 8005152:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005156:	f841 3b04 	str.w	r3, [r1], #4
 800515a:	d2e6      	bcs.n	800512a <quorem+0xa4>
 800515c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005164:	b922      	cbnz	r2, 8005170 <quorem+0xea>
 8005166:	3b04      	subs	r3, #4
 8005168:	429d      	cmp	r5, r3
 800516a:	461a      	mov	r2, r3
 800516c:	d30b      	bcc.n	8005186 <quorem+0x100>
 800516e:	613c      	str	r4, [r7, #16]
 8005170:	3601      	adds	r6, #1
 8005172:	4630      	mov	r0, r6
 8005174:	b003      	add	sp, #12
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	3b04      	subs	r3, #4
 800517e:	2a00      	cmp	r2, #0
 8005180:	d1cb      	bne.n	800511a <quorem+0x94>
 8005182:	3c01      	subs	r4, #1
 8005184:	e7c6      	b.n	8005114 <quorem+0x8e>
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	3b04      	subs	r3, #4
 800518a:	2a00      	cmp	r2, #0
 800518c:	d1ef      	bne.n	800516e <quorem+0xe8>
 800518e:	3c01      	subs	r4, #1
 8005190:	e7ea      	b.n	8005168 <quorem+0xe2>
 8005192:	2000      	movs	r0, #0
 8005194:	e7ee      	b.n	8005174 <quorem+0xee>
	...

08005198 <_dtoa_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	4614      	mov	r4, r2
 800519e:	461d      	mov	r5, r3
 80051a0:	69c7      	ldr	r7, [r0, #28]
 80051a2:	b097      	sub	sp, #92	@ 0x5c
 80051a4:	4681      	mov	r9, r0
 80051a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80051aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80051ac:	b97f      	cbnz	r7, 80051ce <_dtoa_r+0x36>
 80051ae:	2010      	movs	r0, #16
 80051b0:	f000 fe0e 	bl	8005dd0 <malloc>
 80051b4:	4602      	mov	r2, r0
 80051b6:	f8c9 001c 	str.w	r0, [r9, #28]
 80051ba:	b920      	cbnz	r0, 80051c6 <_dtoa_r+0x2e>
 80051bc:	21ef      	movs	r1, #239	@ 0xef
 80051be:	4bac      	ldr	r3, [pc, #688]	@ (8005470 <_dtoa_r+0x2d8>)
 80051c0:	48ac      	ldr	r0, [pc, #688]	@ (8005474 <_dtoa_r+0x2dc>)
 80051c2:	f001 fc6d 	bl	8006aa0 <__assert_func>
 80051c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80051ca:	6007      	str	r7, [r0, #0]
 80051cc:	60c7      	str	r7, [r0, #12]
 80051ce:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	b159      	cbz	r1, 80051ee <_dtoa_r+0x56>
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	2301      	movs	r3, #1
 80051da:	4093      	lsls	r3, r2
 80051dc:	604a      	str	r2, [r1, #4]
 80051de:	608b      	str	r3, [r1, #8]
 80051e0:	4648      	mov	r0, r9
 80051e2:	f000 feeb 	bl	8005fbc <_Bfree>
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	1e2b      	subs	r3, r5, #0
 80051f0:	bfaf      	iteee	ge
 80051f2:	2300      	movge	r3, #0
 80051f4:	2201      	movlt	r2, #1
 80051f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80051fa:	9307      	strlt	r3, [sp, #28]
 80051fc:	bfa8      	it	ge
 80051fe:	6033      	strge	r3, [r6, #0]
 8005200:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005204:	4b9c      	ldr	r3, [pc, #624]	@ (8005478 <_dtoa_r+0x2e0>)
 8005206:	bfb8      	it	lt
 8005208:	6032      	strlt	r2, [r6, #0]
 800520a:	ea33 0308 	bics.w	r3, r3, r8
 800520e:	d112      	bne.n	8005236 <_dtoa_r+0x9e>
 8005210:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005214:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800521c:	4323      	orrs	r3, r4
 800521e:	f000 855e 	beq.w	8005cde <_dtoa_r+0xb46>
 8005222:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005224:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800547c <_dtoa_r+0x2e4>
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8560 	beq.w	8005cee <_dtoa_r+0xb56>
 800522e:	f10a 0303 	add.w	r3, sl, #3
 8005232:	f000 bd5a 	b.w	8005cea <_dtoa_r+0xb52>
 8005236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800523a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800523e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005242:	2200      	movs	r2, #0
 8005244:	2300      	movs	r3, #0
 8005246:	f7fb fbaf 	bl	80009a8 <__aeabi_dcmpeq>
 800524a:	4607      	mov	r7, r0
 800524c:	b158      	cbz	r0, 8005266 <_dtoa_r+0xce>
 800524e:	2301      	movs	r3, #1
 8005250:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005256:	b113      	cbz	r3, 800525e <_dtoa_r+0xc6>
 8005258:	4b89      	ldr	r3, [pc, #548]	@ (8005480 <_dtoa_r+0x2e8>)
 800525a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005484 <_dtoa_r+0x2ec>
 8005262:	f000 bd44 	b.w	8005cee <_dtoa_r+0xb56>
 8005266:	ab14      	add	r3, sp, #80	@ 0x50
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	ab15      	add	r3, sp, #84	@ 0x54
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	4648      	mov	r0, r9
 8005270:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005274:	f001 f984 	bl	8006580 <__d2b>
 8005278:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800527c:	9003      	str	r0, [sp, #12]
 800527e:	2e00      	cmp	r6, #0
 8005280:	d078      	beq.n	8005374 <_dtoa_r+0x1dc>
 8005282:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005288:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800528c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005290:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005294:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005298:	9712      	str	r7, [sp, #72]	@ 0x48
 800529a:	4619      	mov	r1, r3
 800529c:	2200      	movs	r2, #0
 800529e:	4b7a      	ldr	r3, [pc, #488]	@ (8005488 <_dtoa_r+0x2f0>)
 80052a0:	f7fa ff62 	bl	8000168 <__aeabi_dsub>
 80052a4:	a36c      	add	r3, pc, #432	@ (adr r3, 8005458 <_dtoa_r+0x2c0>)
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f7fb f915 	bl	80004d8 <__aeabi_dmul>
 80052ae:	a36c      	add	r3, pc, #432	@ (adr r3, 8005460 <_dtoa_r+0x2c8>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fa ff5a 	bl	800016c <__adddf3>
 80052b8:	4604      	mov	r4, r0
 80052ba:	4630      	mov	r0, r6
 80052bc:	460d      	mov	r5, r1
 80052be:	f7fb f8a1 	bl	8000404 <__aeabi_i2d>
 80052c2:	a369      	add	r3, pc, #420	@ (adr r3, 8005468 <_dtoa_r+0x2d0>)
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f7fb f906 	bl	80004d8 <__aeabi_dmul>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4620      	mov	r0, r4
 80052d2:	4629      	mov	r1, r5
 80052d4:	f7fa ff4a 	bl	800016c <__adddf3>
 80052d8:	4604      	mov	r4, r0
 80052da:	460d      	mov	r5, r1
 80052dc:	f7fb fbac 	bl	8000a38 <__aeabi_d2iz>
 80052e0:	2200      	movs	r2, #0
 80052e2:	4607      	mov	r7, r0
 80052e4:	2300      	movs	r3, #0
 80052e6:	4620      	mov	r0, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	f7fb fb67 	bl	80009bc <__aeabi_dcmplt>
 80052ee:	b140      	cbz	r0, 8005302 <_dtoa_r+0x16a>
 80052f0:	4638      	mov	r0, r7
 80052f2:	f7fb f887 	bl	8000404 <__aeabi_i2d>
 80052f6:	4622      	mov	r2, r4
 80052f8:	462b      	mov	r3, r5
 80052fa:	f7fb fb55 	bl	80009a8 <__aeabi_dcmpeq>
 80052fe:	b900      	cbnz	r0, 8005302 <_dtoa_r+0x16a>
 8005300:	3f01      	subs	r7, #1
 8005302:	2f16      	cmp	r7, #22
 8005304:	d854      	bhi.n	80053b0 <_dtoa_r+0x218>
 8005306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800530a:	4b60      	ldr	r3, [pc, #384]	@ (800548c <_dtoa_r+0x2f4>)
 800530c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f7fb fb52 	bl	80009bc <__aeabi_dcmplt>
 8005318:	2800      	cmp	r0, #0
 800531a:	d04b      	beq.n	80053b4 <_dtoa_r+0x21c>
 800531c:	2300      	movs	r3, #0
 800531e:	3f01      	subs	r7, #1
 8005320:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005322:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005324:	1b9b      	subs	r3, r3, r6
 8005326:	1e5a      	subs	r2, r3, #1
 8005328:	bf49      	itett	mi
 800532a:	f1c3 0301 	rsbmi	r3, r3, #1
 800532e:	2300      	movpl	r3, #0
 8005330:	9304      	strmi	r3, [sp, #16]
 8005332:	2300      	movmi	r3, #0
 8005334:	9209      	str	r2, [sp, #36]	@ 0x24
 8005336:	bf54      	ite	pl
 8005338:	9304      	strpl	r3, [sp, #16]
 800533a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800533c:	2f00      	cmp	r7, #0
 800533e:	db3b      	blt.n	80053b8 <_dtoa_r+0x220>
 8005340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005342:	970e      	str	r7, [sp, #56]	@ 0x38
 8005344:	443b      	add	r3, r7
 8005346:	9309      	str	r3, [sp, #36]	@ 0x24
 8005348:	2300      	movs	r3, #0
 800534a:	930a      	str	r3, [sp, #40]	@ 0x28
 800534c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800534e:	2b09      	cmp	r3, #9
 8005350:	d865      	bhi.n	800541e <_dtoa_r+0x286>
 8005352:	2b05      	cmp	r3, #5
 8005354:	bfc4      	itt	gt
 8005356:	3b04      	subgt	r3, #4
 8005358:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800535a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800535c:	bfc8      	it	gt
 800535e:	2400      	movgt	r4, #0
 8005360:	f1a3 0302 	sub.w	r3, r3, #2
 8005364:	bfd8      	it	le
 8005366:	2401      	movle	r4, #1
 8005368:	2b03      	cmp	r3, #3
 800536a:	d864      	bhi.n	8005436 <_dtoa_r+0x29e>
 800536c:	e8df f003 	tbb	[pc, r3]
 8005370:	2c385553 	.word	0x2c385553
 8005374:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005378:	441e      	add	r6, r3
 800537a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800537e:	2b20      	cmp	r3, #32
 8005380:	bfc1      	itttt	gt
 8005382:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005386:	fa08 f803 	lslgt.w	r8, r8, r3
 800538a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800538e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005392:	bfd6      	itet	le
 8005394:	f1c3 0320 	rsble	r3, r3, #32
 8005398:	ea48 0003 	orrgt.w	r0, r8, r3
 800539c:	fa04 f003 	lslle.w	r0, r4, r3
 80053a0:	f7fb f820 	bl	80003e4 <__aeabi_ui2d>
 80053a4:	2201      	movs	r2, #1
 80053a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80053aa:	3e01      	subs	r6, #1
 80053ac:	9212      	str	r2, [sp, #72]	@ 0x48
 80053ae:	e774      	b.n	800529a <_dtoa_r+0x102>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e7b5      	b.n	8005320 <_dtoa_r+0x188>
 80053b4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80053b6:	e7b4      	b.n	8005322 <_dtoa_r+0x18a>
 80053b8:	9b04      	ldr	r3, [sp, #16]
 80053ba:	1bdb      	subs	r3, r3, r7
 80053bc:	9304      	str	r3, [sp, #16]
 80053be:	427b      	negs	r3, r7
 80053c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80053c2:	2300      	movs	r3, #0
 80053c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80053c6:	e7c1      	b.n	800534c <_dtoa_r+0x1b4>
 80053c8:	2301      	movs	r3, #1
 80053ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053ce:	eb07 0b03 	add.w	fp, r7, r3
 80053d2:	f10b 0301 	add.w	r3, fp, #1
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	9308      	str	r3, [sp, #32]
 80053da:	bfb8      	it	lt
 80053dc:	2301      	movlt	r3, #1
 80053de:	e006      	b.n	80053ee <_dtoa_r+0x256>
 80053e0:	2301      	movs	r3, #1
 80053e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	dd28      	ble.n	800543c <_dtoa_r+0x2a4>
 80053ea:	469b      	mov	fp, r3
 80053ec:	9308      	str	r3, [sp, #32]
 80053ee:	2100      	movs	r1, #0
 80053f0:	2204      	movs	r2, #4
 80053f2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80053f6:	f102 0514 	add.w	r5, r2, #20
 80053fa:	429d      	cmp	r5, r3
 80053fc:	d926      	bls.n	800544c <_dtoa_r+0x2b4>
 80053fe:	6041      	str	r1, [r0, #4]
 8005400:	4648      	mov	r0, r9
 8005402:	f000 fd9b 	bl	8005f3c <_Balloc>
 8005406:	4682      	mov	sl, r0
 8005408:	2800      	cmp	r0, #0
 800540a:	d143      	bne.n	8005494 <_dtoa_r+0x2fc>
 800540c:	4602      	mov	r2, r0
 800540e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005412:	4b1f      	ldr	r3, [pc, #124]	@ (8005490 <_dtoa_r+0x2f8>)
 8005414:	e6d4      	b.n	80051c0 <_dtoa_r+0x28>
 8005416:	2300      	movs	r3, #0
 8005418:	e7e3      	b.n	80053e2 <_dtoa_r+0x24a>
 800541a:	2300      	movs	r3, #0
 800541c:	e7d5      	b.n	80053ca <_dtoa_r+0x232>
 800541e:	2401      	movs	r4, #1
 8005420:	2300      	movs	r3, #0
 8005422:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005424:	9320      	str	r3, [sp, #128]	@ 0x80
 8005426:	f04f 3bff 	mov.w	fp, #4294967295
 800542a:	2200      	movs	r2, #0
 800542c:	2312      	movs	r3, #18
 800542e:	f8cd b020 	str.w	fp, [sp, #32]
 8005432:	9221      	str	r2, [sp, #132]	@ 0x84
 8005434:	e7db      	b.n	80053ee <_dtoa_r+0x256>
 8005436:	2301      	movs	r3, #1
 8005438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800543a:	e7f4      	b.n	8005426 <_dtoa_r+0x28e>
 800543c:	f04f 0b01 	mov.w	fp, #1
 8005440:	465b      	mov	r3, fp
 8005442:	f8cd b020 	str.w	fp, [sp, #32]
 8005446:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800544a:	e7d0      	b.n	80053ee <_dtoa_r+0x256>
 800544c:	3101      	adds	r1, #1
 800544e:	0052      	lsls	r2, r2, #1
 8005450:	e7d1      	b.n	80053f6 <_dtoa_r+0x25e>
 8005452:	bf00      	nop
 8005454:	f3af 8000 	nop.w
 8005458:	636f4361 	.word	0x636f4361
 800545c:	3fd287a7 	.word	0x3fd287a7
 8005460:	8b60c8b3 	.word	0x8b60c8b3
 8005464:	3fc68a28 	.word	0x3fc68a28
 8005468:	509f79fb 	.word	0x509f79fb
 800546c:	3fd34413 	.word	0x3fd34413
 8005470:	08007f27 	.word	0x08007f27
 8005474:	08007f3e 	.word	0x08007f3e
 8005478:	7ff00000 	.word	0x7ff00000
 800547c:	08007f23 	.word	0x08007f23
 8005480:	08007ef7 	.word	0x08007ef7
 8005484:	08007ef6 	.word	0x08007ef6
 8005488:	3ff80000 	.word	0x3ff80000
 800548c:	08008090 	.word	0x08008090
 8005490:	08007f96 	.word	0x08007f96
 8005494:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005498:	6018      	str	r0, [r3, #0]
 800549a:	9b08      	ldr	r3, [sp, #32]
 800549c:	2b0e      	cmp	r3, #14
 800549e:	f200 80a1 	bhi.w	80055e4 <_dtoa_r+0x44c>
 80054a2:	2c00      	cmp	r4, #0
 80054a4:	f000 809e 	beq.w	80055e4 <_dtoa_r+0x44c>
 80054a8:	2f00      	cmp	r7, #0
 80054aa:	dd33      	ble.n	8005514 <_dtoa_r+0x37c>
 80054ac:	4b9c      	ldr	r3, [pc, #624]	@ (8005720 <_dtoa_r+0x588>)
 80054ae:	f007 020f 	and.w	r2, r7, #15
 80054b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054b6:	05f8      	lsls	r0, r7, #23
 80054b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80054c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80054c4:	d516      	bpl.n	80054f4 <_dtoa_r+0x35c>
 80054c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054ca:	4b96      	ldr	r3, [pc, #600]	@ (8005724 <_dtoa_r+0x58c>)
 80054cc:	2603      	movs	r6, #3
 80054ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054d2:	f7fb f92b 	bl	800072c <__aeabi_ddiv>
 80054d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054da:	f004 040f 	and.w	r4, r4, #15
 80054de:	4d91      	ldr	r5, [pc, #580]	@ (8005724 <_dtoa_r+0x58c>)
 80054e0:	b954      	cbnz	r4, 80054f8 <_dtoa_r+0x360>
 80054e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ea:	f7fb f91f 	bl	800072c <__aeabi_ddiv>
 80054ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054f2:	e028      	b.n	8005546 <_dtoa_r+0x3ae>
 80054f4:	2602      	movs	r6, #2
 80054f6:	e7f2      	b.n	80054de <_dtoa_r+0x346>
 80054f8:	07e1      	lsls	r1, r4, #31
 80054fa:	d508      	bpl.n	800550e <_dtoa_r+0x376>
 80054fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005500:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005504:	f7fa ffe8 	bl	80004d8 <__aeabi_dmul>
 8005508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800550c:	3601      	adds	r6, #1
 800550e:	1064      	asrs	r4, r4, #1
 8005510:	3508      	adds	r5, #8
 8005512:	e7e5      	b.n	80054e0 <_dtoa_r+0x348>
 8005514:	f000 80af 	beq.w	8005676 <_dtoa_r+0x4de>
 8005518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800551c:	427c      	negs	r4, r7
 800551e:	4b80      	ldr	r3, [pc, #512]	@ (8005720 <_dtoa_r+0x588>)
 8005520:	f004 020f 	and.w	r2, r4, #15
 8005524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa ffd4 	bl	80004d8 <__aeabi_dmul>
 8005530:	2602      	movs	r6, #2
 8005532:	2300      	movs	r3, #0
 8005534:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005538:	4d7a      	ldr	r5, [pc, #488]	@ (8005724 <_dtoa_r+0x58c>)
 800553a:	1124      	asrs	r4, r4, #4
 800553c:	2c00      	cmp	r4, #0
 800553e:	f040 808f 	bne.w	8005660 <_dtoa_r+0x4c8>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1d3      	bne.n	80054ee <_dtoa_r+0x356>
 8005546:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800554a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8094 	beq.w	800567a <_dtoa_r+0x4e2>
 8005552:	2200      	movs	r2, #0
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	4b73      	ldr	r3, [pc, #460]	@ (8005728 <_dtoa_r+0x590>)
 800555a:	f7fb fa2f 	bl	80009bc <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	f000 808b 	beq.w	800567a <_dtoa_r+0x4e2>
 8005564:	9b08      	ldr	r3, [sp, #32]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8087 	beq.w	800567a <_dtoa_r+0x4e2>
 800556c:	f1bb 0f00 	cmp.w	fp, #0
 8005570:	dd34      	ble.n	80055dc <_dtoa_r+0x444>
 8005572:	4620      	mov	r0, r4
 8005574:	2200      	movs	r2, #0
 8005576:	4629      	mov	r1, r5
 8005578:	4b6c      	ldr	r3, [pc, #432]	@ (800572c <_dtoa_r+0x594>)
 800557a:	f7fa ffad 	bl	80004d8 <__aeabi_dmul>
 800557e:	465c      	mov	r4, fp
 8005580:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005584:	f107 38ff 	add.w	r8, r7, #4294967295
 8005588:	3601      	adds	r6, #1
 800558a:	4630      	mov	r0, r6
 800558c:	f7fa ff3a 	bl	8000404 <__aeabi_i2d>
 8005590:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	2200      	movs	r2, #0
 800559a:	4b65      	ldr	r3, [pc, #404]	@ (8005730 <_dtoa_r+0x598>)
 800559c:	f7fa fde6 	bl	800016c <__adddf3>
 80055a0:	4605      	mov	r5, r0
 80055a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80055a6:	2c00      	cmp	r4, #0
 80055a8:	d16a      	bne.n	8005680 <_dtoa_r+0x4e8>
 80055aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ae:	2200      	movs	r2, #0
 80055b0:	4b60      	ldr	r3, [pc, #384]	@ (8005734 <_dtoa_r+0x59c>)
 80055b2:	f7fa fdd9 	bl	8000168 <__aeabi_dsub>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055be:	462a      	mov	r2, r5
 80055c0:	4633      	mov	r3, r6
 80055c2:	f7fb fa19 	bl	80009f8 <__aeabi_dcmpgt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f040 8298 	bne.w	8005afc <_dtoa_r+0x964>
 80055cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d0:	462a      	mov	r2, r5
 80055d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80055d6:	f7fb f9f1 	bl	80009bc <__aeabi_dcmplt>
 80055da:	bb38      	cbnz	r0, 800562c <_dtoa_r+0x494>
 80055dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80055e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f2c0 8157 	blt.w	800589a <_dtoa_r+0x702>
 80055ec:	2f0e      	cmp	r7, #14
 80055ee:	f300 8154 	bgt.w	800589a <_dtoa_r+0x702>
 80055f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005720 <_dtoa_r+0x588>)
 80055f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005600:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005602:	2b00      	cmp	r3, #0
 8005604:	f280 80e5 	bge.w	80057d2 <_dtoa_r+0x63a>
 8005608:	9b08      	ldr	r3, [sp, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f300 80e1 	bgt.w	80057d2 <_dtoa_r+0x63a>
 8005610:	d10c      	bne.n	800562c <_dtoa_r+0x494>
 8005612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005616:	2200      	movs	r2, #0
 8005618:	4b46      	ldr	r3, [pc, #280]	@ (8005734 <_dtoa_r+0x59c>)
 800561a:	f7fa ff5d 	bl	80004d8 <__aeabi_dmul>
 800561e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005622:	f7fb f9df 	bl	80009e4 <__aeabi_dcmpge>
 8005626:	2800      	cmp	r0, #0
 8005628:	f000 8266 	beq.w	8005af8 <_dtoa_r+0x960>
 800562c:	2400      	movs	r4, #0
 800562e:	4625      	mov	r5, r4
 8005630:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005632:	4656      	mov	r6, sl
 8005634:	ea6f 0803 	mvn.w	r8, r3
 8005638:	2700      	movs	r7, #0
 800563a:	4621      	mov	r1, r4
 800563c:	4648      	mov	r0, r9
 800563e:	f000 fcbd 	bl	8005fbc <_Bfree>
 8005642:	2d00      	cmp	r5, #0
 8005644:	f000 80bd 	beq.w	80057c2 <_dtoa_r+0x62a>
 8005648:	b12f      	cbz	r7, 8005656 <_dtoa_r+0x4be>
 800564a:	42af      	cmp	r7, r5
 800564c:	d003      	beq.n	8005656 <_dtoa_r+0x4be>
 800564e:	4639      	mov	r1, r7
 8005650:	4648      	mov	r0, r9
 8005652:	f000 fcb3 	bl	8005fbc <_Bfree>
 8005656:	4629      	mov	r1, r5
 8005658:	4648      	mov	r0, r9
 800565a:	f000 fcaf 	bl	8005fbc <_Bfree>
 800565e:	e0b0      	b.n	80057c2 <_dtoa_r+0x62a>
 8005660:	07e2      	lsls	r2, r4, #31
 8005662:	d505      	bpl.n	8005670 <_dtoa_r+0x4d8>
 8005664:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005668:	f7fa ff36 	bl	80004d8 <__aeabi_dmul>
 800566c:	2301      	movs	r3, #1
 800566e:	3601      	adds	r6, #1
 8005670:	1064      	asrs	r4, r4, #1
 8005672:	3508      	adds	r5, #8
 8005674:	e762      	b.n	800553c <_dtoa_r+0x3a4>
 8005676:	2602      	movs	r6, #2
 8005678:	e765      	b.n	8005546 <_dtoa_r+0x3ae>
 800567a:	46b8      	mov	r8, r7
 800567c:	9c08      	ldr	r4, [sp, #32]
 800567e:	e784      	b.n	800558a <_dtoa_r+0x3f2>
 8005680:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <_dtoa_r+0x588>)
 8005682:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005684:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005688:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800568c:	4454      	add	r4, sl
 800568e:	2900      	cmp	r1, #0
 8005690:	d054      	beq.n	800573c <_dtoa_r+0x5a4>
 8005692:	2000      	movs	r0, #0
 8005694:	4928      	ldr	r1, [pc, #160]	@ (8005738 <_dtoa_r+0x5a0>)
 8005696:	f7fb f849 	bl	800072c <__aeabi_ddiv>
 800569a:	4633      	mov	r3, r6
 800569c:	462a      	mov	r2, r5
 800569e:	f7fa fd63 	bl	8000168 <__aeabi_dsub>
 80056a2:	4656      	mov	r6, sl
 80056a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056ac:	f7fb f9c4 	bl	8000a38 <__aeabi_d2iz>
 80056b0:	4605      	mov	r5, r0
 80056b2:	f7fa fea7 	bl	8000404 <__aeabi_i2d>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056be:	f7fa fd53 	bl	8000168 <__aeabi_dsub>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	3530      	adds	r5, #48	@ 0x30
 80056c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056d0:	f806 5b01 	strb.w	r5, [r6], #1
 80056d4:	f7fb f972 	bl	80009bc <__aeabi_dcmplt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d172      	bne.n	80057c2 <_dtoa_r+0x62a>
 80056dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056e0:	2000      	movs	r0, #0
 80056e2:	4911      	ldr	r1, [pc, #68]	@ (8005728 <_dtoa_r+0x590>)
 80056e4:	f7fa fd40 	bl	8000168 <__aeabi_dsub>
 80056e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056ec:	f7fb f966 	bl	80009bc <__aeabi_dcmplt>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	f040 80b4 	bne.w	800585e <_dtoa_r+0x6c6>
 80056f6:	42a6      	cmp	r6, r4
 80056f8:	f43f af70 	beq.w	80055dc <_dtoa_r+0x444>
 80056fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005700:	2200      	movs	r2, #0
 8005702:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <_dtoa_r+0x594>)
 8005704:	f7fa fee8 	bl	80004d8 <__aeabi_dmul>
 8005708:	2200      	movs	r2, #0
 800570a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800570e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005712:	4b06      	ldr	r3, [pc, #24]	@ (800572c <_dtoa_r+0x594>)
 8005714:	f7fa fee0 	bl	80004d8 <__aeabi_dmul>
 8005718:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800571c:	e7c4      	b.n	80056a8 <_dtoa_r+0x510>
 800571e:	bf00      	nop
 8005720:	08008090 	.word	0x08008090
 8005724:	08008068 	.word	0x08008068
 8005728:	3ff00000 	.word	0x3ff00000
 800572c:	40240000 	.word	0x40240000
 8005730:	401c0000 	.word	0x401c0000
 8005734:	40140000 	.word	0x40140000
 8005738:	3fe00000 	.word	0x3fe00000
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	f7fa feca 	bl	80004d8 <__aeabi_dmul>
 8005744:	4656      	mov	r6, sl
 8005746:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800574a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800574c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005750:	f7fb f972 	bl	8000a38 <__aeabi_d2iz>
 8005754:	4605      	mov	r5, r0
 8005756:	f7fa fe55 	bl	8000404 <__aeabi_i2d>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005762:	f7fa fd01 	bl	8000168 <__aeabi_dsub>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	3530      	adds	r5, #48	@ 0x30
 800576c:	f806 5b01 	strb.w	r5, [r6], #1
 8005770:	42a6      	cmp	r6, r4
 8005772:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	d124      	bne.n	80057c6 <_dtoa_r+0x62e>
 800577c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005780:	4bae      	ldr	r3, [pc, #696]	@ (8005a3c <_dtoa_r+0x8a4>)
 8005782:	f7fa fcf3 	bl	800016c <__adddf3>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800578e:	f7fb f933 	bl	80009f8 <__aeabi_dcmpgt>
 8005792:	2800      	cmp	r0, #0
 8005794:	d163      	bne.n	800585e <_dtoa_r+0x6c6>
 8005796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800579a:	2000      	movs	r0, #0
 800579c:	49a7      	ldr	r1, [pc, #668]	@ (8005a3c <_dtoa_r+0x8a4>)
 800579e:	f7fa fce3 	bl	8000168 <__aeabi_dsub>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057aa:	f7fb f907 	bl	80009bc <__aeabi_dcmplt>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	f43f af14 	beq.w	80055dc <_dtoa_r+0x444>
 80057b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80057b6:	1e73      	subs	r3, r6, #1
 80057b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80057ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80057be:	2b30      	cmp	r3, #48	@ 0x30
 80057c0:	d0f8      	beq.n	80057b4 <_dtoa_r+0x61c>
 80057c2:	4647      	mov	r7, r8
 80057c4:	e03b      	b.n	800583e <_dtoa_r+0x6a6>
 80057c6:	4b9e      	ldr	r3, [pc, #632]	@ (8005a40 <_dtoa_r+0x8a8>)
 80057c8:	f7fa fe86 	bl	80004d8 <__aeabi_dmul>
 80057cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057d0:	e7bc      	b.n	800574c <_dtoa_r+0x5b4>
 80057d2:	4656      	mov	r6, sl
 80057d4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80057d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057dc:	4620      	mov	r0, r4
 80057de:	4629      	mov	r1, r5
 80057e0:	f7fa ffa4 	bl	800072c <__aeabi_ddiv>
 80057e4:	f7fb f928 	bl	8000a38 <__aeabi_d2iz>
 80057e8:	4680      	mov	r8, r0
 80057ea:	f7fa fe0b 	bl	8000404 <__aeabi_i2d>
 80057ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f2:	f7fa fe71 	bl	80004d8 <__aeabi_dmul>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4620      	mov	r0, r4
 80057fc:	4629      	mov	r1, r5
 80057fe:	f7fa fcb3 	bl	8000168 <__aeabi_dsub>
 8005802:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005806:	9d08      	ldr	r5, [sp, #32]
 8005808:	f806 4b01 	strb.w	r4, [r6], #1
 800580c:	eba6 040a 	sub.w	r4, r6, sl
 8005810:	42a5      	cmp	r5, r4
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	d133      	bne.n	8005880 <_dtoa_r+0x6e8>
 8005818:	f7fa fca8 	bl	800016c <__adddf3>
 800581c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	f7fb f8e8 	bl	80009f8 <__aeabi_dcmpgt>
 8005828:	b9c0      	cbnz	r0, 800585c <_dtoa_r+0x6c4>
 800582a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	f7fb f8b9 	bl	80009a8 <__aeabi_dcmpeq>
 8005836:	b110      	cbz	r0, 800583e <_dtoa_r+0x6a6>
 8005838:	f018 0f01 	tst.w	r8, #1
 800583c:	d10e      	bne.n	800585c <_dtoa_r+0x6c4>
 800583e:	4648      	mov	r0, r9
 8005840:	9903      	ldr	r1, [sp, #12]
 8005842:	f000 fbbb 	bl	8005fbc <_Bfree>
 8005846:	2300      	movs	r3, #0
 8005848:	7033      	strb	r3, [r6, #0]
 800584a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800584c:	3701      	adds	r7, #1
 800584e:	601f      	str	r7, [r3, #0]
 8005850:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 824b 	beq.w	8005cee <_dtoa_r+0xb56>
 8005858:	601e      	str	r6, [r3, #0]
 800585a:	e248      	b.n	8005cee <_dtoa_r+0xb56>
 800585c:	46b8      	mov	r8, r7
 800585e:	4633      	mov	r3, r6
 8005860:	461e      	mov	r6, r3
 8005862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005866:	2a39      	cmp	r2, #57	@ 0x39
 8005868:	d106      	bne.n	8005878 <_dtoa_r+0x6e0>
 800586a:	459a      	cmp	sl, r3
 800586c:	d1f8      	bne.n	8005860 <_dtoa_r+0x6c8>
 800586e:	2230      	movs	r2, #48	@ 0x30
 8005870:	f108 0801 	add.w	r8, r8, #1
 8005874:	f88a 2000 	strb.w	r2, [sl]
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	3201      	adds	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e7a0      	b.n	80057c2 <_dtoa_r+0x62a>
 8005880:	2200      	movs	r2, #0
 8005882:	4b6f      	ldr	r3, [pc, #444]	@ (8005a40 <_dtoa_r+0x8a8>)
 8005884:	f7fa fe28 	bl	80004d8 <__aeabi_dmul>
 8005888:	2200      	movs	r2, #0
 800588a:	2300      	movs	r3, #0
 800588c:	4604      	mov	r4, r0
 800588e:	460d      	mov	r5, r1
 8005890:	f7fb f88a 	bl	80009a8 <__aeabi_dcmpeq>
 8005894:	2800      	cmp	r0, #0
 8005896:	d09f      	beq.n	80057d8 <_dtoa_r+0x640>
 8005898:	e7d1      	b.n	800583e <_dtoa_r+0x6a6>
 800589a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800589c:	2a00      	cmp	r2, #0
 800589e:	f000 80ea 	beq.w	8005a76 <_dtoa_r+0x8de>
 80058a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80058a4:	2a01      	cmp	r2, #1
 80058a6:	f300 80cd 	bgt.w	8005a44 <_dtoa_r+0x8ac>
 80058aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80058ac:	2a00      	cmp	r2, #0
 80058ae:	f000 80c1 	beq.w	8005a34 <_dtoa_r+0x89c>
 80058b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80058b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058b8:	9e04      	ldr	r6, [sp, #16]
 80058ba:	9a04      	ldr	r2, [sp, #16]
 80058bc:	2101      	movs	r1, #1
 80058be:	441a      	add	r2, r3
 80058c0:	9204      	str	r2, [sp, #16]
 80058c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058c4:	4648      	mov	r0, r9
 80058c6:	441a      	add	r2, r3
 80058c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ca:	f000 fc2b 	bl	8006124 <__i2b>
 80058ce:	4605      	mov	r5, r0
 80058d0:	b166      	cbz	r6, 80058ec <_dtoa_r+0x754>
 80058d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	dd09      	ble.n	80058ec <_dtoa_r+0x754>
 80058d8:	42b3      	cmp	r3, r6
 80058da:	bfa8      	it	ge
 80058dc:	4633      	movge	r3, r6
 80058de:	9a04      	ldr	r2, [sp, #16]
 80058e0:	1af6      	subs	r6, r6, r3
 80058e2:	1ad2      	subs	r2, r2, r3
 80058e4:	9204      	str	r2, [sp, #16]
 80058e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058ee:	b30b      	cbz	r3, 8005934 <_dtoa_r+0x79c>
 80058f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80c6 	beq.w	8005a84 <_dtoa_r+0x8ec>
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	f000 80c0 	beq.w	8005a7e <_dtoa_r+0x8e6>
 80058fe:	4629      	mov	r1, r5
 8005900:	4622      	mov	r2, r4
 8005902:	4648      	mov	r0, r9
 8005904:	f000 fcc6 	bl	8006294 <__pow5mult>
 8005908:	9a03      	ldr	r2, [sp, #12]
 800590a:	4601      	mov	r1, r0
 800590c:	4605      	mov	r5, r0
 800590e:	4648      	mov	r0, r9
 8005910:	f000 fc1e 	bl	8006150 <__multiply>
 8005914:	9903      	ldr	r1, [sp, #12]
 8005916:	4680      	mov	r8, r0
 8005918:	4648      	mov	r0, r9
 800591a:	f000 fb4f 	bl	8005fbc <_Bfree>
 800591e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005920:	1b1b      	subs	r3, r3, r4
 8005922:	930a      	str	r3, [sp, #40]	@ 0x28
 8005924:	f000 80b1 	beq.w	8005a8a <_dtoa_r+0x8f2>
 8005928:	4641      	mov	r1, r8
 800592a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800592c:	4648      	mov	r0, r9
 800592e:	f000 fcb1 	bl	8006294 <__pow5mult>
 8005932:	9003      	str	r0, [sp, #12]
 8005934:	2101      	movs	r1, #1
 8005936:	4648      	mov	r0, r9
 8005938:	f000 fbf4 	bl	8006124 <__i2b>
 800593c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800593e:	4604      	mov	r4, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 81d8 	beq.w	8005cf6 <_dtoa_r+0xb5e>
 8005946:	461a      	mov	r2, r3
 8005948:	4601      	mov	r1, r0
 800594a:	4648      	mov	r0, r9
 800594c:	f000 fca2 	bl	8006294 <__pow5mult>
 8005950:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005952:	4604      	mov	r4, r0
 8005954:	2b01      	cmp	r3, #1
 8005956:	f300 809f 	bgt.w	8005a98 <_dtoa_r+0x900>
 800595a:	9b06      	ldr	r3, [sp, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 8097 	bne.w	8005a90 <_dtoa_r+0x8f8>
 8005962:	9b07      	ldr	r3, [sp, #28]
 8005964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005968:	2b00      	cmp	r3, #0
 800596a:	f040 8093 	bne.w	8005a94 <_dtoa_r+0x8fc>
 800596e:	9b07      	ldr	r3, [sp, #28]
 8005970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005974:	0d1b      	lsrs	r3, r3, #20
 8005976:	051b      	lsls	r3, r3, #20
 8005978:	b133      	cbz	r3, 8005988 <_dtoa_r+0x7f0>
 800597a:	9b04      	ldr	r3, [sp, #16]
 800597c:	3301      	adds	r3, #1
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005982:	3301      	adds	r3, #1
 8005984:	9309      	str	r3, [sp, #36]	@ 0x24
 8005986:	2301      	movs	r3, #1
 8005988:	930a      	str	r3, [sp, #40]	@ 0x28
 800598a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 81b8 	beq.w	8005d02 <_dtoa_r+0xb6a>
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005998:	6918      	ldr	r0, [r3, #16]
 800599a:	f000 fb77 	bl	800608c <__hi0bits>
 800599e:	f1c0 0020 	rsb	r0, r0, #32
 80059a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059a4:	4418      	add	r0, r3
 80059a6:	f010 001f 	ands.w	r0, r0, #31
 80059aa:	f000 8082 	beq.w	8005ab2 <_dtoa_r+0x91a>
 80059ae:	f1c0 0320 	rsb	r3, r0, #32
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	dd73      	ble.n	8005a9e <_dtoa_r+0x906>
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	f1c0 001c 	rsb	r0, r0, #28
 80059bc:	4403      	add	r3, r0
 80059be:	9304      	str	r3, [sp, #16]
 80059c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c2:	4406      	add	r6, r0
 80059c4:	4403      	add	r3, r0
 80059c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c8:	9b04      	ldr	r3, [sp, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	dd05      	ble.n	80059da <_dtoa_r+0x842>
 80059ce:	461a      	mov	r2, r3
 80059d0:	4648      	mov	r0, r9
 80059d2:	9903      	ldr	r1, [sp, #12]
 80059d4:	f000 fcb8 	bl	8006348 <__lshift>
 80059d8:	9003      	str	r0, [sp, #12]
 80059da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dd05      	ble.n	80059ec <_dtoa_r+0x854>
 80059e0:	4621      	mov	r1, r4
 80059e2:	461a      	mov	r2, r3
 80059e4:	4648      	mov	r0, r9
 80059e6:	f000 fcaf 	bl	8006348 <__lshift>
 80059ea:	4604      	mov	r4, r0
 80059ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d061      	beq.n	8005ab6 <_dtoa_r+0x91e>
 80059f2:	4621      	mov	r1, r4
 80059f4:	9803      	ldr	r0, [sp, #12]
 80059f6:	f000 fd13 	bl	8006420 <__mcmp>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	da5b      	bge.n	8005ab6 <_dtoa_r+0x91e>
 80059fe:	2300      	movs	r3, #0
 8005a00:	220a      	movs	r2, #10
 8005a02:	4648      	mov	r0, r9
 8005a04:	9903      	ldr	r1, [sp, #12]
 8005a06:	f000 fafb 	bl	8006000 <__multadd>
 8005a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a0c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a10:	9003      	str	r0, [sp, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 8177 	beq.w	8005d06 <_dtoa_r+0xb6e>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	220a      	movs	r2, #10
 8005a1e:	4648      	mov	r0, r9
 8005a20:	f000 faee 	bl	8006000 <__multadd>
 8005a24:	f1bb 0f00 	cmp.w	fp, #0
 8005a28:	4605      	mov	r5, r0
 8005a2a:	dc6f      	bgt.n	8005b0c <_dtoa_r+0x974>
 8005a2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	dc49      	bgt.n	8005ac6 <_dtoa_r+0x92e>
 8005a32:	e06b      	b.n	8005b0c <_dtoa_r+0x974>
 8005a34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005a3a:	e73c      	b.n	80058b6 <_dtoa_r+0x71e>
 8005a3c:	3fe00000 	.word	0x3fe00000
 8005a40:	40240000 	.word	0x40240000
 8005a44:	9b08      	ldr	r3, [sp, #32]
 8005a46:	1e5c      	subs	r4, r3, #1
 8005a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	db09      	blt.n	8005a62 <_dtoa_r+0x8ca>
 8005a4e:	1b1c      	subs	r4, r3, r4
 8005a50:	9b08      	ldr	r3, [sp, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f6bf af30 	bge.w	80058b8 <_dtoa_r+0x720>
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	9a08      	ldr	r2, [sp, #32]
 8005a5c:	1a9e      	subs	r6, r3, r2
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e72b      	b.n	80058ba <_dtoa_r+0x722>
 8005a62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a66:	1ae3      	subs	r3, r4, r3
 8005a68:	441a      	add	r2, r3
 8005a6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005a6c:	9e04      	ldr	r6, [sp, #16]
 8005a6e:	2400      	movs	r4, #0
 8005a70:	9b08      	ldr	r3, [sp, #32]
 8005a72:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a74:	e721      	b.n	80058ba <_dtoa_r+0x722>
 8005a76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a78:	9e04      	ldr	r6, [sp, #16]
 8005a7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005a7c:	e728      	b.n	80058d0 <_dtoa_r+0x738>
 8005a7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a82:	e751      	b.n	8005928 <_dtoa_r+0x790>
 8005a84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a86:	9903      	ldr	r1, [sp, #12]
 8005a88:	e750      	b.n	800592c <_dtoa_r+0x794>
 8005a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a8e:	e751      	b.n	8005934 <_dtoa_r+0x79c>
 8005a90:	2300      	movs	r3, #0
 8005a92:	e779      	b.n	8005988 <_dtoa_r+0x7f0>
 8005a94:	9b06      	ldr	r3, [sp, #24]
 8005a96:	e777      	b.n	8005988 <_dtoa_r+0x7f0>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a9c:	e779      	b.n	8005992 <_dtoa_r+0x7fa>
 8005a9e:	d093      	beq.n	80059c8 <_dtoa_r+0x830>
 8005aa0:	9a04      	ldr	r2, [sp, #16]
 8005aa2:	331c      	adds	r3, #28
 8005aa4:	441a      	add	r2, r3
 8005aa6:	9204      	str	r2, [sp, #16]
 8005aa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aaa:	441e      	add	r6, r3
 8005aac:	441a      	add	r2, r3
 8005aae:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ab0:	e78a      	b.n	80059c8 <_dtoa_r+0x830>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	e7f4      	b.n	8005aa0 <_dtoa_r+0x908>
 8005ab6:	9b08      	ldr	r3, [sp, #32]
 8005ab8:	46b8      	mov	r8, r7
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	dc20      	bgt.n	8005b00 <_dtoa_r+0x968>
 8005abe:	469b      	mov	fp, r3
 8005ac0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	dd1e      	ble.n	8005b04 <_dtoa_r+0x96c>
 8005ac6:	f1bb 0f00 	cmp.w	fp, #0
 8005aca:	f47f adb1 	bne.w	8005630 <_dtoa_r+0x498>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	465b      	mov	r3, fp
 8005ad2:	2205      	movs	r2, #5
 8005ad4:	4648      	mov	r0, r9
 8005ad6:	f000 fa93 	bl	8006000 <__multadd>
 8005ada:	4601      	mov	r1, r0
 8005adc:	4604      	mov	r4, r0
 8005ade:	9803      	ldr	r0, [sp, #12]
 8005ae0:	f000 fc9e 	bl	8006420 <__mcmp>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	f77f ada3 	ble.w	8005630 <_dtoa_r+0x498>
 8005aea:	4656      	mov	r6, sl
 8005aec:	2331      	movs	r3, #49	@ 0x31
 8005aee:	f108 0801 	add.w	r8, r8, #1
 8005af2:	f806 3b01 	strb.w	r3, [r6], #1
 8005af6:	e59f      	b.n	8005638 <_dtoa_r+0x4a0>
 8005af8:	46b8      	mov	r8, r7
 8005afa:	9c08      	ldr	r4, [sp, #32]
 8005afc:	4625      	mov	r5, r4
 8005afe:	e7f4      	b.n	8005aea <_dtoa_r+0x952>
 8005b00:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8101 	beq.w	8005d0e <_dtoa_r+0xb76>
 8005b0c:	2e00      	cmp	r6, #0
 8005b0e:	dd05      	ble.n	8005b1c <_dtoa_r+0x984>
 8005b10:	4629      	mov	r1, r5
 8005b12:	4632      	mov	r2, r6
 8005b14:	4648      	mov	r0, r9
 8005b16:	f000 fc17 	bl	8006348 <__lshift>
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d05c      	beq.n	8005bdc <_dtoa_r+0xa44>
 8005b22:	4648      	mov	r0, r9
 8005b24:	6869      	ldr	r1, [r5, #4]
 8005b26:	f000 fa09 	bl	8005f3c <_Balloc>
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	b928      	cbnz	r0, 8005b3a <_dtoa_r+0x9a2>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005b34:	4b80      	ldr	r3, [pc, #512]	@ (8005d38 <_dtoa_r+0xba0>)
 8005b36:	f7ff bb43 	b.w	80051c0 <_dtoa_r+0x28>
 8005b3a:	692a      	ldr	r2, [r5, #16]
 8005b3c:	f105 010c 	add.w	r1, r5, #12
 8005b40:	3202      	adds	r2, #2
 8005b42:	0092      	lsls	r2, r2, #2
 8005b44:	300c      	adds	r0, #12
 8005b46:	f000 ff9d 	bl	8006a84 <memcpy>
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4648      	mov	r0, r9
 8005b50:	f000 fbfa 	bl	8006348 <__lshift>
 8005b54:	462f      	mov	r7, r5
 8005b56:	4605      	mov	r5, r0
 8005b58:	f10a 0301 	add.w	r3, sl, #1
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	eb0a 030b 	add.w	r3, sl, fp
 8005b62:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b64:	9b06      	ldr	r3, [sp, #24]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	4621      	mov	r1, r4
 8005b70:	9803      	ldr	r0, [sp, #12]
 8005b72:	f103 3bff 	add.w	fp, r3, #4294967295
 8005b76:	f7ff fa86 	bl	8005086 <quorem>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	3330      	adds	r3, #48	@ 0x30
 8005b80:	9006      	str	r0, [sp, #24]
 8005b82:	9803      	ldr	r0, [sp, #12]
 8005b84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b86:	f000 fc4b 	bl	8006420 <__mcmp>
 8005b8a:	462a      	mov	r2, r5
 8005b8c:	9008      	str	r0, [sp, #32]
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4648      	mov	r0, r9
 8005b92:	f000 fc61 	bl	8006458 <__mdiff>
 8005b96:	68c2      	ldr	r2, [r0, #12]
 8005b98:	4606      	mov	r6, r0
 8005b9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b9c:	bb02      	cbnz	r2, 8005be0 <_dtoa_r+0xa48>
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	9803      	ldr	r0, [sp, #12]
 8005ba2:	f000 fc3d 	bl	8006420 <__mcmp>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005baa:	4631      	mov	r1, r6
 8005bac:	4648      	mov	r0, r9
 8005bae:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005bb2:	f000 fa03 	bl	8005fbc <_Bfree>
 8005bb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005bba:	9e04      	ldr	r6, [sp, #16]
 8005bbc:	ea42 0103 	orr.w	r1, r2, r3
 8005bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc2:	4319      	orrs	r1, r3
 8005bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bc6:	d10d      	bne.n	8005be4 <_dtoa_r+0xa4c>
 8005bc8:	2b39      	cmp	r3, #57	@ 0x39
 8005bca:	d027      	beq.n	8005c1c <_dtoa_r+0xa84>
 8005bcc:	9a08      	ldr	r2, [sp, #32]
 8005bce:	2a00      	cmp	r2, #0
 8005bd0:	dd01      	ble.n	8005bd6 <_dtoa_r+0xa3e>
 8005bd2:	9b06      	ldr	r3, [sp, #24]
 8005bd4:	3331      	adds	r3, #49	@ 0x31
 8005bd6:	f88b 3000 	strb.w	r3, [fp]
 8005bda:	e52e      	b.n	800563a <_dtoa_r+0x4a2>
 8005bdc:	4628      	mov	r0, r5
 8005bde:	e7b9      	b.n	8005b54 <_dtoa_r+0x9bc>
 8005be0:	2201      	movs	r2, #1
 8005be2:	e7e2      	b.n	8005baa <_dtoa_r+0xa12>
 8005be4:	9908      	ldr	r1, [sp, #32]
 8005be6:	2900      	cmp	r1, #0
 8005be8:	db04      	blt.n	8005bf4 <_dtoa_r+0xa5c>
 8005bea:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005bec:	4301      	orrs	r1, r0
 8005bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bf0:	4301      	orrs	r1, r0
 8005bf2:	d120      	bne.n	8005c36 <_dtoa_r+0xa9e>
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	ddee      	ble.n	8005bd6 <_dtoa_r+0xa3e>
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	9903      	ldr	r1, [sp, #12]
 8005bfc:	4648      	mov	r0, r9
 8005bfe:	9304      	str	r3, [sp, #16]
 8005c00:	f000 fba2 	bl	8006348 <__lshift>
 8005c04:	4621      	mov	r1, r4
 8005c06:	9003      	str	r0, [sp, #12]
 8005c08:	f000 fc0a 	bl	8006420 <__mcmp>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	9b04      	ldr	r3, [sp, #16]
 8005c10:	dc02      	bgt.n	8005c18 <_dtoa_r+0xa80>
 8005c12:	d1e0      	bne.n	8005bd6 <_dtoa_r+0xa3e>
 8005c14:	07da      	lsls	r2, r3, #31
 8005c16:	d5de      	bpl.n	8005bd6 <_dtoa_r+0xa3e>
 8005c18:	2b39      	cmp	r3, #57	@ 0x39
 8005c1a:	d1da      	bne.n	8005bd2 <_dtoa_r+0xa3a>
 8005c1c:	2339      	movs	r3, #57	@ 0x39
 8005c1e:	f88b 3000 	strb.w	r3, [fp]
 8005c22:	4633      	mov	r3, r6
 8005c24:	461e      	mov	r6, r3
 8005c26:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	2a39      	cmp	r2, #57	@ 0x39
 8005c2e:	d04e      	beq.n	8005cce <_dtoa_r+0xb36>
 8005c30:	3201      	adds	r2, #1
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	e501      	b.n	800563a <_dtoa_r+0x4a2>
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	dd03      	ble.n	8005c42 <_dtoa_r+0xaaa>
 8005c3a:	2b39      	cmp	r3, #57	@ 0x39
 8005c3c:	d0ee      	beq.n	8005c1c <_dtoa_r+0xa84>
 8005c3e:	3301      	adds	r3, #1
 8005c40:	e7c9      	b.n	8005bd6 <_dtoa_r+0xa3e>
 8005c42:	9a04      	ldr	r2, [sp, #16]
 8005c44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c4a:	428a      	cmp	r2, r1
 8005c4c:	d028      	beq.n	8005ca0 <_dtoa_r+0xb08>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	220a      	movs	r2, #10
 8005c52:	9903      	ldr	r1, [sp, #12]
 8005c54:	4648      	mov	r0, r9
 8005c56:	f000 f9d3 	bl	8006000 <__multadd>
 8005c5a:	42af      	cmp	r7, r5
 8005c5c:	9003      	str	r0, [sp, #12]
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	f04f 020a 	mov.w	r2, #10
 8005c66:	4639      	mov	r1, r7
 8005c68:	4648      	mov	r0, r9
 8005c6a:	d107      	bne.n	8005c7c <_dtoa_r+0xae4>
 8005c6c:	f000 f9c8 	bl	8006000 <__multadd>
 8005c70:	4607      	mov	r7, r0
 8005c72:	4605      	mov	r5, r0
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	3301      	adds	r3, #1
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	e777      	b.n	8005b6c <_dtoa_r+0x9d4>
 8005c7c:	f000 f9c0 	bl	8006000 <__multadd>
 8005c80:	4629      	mov	r1, r5
 8005c82:	4607      	mov	r7, r0
 8005c84:	2300      	movs	r3, #0
 8005c86:	220a      	movs	r2, #10
 8005c88:	4648      	mov	r0, r9
 8005c8a:	f000 f9b9 	bl	8006000 <__multadd>
 8005c8e:	4605      	mov	r5, r0
 8005c90:	e7f0      	b.n	8005c74 <_dtoa_r+0xadc>
 8005c92:	f1bb 0f00 	cmp.w	fp, #0
 8005c96:	bfcc      	ite	gt
 8005c98:	465e      	movgt	r6, fp
 8005c9a:	2601      	movle	r6, #1
 8005c9c:	2700      	movs	r7, #0
 8005c9e:	4456      	add	r6, sl
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	9903      	ldr	r1, [sp, #12]
 8005ca4:	4648      	mov	r0, r9
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	f000 fb4e 	bl	8006348 <__lshift>
 8005cac:	4621      	mov	r1, r4
 8005cae:	9003      	str	r0, [sp, #12]
 8005cb0:	f000 fbb6 	bl	8006420 <__mcmp>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	dcb4      	bgt.n	8005c22 <_dtoa_r+0xa8a>
 8005cb8:	d102      	bne.n	8005cc0 <_dtoa_r+0xb28>
 8005cba:	9b04      	ldr	r3, [sp, #16]
 8005cbc:	07db      	lsls	r3, r3, #31
 8005cbe:	d4b0      	bmi.n	8005c22 <_dtoa_r+0xa8a>
 8005cc0:	4633      	mov	r3, r6
 8005cc2:	461e      	mov	r6, r3
 8005cc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc8:	2a30      	cmp	r2, #48	@ 0x30
 8005cca:	d0fa      	beq.n	8005cc2 <_dtoa_r+0xb2a>
 8005ccc:	e4b5      	b.n	800563a <_dtoa_r+0x4a2>
 8005cce:	459a      	cmp	sl, r3
 8005cd0:	d1a8      	bne.n	8005c24 <_dtoa_r+0xa8c>
 8005cd2:	2331      	movs	r3, #49	@ 0x31
 8005cd4:	f108 0801 	add.w	r8, r8, #1
 8005cd8:	f88a 3000 	strb.w	r3, [sl]
 8005cdc:	e4ad      	b.n	800563a <_dtoa_r+0x4a2>
 8005cde:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ce0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005d3c <_dtoa_r+0xba4>
 8005ce4:	b11b      	cbz	r3, 8005cee <_dtoa_r+0xb56>
 8005ce6:	f10a 0308 	add.w	r3, sl, #8
 8005cea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4650      	mov	r0, sl
 8005cf0:	b017      	add	sp, #92	@ 0x5c
 8005cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	f77f ae2e 	ble.w	800595a <_dtoa_r+0x7c2>
 8005cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d02:	2001      	movs	r0, #1
 8005d04:	e64d      	b.n	80059a2 <_dtoa_r+0x80a>
 8005d06:	f1bb 0f00 	cmp.w	fp, #0
 8005d0a:	f77f aed9 	ble.w	8005ac0 <_dtoa_r+0x928>
 8005d0e:	4656      	mov	r6, sl
 8005d10:	4621      	mov	r1, r4
 8005d12:	9803      	ldr	r0, [sp, #12]
 8005d14:	f7ff f9b7 	bl	8005086 <quorem>
 8005d18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005d1c:	f806 3b01 	strb.w	r3, [r6], #1
 8005d20:	eba6 020a 	sub.w	r2, r6, sl
 8005d24:	4593      	cmp	fp, r2
 8005d26:	ddb4      	ble.n	8005c92 <_dtoa_r+0xafa>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	4648      	mov	r0, r9
 8005d2e:	9903      	ldr	r1, [sp, #12]
 8005d30:	f000 f966 	bl	8006000 <__multadd>
 8005d34:	9003      	str	r0, [sp, #12]
 8005d36:	e7eb      	b.n	8005d10 <_dtoa_r+0xb78>
 8005d38:	08007f96 	.word	0x08007f96
 8005d3c:	08007f1a 	.word	0x08007f1a

08005d40 <_free_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4605      	mov	r5, r0
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d040      	beq.n	8005dca <_free_r+0x8a>
 8005d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d4c:	1f0c      	subs	r4, r1, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bfb8      	it	lt
 8005d52:	18e4      	addlt	r4, r4, r3
 8005d54:	f000 f8e6 	bl	8005f24 <__malloc_lock>
 8005d58:	4a1c      	ldr	r2, [pc, #112]	@ (8005dcc <_free_r+0x8c>)
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x2c>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	4628      	mov	r0, r5
 8005d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d68:	f000 b8e2 	b.w	8005f30 <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x42>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	1821      	adds	r1, r4, r0
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1809      	addeq	r1, r1, r0
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x1e>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x4c>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x42>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1850      	adds	r0, r2, r1
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x6c>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	4401      	add	r1, r0
 8005d98:	1850      	adds	r0, r2, r1
 8005d9a:	4283      	cmp	r3, r0
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x22>
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4408      	add	r0, r1
 8005da6:	6010      	str	r0, [r2, #0]
 8005da8:	6053      	str	r3, [r2, #4]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x22>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x74>
 8005dae:	230c      	movs	r3, #12
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x22>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	1821      	adds	r1, r4, r0
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf01      	itttt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	1809      	addeq	r1, r1, r0
 8005dc2:	6021      	streq	r1, [r4, #0]
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	6054      	str	r4, [r2, #4]
 8005dc8:	e7cb      	b.n	8005d62 <_free_r+0x22>
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000864 	.word	0x20000864

08005dd0 <malloc>:
 8005dd0:	4b02      	ldr	r3, [pc, #8]	@ (8005ddc <malloc+0xc>)
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	f000 b825 	b.w	8005e24 <_malloc_r>
 8005dda:	bf00      	nop
 8005ddc:	20000020 	.word	0x20000020

08005de0 <sbrk_aligned>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4e0f      	ldr	r6, [pc, #60]	@ (8005e20 <sbrk_aligned+0x40>)
 8005de4:	460c      	mov	r4, r1
 8005de6:	6831      	ldr	r1, [r6, #0]
 8005de8:	4605      	mov	r5, r0
 8005dea:	b911      	cbnz	r1, 8005df2 <sbrk_aligned+0x12>
 8005dec:	f000 fe3a 	bl	8006a64 <_sbrk_r>
 8005df0:	6030      	str	r0, [r6, #0]
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 fe35 	bl	8006a64 <_sbrk_r>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	d103      	bne.n	8005e06 <sbrk_aligned+0x26>
 8005dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8005e02:	4620      	mov	r0, r4
 8005e04:	bd70      	pop	{r4, r5, r6, pc}
 8005e06:	1cc4      	adds	r4, r0, #3
 8005e08:	f024 0403 	bic.w	r4, r4, #3
 8005e0c:	42a0      	cmp	r0, r4
 8005e0e:	d0f8      	beq.n	8005e02 <sbrk_aligned+0x22>
 8005e10:	1a21      	subs	r1, r4, r0
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 fe26 	bl	8006a64 <_sbrk_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d1f2      	bne.n	8005e02 <sbrk_aligned+0x22>
 8005e1c:	e7ef      	b.n	8005dfe <sbrk_aligned+0x1e>
 8005e1e:	bf00      	nop
 8005e20:	20000860 	.word	0x20000860

08005e24 <_malloc_r>:
 8005e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e28:	1ccd      	adds	r5, r1, #3
 8005e2a:	f025 0503 	bic.w	r5, r5, #3
 8005e2e:	3508      	adds	r5, #8
 8005e30:	2d0c      	cmp	r5, #12
 8005e32:	bf38      	it	cc
 8005e34:	250c      	movcc	r5, #12
 8005e36:	2d00      	cmp	r5, #0
 8005e38:	4606      	mov	r6, r0
 8005e3a:	db01      	blt.n	8005e40 <_malloc_r+0x1c>
 8005e3c:	42a9      	cmp	r1, r5
 8005e3e:	d904      	bls.n	8005e4a <_malloc_r+0x26>
 8005e40:	230c      	movs	r3, #12
 8005e42:	6033      	str	r3, [r6, #0]
 8005e44:	2000      	movs	r0, #0
 8005e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f20 <_malloc_r+0xfc>
 8005e4e:	f000 f869 	bl	8005f24 <__malloc_lock>
 8005e52:	f8d8 3000 	ldr.w	r3, [r8]
 8005e56:	461c      	mov	r4, r3
 8005e58:	bb44      	cbnz	r4, 8005eac <_malloc_r+0x88>
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f7ff ffbf 	bl	8005de0 <sbrk_aligned>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	4604      	mov	r4, r0
 8005e66:	d158      	bne.n	8005f1a <_malloc_r+0xf6>
 8005e68:	f8d8 4000 	ldr.w	r4, [r8]
 8005e6c:	4627      	mov	r7, r4
 8005e6e:	2f00      	cmp	r7, #0
 8005e70:	d143      	bne.n	8005efa <_malloc_r+0xd6>
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	d04b      	beq.n	8005f0e <_malloc_r+0xea>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	4639      	mov	r1, r7
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	eb04 0903 	add.w	r9, r4, r3
 8005e80:	f000 fdf0 	bl	8006a64 <_sbrk_r>
 8005e84:	4581      	cmp	r9, r0
 8005e86:	d142      	bne.n	8005f0e <_malloc_r+0xea>
 8005e88:	6821      	ldr	r1, [r4, #0]
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	1a6d      	subs	r5, r5, r1
 8005e8e:	4629      	mov	r1, r5
 8005e90:	f7ff ffa6 	bl	8005de0 <sbrk_aligned>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d03a      	beq.n	8005f0e <_malloc_r+0xea>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	442b      	add	r3, r5
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	bb62      	cbnz	r2, 8005f00 <_malloc_r+0xdc>
 8005ea6:	f8c8 7000 	str.w	r7, [r8]
 8005eaa:	e00f      	b.n	8005ecc <_malloc_r+0xa8>
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	1b52      	subs	r2, r2, r5
 8005eb0:	d420      	bmi.n	8005ef4 <_malloc_r+0xd0>
 8005eb2:	2a0b      	cmp	r2, #11
 8005eb4:	d917      	bls.n	8005ee6 <_malloc_r+0xc2>
 8005eb6:	1961      	adds	r1, r4, r5
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	6025      	str	r5, [r4, #0]
 8005ebc:	bf18      	it	ne
 8005ebe:	6059      	strne	r1, [r3, #4]
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	bf08      	it	eq
 8005ec4:	f8c8 1000 	streq.w	r1, [r8]
 8005ec8:	5162      	str	r2, [r4, r5]
 8005eca:	604b      	str	r3, [r1, #4]
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f82f 	bl	8005f30 <__malloc_unlock>
 8005ed2:	f104 000b 	add.w	r0, r4, #11
 8005ed6:	1d23      	adds	r3, r4, #4
 8005ed8:	f020 0007 	bic.w	r0, r0, #7
 8005edc:	1ac2      	subs	r2, r0, r3
 8005ede:	bf1c      	itt	ne
 8005ee0:	1a1b      	subne	r3, r3, r0
 8005ee2:	50a3      	strne	r3, [r4, r2]
 8005ee4:	e7af      	b.n	8005e46 <_malloc_r+0x22>
 8005ee6:	6862      	ldr	r2, [r4, #4]
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	bf0c      	ite	eq
 8005eec:	f8c8 2000 	streq.w	r2, [r8]
 8005ef0:	605a      	strne	r2, [r3, #4]
 8005ef2:	e7eb      	b.n	8005ecc <_malloc_r+0xa8>
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	6864      	ldr	r4, [r4, #4]
 8005ef8:	e7ae      	b.n	8005e58 <_malloc_r+0x34>
 8005efa:	463c      	mov	r4, r7
 8005efc:	687f      	ldr	r7, [r7, #4]
 8005efe:	e7b6      	b.n	8005e6e <_malloc_r+0x4a>
 8005f00:	461a      	mov	r2, r3
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d1fb      	bne.n	8005f00 <_malloc_r+0xdc>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6053      	str	r3, [r2, #4]
 8005f0c:	e7de      	b.n	8005ecc <_malloc_r+0xa8>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	4630      	mov	r0, r6
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	f000 f80c 	bl	8005f30 <__malloc_unlock>
 8005f18:	e794      	b.n	8005e44 <_malloc_r+0x20>
 8005f1a:	6005      	str	r5, [r0, #0]
 8005f1c:	e7d6      	b.n	8005ecc <_malloc_r+0xa8>
 8005f1e:	bf00      	nop
 8005f20:	20000864 	.word	0x20000864

08005f24 <__malloc_lock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	@ (8005f2c <__malloc_lock+0x8>)
 8005f26:	f7ff b89e 	b.w	8005066 <__retarget_lock_acquire_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	2000085c 	.word	0x2000085c

08005f30 <__malloc_unlock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	@ (8005f38 <__malloc_unlock+0x8>)
 8005f32:	f7ff b899 	b.w	8005068 <__retarget_lock_release_recursive>
 8005f36:	bf00      	nop
 8005f38:	2000085c 	.word	0x2000085c

08005f3c <_Balloc>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	69c6      	ldr	r6, [r0, #28]
 8005f40:	4604      	mov	r4, r0
 8005f42:	460d      	mov	r5, r1
 8005f44:	b976      	cbnz	r6, 8005f64 <_Balloc+0x28>
 8005f46:	2010      	movs	r0, #16
 8005f48:	f7ff ff42 	bl	8005dd0 <malloc>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	61e0      	str	r0, [r4, #28]
 8005f50:	b920      	cbnz	r0, 8005f5c <_Balloc+0x20>
 8005f52:	216b      	movs	r1, #107	@ 0x6b
 8005f54:	4b17      	ldr	r3, [pc, #92]	@ (8005fb4 <_Balloc+0x78>)
 8005f56:	4818      	ldr	r0, [pc, #96]	@ (8005fb8 <_Balloc+0x7c>)
 8005f58:	f000 fda2 	bl	8006aa0 <__assert_func>
 8005f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f60:	6006      	str	r6, [r0, #0]
 8005f62:	60c6      	str	r6, [r0, #12]
 8005f64:	69e6      	ldr	r6, [r4, #28]
 8005f66:	68f3      	ldr	r3, [r6, #12]
 8005f68:	b183      	cbz	r3, 8005f8c <_Balloc+0x50>
 8005f6a:	69e3      	ldr	r3, [r4, #28]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f72:	b9b8      	cbnz	r0, 8005fa4 <_Balloc+0x68>
 8005f74:	2101      	movs	r1, #1
 8005f76:	fa01 f605 	lsl.w	r6, r1, r5
 8005f7a:	1d72      	adds	r2, r6, #5
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	0092      	lsls	r2, r2, #2
 8005f80:	f000 fdac 	bl	8006adc <_calloc_r>
 8005f84:	b160      	cbz	r0, 8005fa0 <_Balloc+0x64>
 8005f86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f8a:	e00e      	b.n	8005faa <_Balloc+0x6e>
 8005f8c:	2221      	movs	r2, #33	@ 0x21
 8005f8e:	2104      	movs	r1, #4
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 fda3 	bl	8006adc <_calloc_r>
 8005f96:	69e3      	ldr	r3, [r4, #28]
 8005f98:	60f0      	str	r0, [r6, #12]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e4      	bne.n	8005f6a <_Balloc+0x2e>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	6802      	ldr	r2, [r0, #0]
 8005fa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005faa:	2300      	movs	r3, #0
 8005fac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fb0:	e7f7      	b.n	8005fa2 <_Balloc+0x66>
 8005fb2:	bf00      	nop
 8005fb4:	08007f27 	.word	0x08007f27
 8005fb8:	08007fa7 	.word	0x08007fa7

08005fbc <_Bfree>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	69c6      	ldr	r6, [r0, #28]
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	b976      	cbnz	r6, 8005fe4 <_Bfree+0x28>
 8005fc6:	2010      	movs	r0, #16
 8005fc8:	f7ff ff02 	bl	8005dd0 <malloc>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	61e8      	str	r0, [r5, #28]
 8005fd0:	b920      	cbnz	r0, 8005fdc <_Bfree+0x20>
 8005fd2:	218f      	movs	r1, #143	@ 0x8f
 8005fd4:	4b08      	ldr	r3, [pc, #32]	@ (8005ff8 <_Bfree+0x3c>)
 8005fd6:	4809      	ldr	r0, [pc, #36]	@ (8005ffc <_Bfree+0x40>)
 8005fd8:	f000 fd62 	bl	8006aa0 <__assert_func>
 8005fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fe0:	6006      	str	r6, [r0, #0]
 8005fe2:	60c6      	str	r6, [r0, #12]
 8005fe4:	b13c      	cbz	r4, 8005ff6 <_Bfree+0x3a>
 8005fe6:	69eb      	ldr	r3, [r5, #28]
 8005fe8:	6862      	ldr	r2, [r4, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ff0:	6021      	str	r1, [r4, #0]
 8005ff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	08007f27 	.word	0x08007f27
 8005ffc:	08007fa7 	.word	0x08007fa7

08006000 <__multadd>:
 8006000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006004:	4607      	mov	r7, r0
 8006006:	460c      	mov	r4, r1
 8006008:	461e      	mov	r6, r3
 800600a:	2000      	movs	r0, #0
 800600c:	690d      	ldr	r5, [r1, #16]
 800600e:	f101 0c14 	add.w	ip, r1, #20
 8006012:	f8dc 3000 	ldr.w	r3, [ip]
 8006016:	3001      	adds	r0, #1
 8006018:	b299      	uxth	r1, r3
 800601a:	fb02 6101 	mla	r1, r2, r1, r6
 800601e:	0c1e      	lsrs	r6, r3, #16
 8006020:	0c0b      	lsrs	r3, r1, #16
 8006022:	fb02 3306 	mla	r3, r2, r6, r3
 8006026:	b289      	uxth	r1, r1
 8006028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800602c:	4285      	cmp	r5, r0
 800602e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006032:	f84c 1b04 	str.w	r1, [ip], #4
 8006036:	dcec      	bgt.n	8006012 <__multadd+0x12>
 8006038:	b30e      	cbz	r6, 800607e <__multadd+0x7e>
 800603a:	68a3      	ldr	r3, [r4, #8]
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc19      	bgt.n	8006074 <__multadd+0x74>
 8006040:	6861      	ldr	r1, [r4, #4]
 8006042:	4638      	mov	r0, r7
 8006044:	3101      	adds	r1, #1
 8006046:	f7ff ff79 	bl	8005f3c <_Balloc>
 800604a:	4680      	mov	r8, r0
 800604c:	b928      	cbnz	r0, 800605a <__multadd+0x5a>
 800604e:	4602      	mov	r2, r0
 8006050:	21ba      	movs	r1, #186	@ 0xba
 8006052:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <__multadd+0x84>)
 8006054:	480c      	ldr	r0, [pc, #48]	@ (8006088 <__multadd+0x88>)
 8006056:	f000 fd23 	bl	8006aa0 <__assert_func>
 800605a:	6922      	ldr	r2, [r4, #16]
 800605c:	f104 010c 	add.w	r1, r4, #12
 8006060:	3202      	adds	r2, #2
 8006062:	0092      	lsls	r2, r2, #2
 8006064:	300c      	adds	r0, #12
 8006066:	f000 fd0d 	bl	8006a84 <memcpy>
 800606a:	4621      	mov	r1, r4
 800606c:	4638      	mov	r0, r7
 800606e:	f7ff ffa5 	bl	8005fbc <_Bfree>
 8006072:	4644      	mov	r4, r8
 8006074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006078:	3501      	adds	r5, #1
 800607a:	615e      	str	r6, [r3, #20]
 800607c:	6125      	str	r5, [r4, #16]
 800607e:	4620      	mov	r0, r4
 8006080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006084:	08007f96 	.word	0x08007f96
 8006088:	08007fa7 	.word	0x08007fa7

0800608c <__hi0bits>:
 800608c:	4603      	mov	r3, r0
 800608e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006092:	bf3a      	itte	cc
 8006094:	0403      	lslcc	r3, r0, #16
 8006096:	2010      	movcc	r0, #16
 8006098:	2000      	movcs	r0, #0
 800609a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800609e:	bf3c      	itt	cc
 80060a0:	021b      	lslcc	r3, r3, #8
 80060a2:	3008      	addcc	r0, #8
 80060a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060a8:	bf3c      	itt	cc
 80060aa:	011b      	lslcc	r3, r3, #4
 80060ac:	3004      	addcc	r0, #4
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b2:	bf3c      	itt	cc
 80060b4:	009b      	lslcc	r3, r3, #2
 80060b6:	3002      	addcc	r0, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	db05      	blt.n	80060c8 <__hi0bits+0x3c>
 80060bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80060c0:	f100 0001 	add.w	r0, r0, #1
 80060c4:	bf08      	it	eq
 80060c6:	2020      	moveq	r0, #32
 80060c8:	4770      	bx	lr

080060ca <__lo0bits>:
 80060ca:	6803      	ldr	r3, [r0, #0]
 80060cc:	4602      	mov	r2, r0
 80060ce:	f013 0007 	ands.w	r0, r3, #7
 80060d2:	d00b      	beq.n	80060ec <__lo0bits+0x22>
 80060d4:	07d9      	lsls	r1, r3, #31
 80060d6:	d421      	bmi.n	800611c <__lo0bits+0x52>
 80060d8:	0798      	lsls	r0, r3, #30
 80060da:	bf49      	itett	mi
 80060dc:	085b      	lsrmi	r3, r3, #1
 80060de:	089b      	lsrpl	r3, r3, #2
 80060e0:	2001      	movmi	r0, #1
 80060e2:	6013      	strmi	r3, [r2, #0]
 80060e4:	bf5c      	itt	pl
 80060e6:	2002      	movpl	r0, #2
 80060e8:	6013      	strpl	r3, [r2, #0]
 80060ea:	4770      	bx	lr
 80060ec:	b299      	uxth	r1, r3
 80060ee:	b909      	cbnz	r1, 80060f4 <__lo0bits+0x2a>
 80060f0:	2010      	movs	r0, #16
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	b2d9      	uxtb	r1, r3
 80060f6:	b909      	cbnz	r1, 80060fc <__lo0bits+0x32>
 80060f8:	3008      	adds	r0, #8
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	0719      	lsls	r1, r3, #28
 80060fe:	bf04      	itt	eq
 8006100:	091b      	lsreq	r3, r3, #4
 8006102:	3004      	addeq	r0, #4
 8006104:	0799      	lsls	r1, r3, #30
 8006106:	bf04      	itt	eq
 8006108:	089b      	lsreq	r3, r3, #2
 800610a:	3002      	addeq	r0, #2
 800610c:	07d9      	lsls	r1, r3, #31
 800610e:	d403      	bmi.n	8006118 <__lo0bits+0x4e>
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	f100 0001 	add.w	r0, r0, #1
 8006116:	d003      	beq.n	8006120 <__lo0bits+0x56>
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4770      	bx	lr
 800611c:	2000      	movs	r0, #0
 800611e:	4770      	bx	lr
 8006120:	2020      	movs	r0, #32
 8006122:	4770      	bx	lr

08006124 <__i2b>:
 8006124:	b510      	push	{r4, lr}
 8006126:	460c      	mov	r4, r1
 8006128:	2101      	movs	r1, #1
 800612a:	f7ff ff07 	bl	8005f3c <_Balloc>
 800612e:	4602      	mov	r2, r0
 8006130:	b928      	cbnz	r0, 800613e <__i2b+0x1a>
 8006132:	f240 1145 	movw	r1, #325	@ 0x145
 8006136:	4b04      	ldr	r3, [pc, #16]	@ (8006148 <__i2b+0x24>)
 8006138:	4804      	ldr	r0, [pc, #16]	@ (800614c <__i2b+0x28>)
 800613a:	f000 fcb1 	bl	8006aa0 <__assert_func>
 800613e:	2301      	movs	r3, #1
 8006140:	6144      	str	r4, [r0, #20]
 8006142:	6103      	str	r3, [r0, #16]
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop
 8006148:	08007f96 	.word	0x08007f96
 800614c:	08007fa7 	.word	0x08007fa7

08006150 <__multiply>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	4617      	mov	r7, r2
 8006156:	690a      	ldr	r2, [r1, #16]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4689      	mov	r9, r1
 800615c:	429a      	cmp	r2, r3
 800615e:	bfa2      	ittt	ge
 8006160:	463b      	movge	r3, r7
 8006162:	460f      	movge	r7, r1
 8006164:	4699      	movge	r9, r3
 8006166:	693d      	ldr	r5, [r7, #16]
 8006168:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	eb05 060a 	add.w	r6, r5, sl
 8006174:	42b3      	cmp	r3, r6
 8006176:	b085      	sub	sp, #20
 8006178:	bfb8      	it	lt
 800617a:	3101      	addlt	r1, #1
 800617c:	f7ff fede 	bl	8005f3c <_Balloc>
 8006180:	b930      	cbnz	r0, 8006190 <__multiply+0x40>
 8006182:	4602      	mov	r2, r0
 8006184:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006188:	4b40      	ldr	r3, [pc, #256]	@ (800628c <__multiply+0x13c>)
 800618a:	4841      	ldr	r0, [pc, #260]	@ (8006290 <__multiply+0x140>)
 800618c:	f000 fc88 	bl	8006aa0 <__assert_func>
 8006190:	f100 0414 	add.w	r4, r0, #20
 8006194:	4623      	mov	r3, r4
 8006196:	2200      	movs	r2, #0
 8006198:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800619c:	4573      	cmp	r3, lr
 800619e:	d320      	bcc.n	80061e2 <__multiply+0x92>
 80061a0:	f107 0814 	add.w	r8, r7, #20
 80061a4:	f109 0114 	add.w	r1, r9, #20
 80061a8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80061ac:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80061b0:	9302      	str	r3, [sp, #8]
 80061b2:	1beb      	subs	r3, r5, r7
 80061b4:	3b15      	subs	r3, #21
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	3304      	adds	r3, #4
 80061bc:	3715      	adds	r7, #21
 80061be:	42bd      	cmp	r5, r7
 80061c0:	bf38      	it	cc
 80061c2:	2304      	movcc	r3, #4
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	9b02      	ldr	r3, [sp, #8]
 80061c8:	9103      	str	r1, [sp, #12]
 80061ca:	428b      	cmp	r3, r1
 80061cc:	d80c      	bhi.n	80061e8 <__multiply+0x98>
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	dd03      	ble.n	80061da <__multiply+0x8a>
 80061d2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d055      	beq.n	8006286 <__multiply+0x136>
 80061da:	6106      	str	r6, [r0, #16]
 80061dc:	b005      	add	sp, #20
 80061de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e2:	f843 2b04 	str.w	r2, [r3], #4
 80061e6:	e7d9      	b.n	800619c <__multiply+0x4c>
 80061e8:	f8b1 a000 	ldrh.w	sl, [r1]
 80061ec:	f1ba 0f00 	cmp.w	sl, #0
 80061f0:	d01f      	beq.n	8006232 <__multiply+0xe2>
 80061f2:	46c4      	mov	ip, r8
 80061f4:	46a1      	mov	r9, r4
 80061f6:	2700      	movs	r7, #0
 80061f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061fc:	f8d9 3000 	ldr.w	r3, [r9]
 8006200:	fa1f fb82 	uxth.w	fp, r2
 8006204:	b29b      	uxth	r3, r3
 8006206:	fb0a 330b 	mla	r3, sl, fp, r3
 800620a:	443b      	add	r3, r7
 800620c:	f8d9 7000 	ldr.w	r7, [r9]
 8006210:	0c12      	lsrs	r2, r2, #16
 8006212:	0c3f      	lsrs	r7, r7, #16
 8006214:	fb0a 7202 	mla	r2, sl, r2, r7
 8006218:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800621c:	b29b      	uxth	r3, r3
 800621e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006222:	4565      	cmp	r5, ip
 8006224:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006228:	f849 3b04 	str.w	r3, [r9], #4
 800622c:	d8e4      	bhi.n	80061f8 <__multiply+0xa8>
 800622e:	9b01      	ldr	r3, [sp, #4]
 8006230:	50e7      	str	r7, [r4, r3]
 8006232:	9b03      	ldr	r3, [sp, #12]
 8006234:	3104      	adds	r1, #4
 8006236:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800623a:	f1b9 0f00 	cmp.w	r9, #0
 800623e:	d020      	beq.n	8006282 <__multiply+0x132>
 8006240:	4647      	mov	r7, r8
 8006242:	46a4      	mov	ip, r4
 8006244:	f04f 0a00 	mov.w	sl, #0
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	f8b7 b000 	ldrh.w	fp, [r7]
 800624e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006252:	b29b      	uxth	r3, r3
 8006254:	fb09 220b 	mla	r2, r9, fp, r2
 8006258:	4452      	add	r2, sl
 800625a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800625e:	f84c 3b04 	str.w	r3, [ip], #4
 8006262:	f857 3b04 	ldr.w	r3, [r7], #4
 8006266:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800626a:	f8bc 3000 	ldrh.w	r3, [ip]
 800626e:	42bd      	cmp	r5, r7
 8006270:	fb09 330a 	mla	r3, r9, sl, r3
 8006274:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800627c:	d8e5      	bhi.n	800624a <__multiply+0xfa>
 800627e:	9a01      	ldr	r2, [sp, #4]
 8006280:	50a3      	str	r3, [r4, r2]
 8006282:	3404      	adds	r4, #4
 8006284:	e79f      	b.n	80061c6 <__multiply+0x76>
 8006286:	3e01      	subs	r6, #1
 8006288:	e7a1      	b.n	80061ce <__multiply+0x7e>
 800628a:	bf00      	nop
 800628c:	08007f96 	.word	0x08007f96
 8006290:	08007fa7 	.word	0x08007fa7

08006294 <__pow5mult>:
 8006294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006298:	4615      	mov	r5, r2
 800629a:	f012 0203 	ands.w	r2, r2, #3
 800629e:	4607      	mov	r7, r0
 80062a0:	460e      	mov	r6, r1
 80062a2:	d007      	beq.n	80062b4 <__pow5mult+0x20>
 80062a4:	4c25      	ldr	r4, [pc, #148]	@ (800633c <__pow5mult+0xa8>)
 80062a6:	3a01      	subs	r2, #1
 80062a8:	2300      	movs	r3, #0
 80062aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062ae:	f7ff fea7 	bl	8006000 <__multadd>
 80062b2:	4606      	mov	r6, r0
 80062b4:	10ad      	asrs	r5, r5, #2
 80062b6:	d03d      	beq.n	8006334 <__pow5mult+0xa0>
 80062b8:	69fc      	ldr	r4, [r7, #28]
 80062ba:	b97c      	cbnz	r4, 80062dc <__pow5mult+0x48>
 80062bc:	2010      	movs	r0, #16
 80062be:	f7ff fd87 	bl	8005dd0 <malloc>
 80062c2:	4602      	mov	r2, r0
 80062c4:	61f8      	str	r0, [r7, #28]
 80062c6:	b928      	cbnz	r0, 80062d4 <__pow5mult+0x40>
 80062c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80062cc:	4b1c      	ldr	r3, [pc, #112]	@ (8006340 <__pow5mult+0xac>)
 80062ce:	481d      	ldr	r0, [pc, #116]	@ (8006344 <__pow5mult+0xb0>)
 80062d0:	f000 fbe6 	bl	8006aa0 <__assert_func>
 80062d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062d8:	6004      	str	r4, [r0, #0]
 80062da:	60c4      	str	r4, [r0, #12]
 80062dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80062e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062e4:	b94c      	cbnz	r4, 80062fa <__pow5mult+0x66>
 80062e6:	f240 2171 	movw	r1, #625	@ 0x271
 80062ea:	4638      	mov	r0, r7
 80062ec:	f7ff ff1a 	bl	8006124 <__i2b>
 80062f0:	2300      	movs	r3, #0
 80062f2:	4604      	mov	r4, r0
 80062f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80062f8:	6003      	str	r3, [r0, #0]
 80062fa:	f04f 0900 	mov.w	r9, #0
 80062fe:	07eb      	lsls	r3, r5, #31
 8006300:	d50a      	bpl.n	8006318 <__pow5mult+0x84>
 8006302:	4631      	mov	r1, r6
 8006304:	4622      	mov	r2, r4
 8006306:	4638      	mov	r0, r7
 8006308:	f7ff ff22 	bl	8006150 <__multiply>
 800630c:	4680      	mov	r8, r0
 800630e:	4631      	mov	r1, r6
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff fe53 	bl	8005fbc <_Bfree>
 8006316:	4646      	mov	r6, r8
 8006318:	106d      	asrs	r5, r5, #1
 800631a:	d00b      	beq.n	8006334 <__pow5mult+0xa0>
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	b938      	cbnz	r0, 8006330 <__pow5mult+0x9c>
 8006320:	4622      	mov	r2, r4
 8006322:	4621      	mov	r1, r4
 8006324:	4638      	mov	r0, r7
 8006326:	f7ff ff13 	bl	8006150 <__multiply>
 800632a:	6020      	str	r0, [r4, #0]
 800632c:	f8c0 9000 	str.w	r9, [r0]
 8006330:	4604      	mov	r4, r0
 8006332:	e7e4      	b.n	80062fe <__pow5mult+0x6a>
 8006334:	4630      	mov	r0, r6
 8006336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633a:	bf00      	nop
 800633c:	08008058 	.word	0x08008058
 8006340:	08007f27 	.word	0x08007f27
 8006344:	08007fa7 	.word	0x08007fa7

08006348 <__lshift>:
 8006348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	460c      	mov	r4, r1
 800634e:	4607      	mov	r7, r0
 8006350:	4691      	mov	r9, r2
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	6849      	ldr	r1, [r1, #4]
 8006356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800635a:	68a3      	ldr	r3, [r4, #8]
 800635c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006360:	f108 0601 	add.w	r6, r8, #1
 8006364:	42b3      	cmp	r3, r6
 8006366:	db0b      	blt.n	8006380 <__lshift+0x38>
 8006368:	4638      	mov	r0, r7
 800636a:	f7ff fde7 	bl	8005f3c <_Balloc>
 800636e:	4605      	mov	r5, r0
 8006370:	b948      	cbnz	r0, 8006386 <__lshift+0x3e>
 8006372:	4602      	mov	r2, r0
 8006374:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006378:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <__lshift+0xd0>)
 800637a:	4828      	ldr	r0, [pc, #160]	@ (800641c <__lshift+0xd4>)
 800637c:	f000 fb90 	bl	8006aa0 <__assert_func>
 8006380:	3101      	adds	r1, #1
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	e7ee      	b.n	8006364 <__lshift+0x1c>
 8006386:	2300      	movs	r3, #0
 8006388:	f100 0114 	add.w	r1, r0, #20
 800638c:	f100 0210 	add.w	r2, r0, #16
 8006390:	4618      	mov	r0, r3
 8006392:	4553      	cmp	r3, sl
 8006394:	db33      	blt.n	80063fe <__lshift+0xb6>
 8006396:	6920      	ldr	r0, [r4, #16]
 8006398:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800639c:	f104 0314 	add.w	r3, r4, #20
 80063a0:	f019 091f 	ands.w	r9, r9, #31
 80063a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063ac:	d02b      	beq.n	8006406 <__lshift+0xbe>
 80063ae:	468a      	mov	sl, r1
 80063b0:	2200      	movs	r2, #0
 80063b2:	f1c9 0e20 	rsb	lr, r9, #32
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	fa00 f009 	lsl.w	r0, r0, r9
 80063bc:	4310      	orrs	r0, r2
 80063be:	f84a 0b04 	str.w	r0, [sl], #4
 80063c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063c6:	459c      	cmp	ip, r3
 80063c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80063cc:	d8f3      	bhi.n	80063b6 <__lshift+0x6e>
 80063ce:	ebac 0304 	sub.w	r3, ip, r4
 80063d2:	3b15      	subs	r3, #21
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	3304      	adds	r3, #4
 80063da:	f104 0015 	add.w	r0, r4, #21
 80063de:	4560      	cmp	r0, ip
 80063e0:	bf88      	it	hi
 80063e2:	2304      	movhi	r3, #4
 80063e4:	50ca      	str	r2, [r1, r3]
 80063e6:	b10a      	cbz	r2, 80063ec <__lshift+0xa4>
 80063e8:	f108 0602 	add.w	r6, r8, #2
 80063ec:	3e01      	subs	r6, #1
 80063ee:	4638      	mov	r0, r7
 80063f0:	4621      	mov	r1, r4
 80063f2:	612e      	str	r6, [r5, #16]
 80063f4:	f7ff fde2 	bl	8005fbc <_Bfree>
 80063f8:	4628      	mov	r0, r5
 80063fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006402:	3301      	adds	r3, #1
 8006404:	e7c5      	b.n	8006392 <__lshift+0x4a>
 8006406:	3904      	subs	r1, #4
 8006408:	f853 2b04 	ldr.w	r2, [r3], #4
 800640c:	459c      	cmp	ip, r3
 800640e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006412:	d8f9      	bhi.n	8006408 <__lshift+0xc0>
 8006414:	e7ea      	b.n	80063ec <__lshift+0xa4>
 8006416:	bf00      	nop
 8006418:	08007f96 	.word	0x08007f96
 800641c:	08007fa7 	.word	0x08007fa7

08006420 <__mcmp>:
 8006420:	4603      	mov	r3, r0
 8006422:	690a      	ldr	r2, [r1, #16]
 8006424:	6900      	ldr	r0, [r0, #16]
 8006426:	b530      	push	{r4, r5, lr}
 8006428:	1a80      	subs	r0, r0, r2
 800642a:	d10e      	bne.n	800644a <__mcmp+0x2a>
 800642c:	3314      	adds	r3, #20
 800642e:	3114      	adds	r1, #20
 8006430:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006434:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800643c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006440:	4295      	cmp	r5, r2
 8006442:	d003      	beq.n	800644c <__mcmp+0x2c>
 8006444:	d205      	bcs.n	8006452 <__mcmp+0x32>
 8006446:	f04f 30ff 	mov.w	r0, #4294967295
 800644a:	bd30      	pop	{r4, r5, pc}
 800644c:	42a3      	cmp	r3, r4
 800644e:	d3f3      	bcc.n	8006438 <__mcmp+0x18>
 8006450:	e7fb      	b.n	800644a <__mcmp+0x2a>
 8006452:	2001      	movs	r0, #1
 8006454:	e7f9      	b.n	800644a <__mcmp+0x2a>
	...

08006458 <__mdiff>:
 8006458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	4689      	mov	r9, r1
 800645e:	4606      	mov	r6, r0
 8006460:	4611      	mov	r1, r2
 8006462:	4648      	mov	r0, r9
 8006464:	4614      	mov	r4, r2
 8006466:	f7ff ffdb 	bl	8006420 <__mcmp>
 800646a:	1e05      	subs	r5, r0, #0
 800646c:	d112      	bne.n	8006494 <__mdiff+0x3c>
 800646e:	4629      	mov	r1, r5
 8006470:	4630      	mov	r0, r6
 8006472:	f7ff fd63 	bl	8005f3c <_Balloc>
 8006476:	4602      	mov	r2, r0
 8006478:	b928      	cbnz	r0, 8006486 <__mdiff+0x2e>
 800647a:	f240 2137 	movw	r1, #567	@ 0x237
 800647e:	4b3e      	ldr	r3, [pc, #248]	@ (8006578 <__mdiff+0x120>)
 8006480:	483e      	ldr	r0, [pc, #248]	@ (800657c <__mdiff+0x124>)
 8006482:	f000 fb0d 	bl	8006aa0 <__assert_func>
 8006486:	2301      	movs	r3, #1
 8006488:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800648c:	4610      	mov	r0, r2
 800648e:	b003      	add	sp, #12
 8006490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006494:	bfbc      	itt	lt
 8006496:	464b      	movlt	r3, r9
 8006498:	46a1      	movlt	r9, r4
 800649a:	4630      	mov	r0, r6
 800649c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80064a0:	bfba      	itte	lt
 80064a2:	461c      	movlt	r4, r3
 80064a4:	2501      	movlt	r5, #1
 80064a6:	2500      	movge	r5, #0
 80064a8:	f7ff fd48 	bl	8005f3c <_Balloc>
 80064ac:	4602      	mov	r2, r0
 80064ae:	b918      	cbnz	r0, 80064b8 <__mdiff+0x60>
 80064b0:	f240 2145 	movw	r1, #581	@ 0x245
 80064b4:	4b30      	ldr	r3, [pc, #192]	@ (8006578 <__mdiff+0x120>)
 80064b6:	e7e3      	b.n	8006480 <__mdiff+0x28>
 80064b8:	f100 0b14 	add.w	fp, r0, #20
 80064bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80064c0:	f109 0310 	add.w	r3, r9, #16
 80064c4:	60c5      	str	r5, [r0, #12]
 80064c6:	f04f 0c00 	mov.w	ip, #0
 80064ca:	f109 0514 	add.w	r5, r9, #20
 80064ce:	46d9      	mov	r9, fp
 80064d0:	6926      	ldr	r6, [r4, #16]
 80064d2:	f104 0e14 	add.w	lr, r4, #20
 80064d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80064da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80064e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80064ea:	b281      	uxth	r1, r0
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	fa1f f38a 	uxth.w	r3, sl
 80064f2:	1a5b      	subs	r3, r3, r1
 80064f4:	0c00      	lsrs	r0, r0, #16
 80064f6:	4463      	add	r3, ip
 80064f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80064fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006506:	4576      	cmp	r6, lr
 8006508:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800650c:	f849 3b04 	str.w	r3, [r9], #4
 8006510:	d8e6      	bhi.n	80064e0 <__mdiff+0x88>
 8006512:	1b33      	subs	r3, r6, r4
 8006514:	3b15      	subs	r3, #21
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	3415      	adds	r4, #21
 800651c:	3304      	adds	r3, #4
 800651e:	42a6      	cmp	r6, r4
 8006520:	bf38      	it	cc
 8006522:	2304      	movcc	r3, #4
 8006524:	441d      	add	r5, r3
 8006526:	445b      	add	r3, fp
 8006528:	461e      	mov	r6, r3
 800652a:	462c      	mov	r4, r5
 800652c:	4544      	cmp	r4, r8
 800652e:	d30e      	bcc.n	800654e <__mdiff+0xf6>
 8006530:	f108 0103 	add.w	r1, r8, #3
 8006534:	1b49      	subs	r1, r1, r5
 8006536:	f021 0103 	bic.w	r1, r1, #3
 800653a:	3d03      	subs	r5, #3
 800653c:	45a8      	cmp	r8, r5
 800653e:	bf38      	it	cc
 8006540:	2100      	movcc	r1, #0
 8006542:	440b      	add	r3, r1
 8006544:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006548:	b199      	cbz	r1, 8006572 <__mdiff+0x11a>
 800654a:	6117      	str	r7, [r2, #16]
 800654c:	e79e      	b.n	800648c <__mdiff+0x34>
 800654e:	46e6      	mov	lr, ip
 8006550:	f854 1b04 	ldr.w	r1, [r4], #4
 8006554:	fa1f fc81 	uxth.w	ip, r1
 8006558:	44f4      	add	ip, lr
 800655a:	0c08      	lsrs	r0, r1, #16
 800655c:	4471      	add	r1, lr
 800655e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006562:	b289      	uxth	r1, r1
 8006564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800656c:	f846 1b04 	str.w	r1, [r6], #4
 8006570:	e7dc      	b.n	800652c <__mdiff+0xd4>
 8006572:	3f01      	subs	r7, #1
 8006574:	e7e6      	b.n	8006544 <__mdiff+0xec>
 8006576:	bf00      	nop
 8006578:	08007f96 	.word	0x08007f96
 800657c:	08007fa7 	.word	0x08007fa7

08006580 <__d2b>:
 8006580:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006584:	2101      	movs	r1, #1
 8006586:	4690      	mov	r8, r2
 8006588:	4699      	mov	r9, r3
 800658a:	9e08      	ldr	r6, [sp, #32]
 800658c:	f7ff fcd6 	bl	8005f3c <_Balloc>
 8006590:	4604      	mov	r4, r0
 8006592:	b930      	cbnz	r0, 80065a2 <__d2b+0x22>
 8006594:	4602      	mov	r2, r0
 8006596:	f240 310f 	movw	r1, #783	@ 0x30f
 800659a:	4b23      	ldr	r3, [pc, #140]	@ (8006628 <__d2b+0xa8>)
 800659c:	4823      	ldr	r0, [pc, #140]	@ (800662c <__d2b+0xac>)
 800659e:	f000 fa7f 	bl	8006aa0 <__assert_func>
 80065a2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065aa:	b10d      	cbz	r5, 80065b0 <__d2b+0x30>
 80065ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	f1b8 0300 	subs.w	r3, r8, #0
 80065b6:	d024      	beq.n	8006602 <__d2b+0x82>
 80065b8:	4668      	mov	r0, sp
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	f7ff fd85 	bl	80060ca <__lo0bits>
 80065c0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065c4:	b1d8      	cbz	r0, 80065fe <__d2b+0x7e>
 80065c6:	f1c0 0320 	rsb	r3, r0, #32
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	430b      	orrs	r3, r1
 80065d0:	40c2      	lsrs	r2, r0
 80065d2:	6163      	str	r3, [r4, #20]
 80065d4:	9201      	str	r2, [sp, #4]
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf0c      	ite	eq
 80065dc:	2201      	moveq	r2, #1
 80065de:	2202      	movne	r2, #2
 80065e0:	61a3      	str	r3, [r4, #24]
 80065e2:	6122      	str	r2, [r4, #16]
 80065e4:	b1ad      	cbz	r5, 8006612 <__d2b+0x92>
 80065e6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80065ea:	4405      	add	r5, r0
 80065ec:	6035      	str	r5, [r6, #0]
 80065ee:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80065f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f4:	6018      	str	r0, [r3, #0]
 80065f6:	4620      	mov	r0, r4
 80065f8:	b002      	add	sp, #8
 80065fa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80065fe:	6161      	str	r1, [r4, #20]
 8006600:	e7e9      	b.n	80065d6 <__d2b+0x56>
 8006602:	a801      	add	r0, sp, #4
 8006604:	f7ff fd61 	bl	80060ca <__lo0bits>
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	6163      	str	r3, [r4, #20]
 800660e:	3020      	adds	r0, #32
 8006610:	e7e7      	b.n	80065e2 <__d2b+0x62>
 8006612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006616:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800661a:	6030      	str	r0, [r6, #0]
 800661c:	6918      	ldr	r0, [r3, #16]
 800661e:	f7ff fd35 	bl	800608c <__hi0bits>
 8006622:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006626:	e7e4      	b.n	80065f2 <__d2b+0x72>
 8006628:	08007f96 	.word	0x08007f96
 800662c:	08007fa7 	.word	0x08007fa7

08006630 <__ssputs_r>:
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	461f      	mov	r7, r3
 8006636:	688e      	ldr	r6, [r1, #8]
 8006638:	4682      	mov	sl, r0
 800663a:	42be      	cmp	r6, r7
 800663c:	460c      	mov	r4, r1
 800663e:	4690      	mov	r8, r2
 8006640:	680b      	ldr	r3, [r1, #0]
 8006642:	d82d      	bhi.n	80066a0 <__ssputs_r+0x70>
 8006644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006648:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800664c:	d026      	beq.n	800669c <__ssputs_r+0x6c>
 800664e:	6965      	ldr	r5, [r4, #20]
 8006650:	6909      	ldr	r1, [r1, #16]
 8006652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006656:	eba3 0901 	sub.w	r9, r3, r1
 800665a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800665e:	1c7b      	adds	r3, r7, #1
 8006660:	444b      	add	r3, r9
 8006662:	106d      	asrs	r5, r5, #1
 8006664:	429d      	cmp	r5, r3
 8006666:	bf38      	it	cc
 8006668:	461d      	movcc	r5, r3
 800666a:	0553      	lsls	r3, r2, #21
 800666c:	d527      	bpl.n	80066be <__ssputs_r+0x8e>
 800666e:	4629      	mov	r1, r5
 8006670:	f7ff fbd8 	bl	8005e24 <_malloc_r>
 8006674:	4606      	mov	r6, r0
 8006676:	b360      	cbz	r0, 80066d2 <__ssputs_r+0xa2>
 8006678:	464a      	mov	r2, r9
 800667a:	6921      	ldr	r1, [r4, #16]
 800667c:	f000 fa02 	bl	8006a84 <memcpy>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	6126      	str	r6, [r4, #16]
 800668e:	444e      	add	r6, r9
 8006690:	6026      	str	r6, [r4, #0]
 8006692:	463e      	mov	r6, r7
 8006694:	6165      	str	r5, [r4, #20]
 8006696:	eba5 0509 	sub.w	r5, r5, r9
 800669a:	60a5      	str	r5, [r4, #8]
 800669c:	42be      	cmp	r6, r7
 800669e:	d900      	bls.n	80066a2 <__ssputs_r+0x72>
 80066a0:	463e      	mov	r6, r7
 80066a2:	4632      	mov	r2, r6
 80066a4:	4641      	mov	r1, r8
 80066a6:	6820      	ldr	r0, [r4, #0]
 80066a8:	f000 f9c2 	bl	8006a30 <memmove>
 80066ac:	2000      	movs	r0, #0
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	60a3      	str	r3, [r4, #8]
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	4433      	add	r3, r6
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066be:	462a      	mov	r2, r5
 80066c0:	f000 fa32 	bl	8006b28 <_realloc_r>
 80066c4:	4606      	mov	r6, r0
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d1e0      	bne.n	800668c <__ssputs_r+0x5c>
 80066ca:	4650      	mov	r0, sl
 80066cc:	6921      	ldr	r1, [r4, #16]
 80066ce:	f7ff fb37 	bl	8005d40 <_free_r>
 80066d2:	230c      	movs	r3, #12
 80066d4:	f8ca 3000 	str.w	r3, [sl]
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	f04f 30ff 	mov.w	r0, #4294967295
 80066de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066e2:	81a3      	strh	r3, [r4, #12]
 80066e4:	e7e9      	b.n	80066ba <__ssputs_r+0x8a>
	...

080066e8 <_svfiprintf_r>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4698      	mov	r8, r3
 80066ee:	898b      	ldrh	r3, [r1, #12]
 80066f0:	4607      	mov	r7, r0
 80066f2:	061b      	lsls	r3, r3, #24
 80066f4:	460d      	mov	r5, r1
 80066f6:	4614      	mov	r4, r2
 80066f8:	b09d      	sub	sp, #116	@ 0x74
 80066fa:	d510      	bpl.n	800671e <_svfiprintf_r+0x36>
 80066fc:	690b      	ldr	r3, [r1, #16]
 80066fe:	b973      	cbnz	r3, 800671e <_svfiprintf_r+0x36>
 8006700:	2140      	movs	r1, #64	@ 0x40
 8006702:	f7ff fb8f 	bl	8005e24 <_malloc_r>
 8006706:	6028      	str	r0, [r5, #0]
 8006708:	6128      	str	r0, [r5, #16]
 800670a:	b930      	cbnz	r0, 800671a <_svfiprintf_r+0x32>
 800670c:	230c      	movs	r3, #12
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	b01d      	add	sp, #116	@ 0x74
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	2340      	movs	r3, #64	@ 0x40
 800671c:	616b      	str	r3, [r5, #20]
 800671e:	2300      	movs	r3, #0
 8006720:	9309      	str	r3, [sp, #36]	@ 0x24
 8006722:	2320      	movs	r3, #32
 8006724:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006728:	2330      	movs	r3, #48	@ 0x30
 800672a:	f04f 0901 	mov.w	r9, #1
 800672e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006732:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80068cc <_svfiprintf_r+0x1e4>
 8006736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800673a:	4623      	mov	r3, r4
 800673c:	469a      	mov	sl, r3
 800673e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006742:	b10a      	cbz	r2, 8006748 <_svfiprintf_r+0x60>
 8006744:	2a25      	cmp	r2, #37	@ 0x25
 8006746:	d1f9      	bne.n	800673c <_svfiprintf_r+0x54>
 8006748:	ebba 0b04 	subs.w	fp, sl, r4
 800674c:	d00b      	beq.n	8006766 <_svfiprintf_r+0x7e>
 800674e:	465b      	mov	r3, fp
 8006750:	4622      	mov	r2, r4
 8006752:	4629      	mov	r1, r5
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff ff6b 	bl	8006630 <__ssputs_r>
 800675a:	3001      	adds	r0, #1
 800675c:	f000 80a7 	beq.w	80068ae <_svfiprintf_r+0x1c6>
 8006760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006762:	445a      	add	r2, fp
 8006764:	9209      	str	r2, [sp, #36]	@ 0x24
 8006766:	f89a 3000 	ldrb.w	r3, [sl]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 809f 	beq.w	80068ae <_svfiprintf_r+0x1c6>
 8006770:	2300      	movs	r3, #0
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800677a:	f10a 0a01 	add.w	sl, sl, #1
 800677e:	9304      	str	r3, [sp, #16]
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006786:	931a      	str	r3, [sp, #104]	@ 0x68
 8006788:	4654      	mov	r4, sl
 800678a:	2205      	movs	r2, #5
 800678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006790:	484e      	ldr	r0, [pc, #312]	@ (80068cc <_svfiprintf_r+0x1e4>)
 8006792:	f7fe fc6a 	bl	800506a <memchr>
 8006796:	9a04      	ldr	r2, [sp, #16]
 8006798:	b9d8      	cbnz	r0, 80067d2 <_svfiprintf_r+0xea>
 800679a:	06d0      	lsls	r0, r2, #27
 800679c:	bf44      	itt	mi
 800679e:	2320      	movmi	r3, #32
 80067a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067a4:	0711      	lsls	r1, r2, #28
 80067a6:	bf44      	itt	mi
 80067a8:	232b      	movmi	r3, #43	@ 0x2b
 80067aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067ae:	f89a 3000 	ldrb.w	r3, [sl]
 80067b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80067b4:	d015      	beq.n	80067e2 <_svfiprintf_r+0xfa>
 80067b6:	4654      	mov	r4, sl
 80067b8:	2000      	movs	r0, #0
 80067ba:	f04f 0c0a 	mov.w	ip, #10
 80067be:	9a07      	ldr	r2, [sp, #28]
 80067c0:	4621      	mov	r1, r4
 80067c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067c6:	3b30      	subs	r3, #48	@ 0x30
 80067c8:	2b09      	cmp	r3, #9
 80067ca:	d94b      	bls.n	8006864 <_svfiprintf_r+0x17c>
 80067cc:	b1b0      	cbz	r0, 80067fc <_svfiprintf_r+0x114>
 80067ce:	9207      	str	r2, [sp, #28]
 80067d0:	e014      	b.n	80067fc <_svfiprintf_r+0x114>
 80067d2:	eba0 0308 	sub.w	r3, r0, r8
 80067d6:	fa09 f303 	lsl.w	r3, r9, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	46a2      	mov	sl, r4
 80067de:	9304      	str	r3, [sp, #16]
 80067e0:	e7d2      	b.n	8006788 <_svfiprintf_r+0xa0>
 80067e2:	9b03      	ldr	r3, [sp, #12]
 80067e4:	1d19      	adds	r1, r3, #4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	9103      	str	r1, [sp, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bfbb      	ittet	lt
 80067ee:	425b      	neglt	r3, r3
 80067f0:	f042 0202 	orrlt.w	r2, r2, #2
 80067f4:	9307      	strge	r3, [sp, #28]
 80067f6:	9307      	strlt	r3, [sp, #28]
 80067f8:	bfb8      	it	lt
 80067fa:	9204      	strlt	r2, [sp, #16]
 80067fc:	7823      	ldrb	r3, [r4, #0]
 80067fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006800:	d10a      	bne.n	8006818 <_svfiprintf_r+0x130>
 8006802:	7863      	ldrb	r3, [r4, #1]
 8006804:	2b2a      	cmp	r3, #42	@ 0x2a
 8006806:	d132      	bne.n	800686e <_svfiprintf_r+0x186>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	3402      	adds	r4, #2
 800680c:	1d1a      	adds	r2, r3, #4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	9203      	str	r2, [sp, #12]
 8006812:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80068d0 <_svfiprintf_r+0x1e8>
 800681c:	2203      	movs	r2, #3
 800681e:	4650      	mov	r0, sl
 8006820:	7821      	ldrb	r1, [r4, #0]
 8006822:	f7fe fc22 	bl	800506a <memchr>
 8006826:	b138      	cbz	r0, 8006838 <_svfiprintf_r+0x150>
 8006828:	2240      	movs	r2, #64	@ 0x40
 800682a:	9b04      	ldr	r3, [sp, #16]
 800682c:	eba0 000a 	sub.w	r0, r0, sl
 8006830:	4082      	lsls	r2, r0
 8006832:	4313      	orrs	r3, r2
 8006834:	3401      	adds	r4, #1
 8006836:	9304      	str	r3, [sp, #16]
 8006838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683c:	2206      	movs	r2, #6
 800683e:	4825      	ldr	r0, [pc, #148]	@ (80068d4 <_svfiprintf_r+0x1ec>)
 8006840:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006844:	f7fe fc11 	bl	800506a <memchr>
 8006848:	2800      	cmp	r0, #0
 800684a:	d036      	beq.n	80068ba <_svfiprintf_r+0x1d2>
 800684c:	4b22      	ldr	r3, [pc, #136]	@ (80068d8 <_svfiprintf_r+0x1f0>)
 800684e:	bb1b      	cbnz	r3, 8006898 <_svfiprintf_r+0x1b0>
 8006850:	9b03      	ldr	r3, [sp, #12]
 8006852:	3307      	adds	r3, #7
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	3308      	adds	r3, #8
 800685a:	9303      	str	r3, [sp, #12]
 800685c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685e:	4433      	add	r3, r6
 8006860:	9309      	str	r3, [sp, #36]	@ 0x24
 8006862:	e76a      	b.n	800673a <_svfiprintf_r+0x52>
 8006864:	460c      	mov	r4, r1
 8006866:	2001      	movs	r0, #1
 8006868:	fb0c 3202 	mla	r2, ip, r2, r3
 800686c:	e7a8      	b.n	80067c0 <_svfiprintf_r+0xd8>
 800686e:	2300      	movs	r3, #0
 8006870:	f04f 0c0a 	mov.w	ip, #10
 8006874:	4619      	mov	r1, r3
 8006876:	3401      	adds	r4, #1
 8006878:	9305      	str	r3, [sp, #20]
 800687a:	4620      	mov	r0, r4
 800687c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006880:	3a30      	subs	r2, #48	@ 0x30
 8006882:	2a09      	cmp	r2, #9
 8006884:	d903      	bls.n	800688e <_svfiprintf_r+0x1a6>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0c6      	beq.n	8006818 <_svfiprintf_r+0x130>
 800688a:	9105      	str	r1, [sp, #20]
 800688c:	e7c4      	b.n	8006818 <_svfiprintf_r+0x130>
 800688e:	4604      	mov	r4, r0
 8006890:	2301      	movs	r3, #1
 8006892:	fb0c 2101 	mla	r1, ip, r1, r2
 8006896:	e7f0      	b.n	800687a <_svfiprintf_r+0x192>
 8006898:	ab03      	add	r3, sp, #12
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	462a      	mov	r2, r5
 800689e:	4638      	mov	r0, r7
 80068a0:	4b0e      	ldr	r3, [pc, #56]	@ (80068dc <_svfiprintf_r+0x1f4>)
 80068a2:	a904      	add	r1, sp, #16
 80068a4:	f7fd fe7e 	bl	80045a4 <_printf_float>
 80068a8:	1c42      	adds	r2, r0, #1
 80068aa:	4606      	mov	r6, r0
 80068ac:	d1d6      	bne.n	800685c <_svfiprintf_r+0x174>
 80068ae:	89ab      	ldrh	r3, [r5, #12]
 80068b0:	065b      	lsls	r3, r3, #25
 80068b2:	f53f af2d 	bmi.w	8006710 <_svfiprintf_r+0x28>
 80068b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068b8:	e72c      	b.n	8006714 <_svfiprintf_r+0x2c>
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	462a      	mov	r2, r5
 80068c0:	4638      	mov	r0, r7
 80068c2:	4b06      	ldr	r3, [pc, #24]	@ (80068dc <_svfiprintf_r+0x1f4>)
 80068c4:	a904      	add	r1, sp, #16
 80068c6:	f7fe f90b 	bl	8004ae0 <_printf_i>
 80068ca:	e7ed      	b.n	80068a8 <_svfiprintf_r+0x1c0>
 80068cc:	08008000 	.word	0x08008000
 80068d0:	08008006 	.word	0x08008006
 80068d4:	0800800a 	.word	0x0800800a
 80068d8:	080045a5 	.word	0x080045a5
 80068dc:	08006631 	.word	0x08006631

080068e0 <__sflush_r>:
 80068e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	0716      	lsls	r6, r2, #28
 80068e8:	4605      	mov	r5, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	d454      	bmi.n	8006998 <__sflush_r+0xb8>
 80068ee:	684b      	ldr	r3, [r1, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dc02      	bgt.n	80068fa <__sflush_r+0x1a>
 80068f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	dd48      	ble.n	800698c <__sflush_r+0xac>
 80068fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	d045      	beq.n	800698c <__sflush_r+0xac>
 8006900:	2300      	movs	r3, #0
 8006902:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006906:	682f      	ldr	r7, [r5, #0]
 8006908:	6a21      	ldr	r1, [r4, #32]
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	d030      	beq.n	8006970 <__sflush_r+0x90>
 800690e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	0759      	lsls	r1, r3, #29
 8006914:	d505      	bpl.n	8006922 <__sflush_r+0x42>
 8006916:	6863      	ldr	r3, [r4, #4]
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800691c:	b10b      	cbz	r3, 8006922 <__sflush_r+0x42>
 800691e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006920:	1ad2      	subs	r2, r2, r3
 8006922:	2300      	movs	r3, #0
 8006924:	4628      	mov	r0, r5
 8006926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006928:	6a21      	ldr	r1, [r4, #32]
 800692a:	47b0      	blx	r6
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	d106      	bne.n	8006940 <__sflush_r+0x60>
 8006932:	6829      	ldr	r1, [r5, #0]
 8006934:	291d      	cmp	r1, #29
 8006936:	d82b      	bhi.n	8006990 <__sflush_r+0xb0>
 8006938:	4a28      	ldr	r2, [pc, #160]	@ (80069dc <__sflush_r+0xfc>)
 800693a:	40ca      	lsrs	r2, r1
 800693c:	07d6      	lsls	r6, r2, #31
 800693e:	d527      	bpl.n	8006990 <__sflush_r+0xb0>
 8006940:	2200      	movs	r2, #0
 8006942:	6062      	str	r2, [r4, #4]
 8006944:	6922      	ldr	r2, [r4, #16]
 8006946:	04d9      	lsls	r1, r3, #19
 8006948:	6022      	str	r2, [r4, #0]
 800694a:	d504      	bpl.n	8006956 <__sflush_r+0x76>
 800694c:	1c42      	adds	r2, r0, #1
 800694e:	d101      	bne.n	8006954 <__sflush_r+0x74>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b903      	cbnz	r3, 8006956 <__sflush_r+0x76>
 8006954:	6560      	str	r0, [r4, #84]	@ 0x54
 8006956:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006958:	602f      	str	r7, [r5, #0]
 800695a:	b1b9      	cbz	r1, 800698c <__sflush_r+0xac>
 800695c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006960:	4299      	cmp	r1, r3
 8006962:	d002      	beq.n	800696a <__sflush_r+0x8a>
 8006964:	4628      	mov	r0, r5
 8006966:	f7ff f9eb 	bl	8005d40 <_free_r>
 800696a:	2300      	movs	r3, #0
 800696c:	6363      	str	r3, [r4, #52]	@ 0x34
 800696e:	e00d      	b.n	800698c <__sflush_r+0xac>
 8006970:	2301      	movs	r3, #1
 8006972:	4628      	mov	r0, r5
 8006974:	47b0      	blx	r6
 8006976:	4602      	mov	r2, r0
 8006978:	1c50      	adds	r0, r2, #1
 800697a:	d1c9      	bne.n	8006910 <__sflush_r+0x30>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0c6      	beq.n	8006910 <__sflush_r+0x30>
 8006982:	2b1d      	cmp	r3, #29
 8006984:	d001      	beq.n	800698a <__sflush_r+0xaa>
 8006986:	2b16      	cmp	r3, #22
 8006988:	d11d      	bne.n	80069c6 <__sflush_r+0xe6>
 800698a:	602f      	str	r7, [r5, #0]
 800698c:	2000      	movs	r0, #0
 800698e:	e021      	b.n	80069d4 <__sflush_r+0xf4>
 8006990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006994:	b21b      	sxth	r3, r3
 8006996:	e01a      	b.n	80069ce <__sflush_r+0xee>
 8006998:	690f      	ldr	r7, [r1, #16]
 800699a:	2f00      	cmp	r7, #0
 800699c:	d0f6      	beq.n	800698c <__sflush_r+0xac>
 800699e:	0793      	lsls	r3, r2, #30
 80069a0:	bf18      	it	ne
 80069a2:	2300      	movne	r3, #0
 80069a4:	680e      	ldr	r6, [r1, #0]
 80069a6:	bf08      	it	eq
 80069a8:	694b      	ldreq	r3, [r1, #20]
 80069aa:	1bf6      	subs	r6, r6, r7
 80069ac:	600f      	str	r7, [r1, #0]
 80069ae:	608b      	str	r3, [r1, #8]
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	ddeb      	ble.n	800698c <__sflush_r+0xac>
 80069b4:	4633      	mov	r3, r6
 80069b6:	463a      	mov	r2, r7
 80069b8:	4628      	mov	r0, r5
 80069ba:	6a21      	ldr	r1, [r4, #32]
 80069bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80069c0:	47e0      	blx	ip
 80069c2:	2800      	cmp	r0, #0
 80069c4:	dc07      	bgt.n	80069d6 <__sflush_r+0xf6>
 80069c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ce:	f04f 30ff 	mov.w	r0, #4294967295
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d6:	4407      	add	r7, r0
 80069d8:	1a36      	subs	r6, r6, r0
 80069da:	e7e9      	b.n	80069b0 <__sflush_r+0xd0>
 80069dc:	20400001 	.word	0x20400001

080069e0 <_fflush_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	690b      	ldr	r3, [r1, #16]
 80069e4:	4605      	mov	r5, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	b913      	cbnz	r3, 80069f0 <_fflush_r+0x10>
 80069ea:	2500      	movs	r5, #0
 80069ec:	4628      	mov	r0, r5
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	b118      	cbz	r0, 80069fa <_fflush_r+0x1a>
 80069f2:	6a03      	ldr	r3, [r0, #32]
 80069f4:	b90b      	cbnz	r3, 80069fa <_fflush_r+0x1a>
 80069f6:	f7fe fa1d 	bl	8004e34 <__sinit>
 80069fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f3      	beq.n	80069ea <_fflush_r+0xa>
 8006a02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a04:	07d0      	lsls	r0, r2, #31
 8006a06:	d404      	bmi.n	8006a12 <_fflush_r+0x32>
 8006a08:	0599      	lsls	r1, r3, #22
 8006a0a:	d402      	bmi.n	8006a12 <_fflush_r+0x32>
 8006a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a0e:	f7fe fb2a 	bl	8005066 <__retarget_lock_acquire_recursive>
 8006a12:	4628      	mov	r0, r5
 8006a14:	4621      	mov	r1, r4
 8006a16:	f7ff ff63 	bl	80068e0 <__sflush_r>
 8006a1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	07da      	lsls	r2, r3, #31
 8006a20:	d4e4      	bmi.n	80069ec <_fflush_r+0xc>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	059b      	lsls	r3, r3, #22
 8006a26:	d4e1      	bmi.n	80069ec <_fflush_r+0xc>
 8006a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a2a:	f7fe fb1d 	bl	8005068 <__retarget_lock_release_recursive>
 8006a2e:	e7dd      	b.n	80069ec <_fflush_r+0xc>

08006a30 <memmove>:
 8006a30:	4288      	cmp	r0, r1
 8006a32:	b510      	push	{r4, lr}
 8006a34:	eb01 0402 	add.w	r4, r1, r2
 8006a38:	d902      	bls.n	8006a40 <memmove+0x10>
 8006a3a:	4284      	cmp	r4, r0
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	d807      	bhi.n	8006a50 <memmove+0x20>
 8006a40:	1e43      	subs	r3, r0, #1
 8006a42:	42a1      	cmp	r1, r4
 8006a44:	d008      	beq.n	8006a58 <memmove+0x28>
 8006a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a4e:	e7f8      	b.n	8006a42 <memmove+0x12>
 8006a50:	4601      	mov	r1, r0
 8006a52:	4402      	add	r2, r0
 8006a54:	428a      	cmp	r2, r1
 8006a56:	d100      	bne.n	8006a5a <memmove+0x2a>
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a62:	e7f7      	b.n	8006a54 <memmove+0x24>

08006a64 <_sbrk_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	2300      	movs	r3, #0
 8006a68:	4d05      	ldr	r5, [pc, #20]	@ (8006a80 <_sbrk_r+0x1c>)
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	602b      	str	r3, [r5, #0]
 8006a70:	f7fb fab8 	bl	8001fe4 <_sbrk>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_sbrk_r+0x1a>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_sbrk_r+0x1a>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	20000858 	.word	0x20000858

08006a84 <memcpy>:
 8006a84:	440a      	add	r2, r1
 8006a86:	4291      	cmp	r1, r2
 8006a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a8c:	d100      	bne.n	8006a90 <memcpy+0xc>
 8006a8e:	4770      	bx	lr
 8006a90:	b510      	push	{r4, lr}
 8006a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a96:	4291      	cmp	r1, r2
 8006a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a9c:	d1f9      	bne.n	8006a92 <memcpy+0xe>
 8006a9e:	bd10      	pop	{r4, pc}

08006aa0 <__assert_func>:
 8006aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aa2:	4614      	mov	r4, r2
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4b09      	ldr	r3, [pc, #36]	@ (8006acc <__assert_func+0x2c>)
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68d8      	ldr	r0, [r3, #12]
 8006aae:	b14c      	cbz	r4, 8006ac4 <__assert_func+0x24>
 8006ab0:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <__assert_func+0x30>)
 8006ab2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ab6:	9100      	str	r1, [sp, #0]
 8006ab8:	462b      	mov	r3, r5
 8006aba:	4906      	ldr	r1, [pc, #24]	@ (8006ad4 <__assert_func+0x34>)
 8006abc:	f000 f870 	bl	8006ba0 <fiprintf>
 8006ac0:	f000 f880 	bl	8006bc4 <abort>
 8006ac4:	4b04      	ldr	r3, [pc, #16]	@ (8006ad8 <__assert_func+0x38>)
 8006ac6:	461c      	mov	r4, r3
 8006ac8:	e7f3      	b.n	8006ab2 <__assert_func+0x12>
 8006aca:	bf00      	nop
 8006acc:	20000020 	.word	0x20000020
 8006ad0:	0800801b 	.word	0x0800801b
 8006ad4:	08008028 	.word	0x08008028
 8006ad8:	08008056 	.word	0x08008056

08006adc <_calloc_r>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	fba1 5402 	umull	r5, r4, r1, r2
 8006ae2:	b934      	cbnz	r4, 8006af2 <_calloc_r+0x16>
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	f7ff f99d 	bl	8005e24 <_malloc_r>
 8006aea:	4606      	mov	r6, r0
 8006aec:	b928      	cbnz	r0, 8006afa <_calloc_r+0x1e>
 8006aee:	4630      	mov	r0, r6
 8006af0:	bd70      	pop	{r4, r5, r6, pc}
 8006af2:	220c      	movs	r2, #12
 8006af4:	2600      	movs	r6, #0
 8006af6:	6002      	str	r2, [r0, #0]
 8006af8:	e7f9      	b.n	8006aee <_calloc_r+0x12>
 8006afa:	462a      	mov	r2, r5
 8006afc:	4621      	mov	r1, r4
 8006afe:	f7fe fa34 	bl	8004f6a <memset>
 8006b02:	e7f4      	b.n	8006aee <_calloc_r+0x12>

08006b04 <__ascii_mbtowc>:
 8006b04:	b082      	sub	sp, #8
 8006b06:	b901      	cbnz	r1, 8006b0a <__ascii_mbtowc+0x6>
 8006b08:	a901      	add	r1, sp, #4
 8006b0a:	b142      	cbz	r2, 8006b1e <__ascii_mbtowc+0x1a>
 8006b0c:	b14b      	cbz	r3, 8006b22 <__ascii_mbtowc+0x1e>
 8006b0e:	7813      	ldrb	r3, [r2, #0]
 8006b10:	600b      	str	r3, [r1, #0]
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	1e10      	subs	r0, r2, #0
 8006b16:	bf18      	it	ne
 8006b18:	2001      	movne	r0, #1
 8006b1a:	b002      	add	sp, #8
 8006b1c:	4770      	bx	lr
 8006b1e:	4610      	mov	r0, r2
 8006b20:	e7fb      	b.n	8006b1a <__ascii_mbtowc+0x16>
 8006b22:	f06f 0001 	mvn.w	r0, #1
 8006b26:	e7f8      	b.n	8006b1a <__ascii_mbtowc+0x16>

08006b28 <_realloc_r>:
 8006b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	4614      	mov	r4, r2
 8006b30:	460d      	mov	r5, r1
 8006b32:	b921      	cbnz	r1, 8006b3e <_realloc_r+0x16>
 8006b34:	4611      	mov	r1, r2
 8006b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3a:	f7ff b973 	b.w	8005e24 <_malloc_r>
 8006b3e:	b92a      	cbnz	r2, 8006b4c <_realloc_r+0x24>
 8006b40:	f7ff f8fe 	bl	8005d40 <_free_r>
 8006b44:	4625      	mov	r5, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b4c:	f000 f841 	bl	8006bd2 <_malloc_usable_size_r>
 8006b50:	4284      	cmp	r4, r0
 8006b52:	4606      	mov	r6, r0
 8006b54:	d802      	bhi.n	8006b5c <_realloc_r+0x34>
 8006b56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b5a:	d8f4      	bhi.n	8006b46 <_realloc_r+0x1e>
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4638      	mov	r0, r7
 8006b60:	f7ff f960 	bl	8005e24 <_malloc_r>
 8006b64:	4680      	mov	r8, r0
 8006b66:	b908      	cbnz	r0, 8006b6c <_realloc_r+0x44>
 8006b68:	4645      	mov	r5, r8
 8006b6a:	e7ec      	b.n	8006b46 <_realloc_r+0x1e>
 8006b6c:	42b4      	cmp	r4, r6
 8006b6e:	4622      	mov	r2, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	bf28      	it	cs
 8006b74:	4632      	movcs	r2, r6
 8006b76:	f7ff ff85 	bl	8006a84 <memcpy>
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7ff f8df 	bl	8005d40 <_free_r>
 8006b82:	e7f1      	b.n	8006b68 <_realloc_r+0x40>

08006b84 <__ascii_wctomb>:
 8006b84:	4603      	mov	r3, r0
 8006b86:	4608      	mov	r0, r1
 8006b88:	b141      	cbz	r1, 8006b9c <__ascii_wctomb+0x18>
 8006b8a:	2aff      	cmp	r2, #255	@ 0xff
 8006b8c:	d904      	bls.n	8006b98 <__ascii_wctomb+0x14>
 8006b8e:	228a      	movs	r2, #138	@ 0x8a
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	4770      	bx	lr
 8006b98:	2001      	movs	r0, #1
 8006b9a:	700a      	strb	r2, [r1, #0]
 8006b9c:	4770      	bx	lr
	...

08006ba0 <fiprintf>:
 8006ba0:	b40e      	push	{r1, r2, r3}
 8006ba2:	b503      	push	{r0, r1, lr}
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	ab03      	add	r3, sp, #12
 8006ba8:	4805      	ldr	r0, [pc, #20]	@ (8006bc0 <fiprintf+0x20>)
 8006baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bae:	6800      	ldr	r0, [r0, #0]
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	f000 f83d 	bl	8006c30 <_vfiprintf_r>
 8006bb6:	b002      	add	sp, #8
 8006bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bbc:	b003      	add	sp, #12
 8006bbe:	4770      	bx	lr
 8006bc0:	20000020 	.word	0x20000020

08006bc4 <abort>:
 8006bc4:	2006      	movs	r0, #6
 8006bc6:	b508      	push	{r3, lr}
 8006bc8:	f000 fa06 	bl	8006fd8 <raise>
 8006bcc:	2001      	movs	r0, #1
 8006bce:	f7fb f994 	bl	8001efa <_exit>

08006bd2 <_malloc_usable_size_r>:
 8006bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd6:	1f18      	subs	r0, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfbc      	itt	lt
 8006bdc:	580b      	ldrlt	r3, [r1, r0]
 8006bde:	18c0      	addlt	r0, r0, r3
 8006be0:	4770      	bx	lr

08006be2 <__sfputc_r>:
 8006be2:	6893      	ldr	r3, [r2, #8]
 8006be4:	b410      	push	{r4}
 8006be6:	3b01      	subs	r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	6093      	str	r3, [r2, #8]
 8006bec:	da07      	bge.n	8006bfe <__sfputc_r+0x1c>
 8006bee:	6994      	ldr	r4, [r2, #24]
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	db01      	blt.n	8006bf8 <__sfputc_r+0x16>
 8006bf4:	290a      	cmp	r1, #10
 8006bf6:	d102      	bne.n	8006bfe <__sfputc_r+0x1c>
 8006bf8:	bc10      	pop	{r4}
 8006bfa:	f000 b931 	b.w	8006e60 <__swbuf_r>
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	1c58      	adds	r0, r3, #1
 8006c02:	6010      	str	r0, [r2, #0]
 8006c04:	7019      	strb	r1, [r3, #0]
 8006c06:	4608      	mov	r0, r1
 8006c08:	bc10      	pop	{r4}
 8006c0a:	4770      	bx	lr

08006c0c <__sfputs_r>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	4614      	mov	r4, r2
 8006c14:	18d5      	adds	r5, r2, r3
 8006c16:	42ac      	cmp	r4, r5
 8006c18:	d101      	bne.n	8006c1e <__sfputs_r+0x12>
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	e007      	b.n	8006c2e <__sfputs_r+0x22>
 8006c1e:	463a      	mov	r2, r7
 8006c20:	4630      	mov	r0, r6
 8006c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c26:	f7ff ffdc 	bl	8006be2 <__sfputc_r>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	d1f3      	bne.n	8006c16 <__sfputs_r+0xa>
 8006c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c30 <_vfiprintf_r>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	460d      	mov	r5, r1
 8006c36:	4614      	mov	r4, r2
 8006c38:	4698      	mov	r8, r3
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	b09d      	sub	sp, #116	@ 0x74
 8006c3e:	b118      	cbz	r0, 8006c48 <_vfiprintf_r+0x18>
 8006c40:	6a03      	ldr	r3, [r0, #32]
 8006c42:	b90b      	cbnz	r3, 8006c48 <_vfiprintf_r+0x18>
 8006c44:	f7fe f8f6 	bl	8004e34 <__sinit>
 8006c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c4a:	07d9      	lsls	r1, r3, #31
 8006c4c:	d405      	bmi.n	8006c5a <_vfiprintf_r+0x2a>
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	059a      	lsls	r2, r3, #22
 8006c52:	d402      	bmi.n	8006c5a <_vfiprintf_r+0x2a>
 8006c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c56:	f7fe fa06 	bl	8005066 <__retarget_lock_acquire_recursive>
 8006c5a:	89ab      	ldrh	r3, [r5, #12]
 8006c5c:	071b      	lsls	r3, r3, #28
 8006c5e:	d501      	bpl.n	8006c64 <_vfiprintf_r+0x34>
 8006c60:	692b      	ldr	r3, [r5, #16]
 8006c62:	b99b      	cbnz	r3, 8006c8c <_vfiprintf_r+0x5c>
 8006c64:	4629      	mov	r1, r5
 8006c66:	4630      	mov	r0, r6
 8006c68:	f000 f938 	bl	8006edc <__swsetup_r>
 8006c6c:	b170      	cbz	r0, 8006c8c <_vfiprintf_r+0x5c>
 8006c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c70:	07dc      	lsls	r4, r3, #31
 8006c72:	d504      	bpl.n	8006c7e <_vfiprintf_r+0x4e>
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	b01d      	add	sp, #116	@ 0x74
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	0598      	lsls	r0, r3, #22
 8006c82:	d4f7      	bmi.n	8006c74 <_vfiprintf_r+0x44>
 8006c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c86:	f7fe f9ef 	bl	8005068 <__retarget_lock_release_recursive>
 8006c8a:	e7f3      	b.n	8006c74 <_vfiprintf_r+0x44>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c90:	2320      	movs	r3, #32
 8006c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c96:	2330      	movs	r3, #48	@ 0x30
 8006c98:	f04f 0901 	mov.w	r9, #1
 8006c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006e4c <_vfiprintf_r+0x21c>
 8006ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ca8:	4623      	mov	r3, r4
 8006caa:	469a      	mov	sl, r3
 8006cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb0:	b10a      	cbz	r2, 8006cb6 <_vfiprintf_r+0x86>
 8006cb2:	2a25      	cmp	r2, #37	@ 0x25
 8006cb4:	d1f9      	bne.n	8006caa <_vfiprintf_r+0x7a>
 8006cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8006cba:	d00b      	beq.n	8006cd4 <_vfiprintf_r+0xa4>
 8006cbc:	465b      	mov	r3, fp
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ffa2 	bl	8006c0c <__sfputs_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f000 80a7 	beq.w	8006e1c <_vfiprintf_r+0x1ec>
 8006cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cd0:	445a      	add	r2, fp
 8006cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 809f 	beq.w	8006e1c <_vfiprintf_r+0x1ec>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce8:	f10a 0a01 	add.w	sl, sl, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cf6:	4654      	mov	r4, sl
 8006cf8:	2205      	movs	r2, #5
 8006cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfe:	4853      	ldr	r0, [pc, #332]	@ (8006e4c <_vfiprintf_r+0x21c>)
 8006d00:	f7fe f9b3 	bl	800506a <memchr>
 8006d04:	9a04      	ldr	r2, [sp, #16]
 8006d06:	b9d8      	cbnz	r0, 8006d40 <_vfiprintf_r+0x110>
 8006d08:	06d1      	lsls	r1, r2, #27
 8006d0a:	bf44      	itt	mi
 8006d0c:	2320      	movmi	r3, #32
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d12:	0713      	lsls	r3, r2, #28
 8006d14:	bf44      	itt	mi
 8006d16:	232b      	movmi	r3, #43	@ 0x2b
 8006d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d22:	d015      	beq.n	8006d50 <_vfiprintf_r+0x120>
 8006d24:	4654      	mov	r4, sl
 8006d26:	2000      	movs	r0, #0
 8006d28:	f04f 0c0a 	mov.w	ip, #10
 8006d2c:	9a07      	ldr	r2, [sp, #28]
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d34:	3b30      	subs	r3, #48	@ 0x30
 8006d36:	2b09      	cmp	r3, #9
 8006d38:	d94b      	bls.n	8006dd2 <_vfiprintf_r+0x1a2>
 8006d3a:	b1b0      	cbz	r0, 8006d6a <_vfiprintf_r+0x13a>
 8006d3c:	9207      	str	r2, [sp, #28]
 8006d3e:	e014      	b.n	8006d6a <_vfiprintf_r+0x13a>
 8006d40:	eba0 0308 	sub.w	r3, r0, r8
 8006d44:	fa09 f303 	lsl.w	r3, r9, r3
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	46a2      	mov	sl, r4
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	e7d2      	b.n	8006cf6 <_vfiprintf_r+0xc6>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	1d19      	adds	r1, r3, #4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	9103      	str	r1, [sp, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bfbb      	ittet	lt
 8006d5c:	425b      	neglt	r3, r3
 8006d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d62:	9307      	strge	r3, [sp, #28]
 8006d64:	9307      	strlt	r3, [sp, #28]
 8006d66:	bfb8      	it	lt
 8006d68:	9204      	strlt	r2, [sp, #16]
 8006d6a:	7823      	ldrb	r3, [r4, #0]
 8006d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d6e:	d10a      	bne.n	8006d86 <_vfiprintf_r+0x156>
 8006d70:	7863      	ldrb	r3, [r4, #1]
 8006d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d74:	d132      	bne.n	8006ddc <_vfiprintf_r+0x1ac>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	3402      	adds	r4, #2
 8006d7a:	1d1a      	adds	r2, r3, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	9203      	str	r2, [sp, #12]
 8006d80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d84:	9305      	str	r3, [sp, #20]
 8006d86:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006e50 <_vfiprintf_r+0x220>
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	4650      	mov	r0, sl
 8006d8e:	7821      	ldrb	r1, [r4, #0]
 8006d90:	f7fe f96b 	bl	800506a <memchr>
 8006d94:	b138      	cbz	r0, 8006da6 <_vfiprintf_r+0x176>
 8006d96:	2240      	movs	r2, #64	@ 0x40
 8006d98:	9b04      	ldr	r3, [sp, #16]
 8006d9a:	eba0 000a 	sub.w	r0, r0, sl
 8006d9e:	4082      	lsls	r2, r0
 8006da0:	4313      	orrs	r3, r2
 8006da2:	3401      	adds	r4, #1
 8006da4:	9304      	str	r3, [sp, #16]
 8006da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006daa:	2206      	movs	r2, #6
 8006dac:	4829      	ldr	r0, [pc, #164]	@ (8006e54 <_vfiprintf_r+0x224>)
 8006dae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006db2:	f7fe f95a 	bl	800506a <memchr>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d03f      	beq.n	8006e3a <_vfiprintf_r+0x20a>
 8006dba:	4b27      	ldr	r3, [pc, #156]	@ (8006e58 <_vfiprintf_r+0x228>)
 8006dbc:	bb1b      	cbnz	r3, 8006e06 <_vfiprintf_r+0x1d6>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	3307      	adds	r3, #7
 8006dc2:	f023 0307 	bic.w	r3, r3, #7
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	9303      	str	r3, [sp, #12]
 8006dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dcc:	443b      	add	r3, r7
 8006dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dd0:	e76a      	b.n	8006ca8 <_vfiprintf_r+0x78>
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dda:	e7a8      	b.n	8006d2e <_vfiprintf_r+0xfe>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f04f 0c0a 	mov.w	ip, #10
 8006de2:	4619      	mov	r1, r3
 8006de4:	3401      	adds	r4, #1
 8006de6:	9305      	str	r3, [sp, #20]
 8006de8:	4620      	mov	r0, r4
 8006dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dee:	3a30      	subs	r2, #48	@ 0x30
 8006df0:	2a09      	cmp	r2, #9
 8006df2:	d903      	bls.n	8006dfc <_vfiprintf_r+0x1cc>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0c6      	beq.n	8006d86 <_vfiprintf_r+0x156>
 8006df8:	9105      	str	r1, [sp, #20]
 8006dfa:	e7c4      	b.n	8006d86 <_vfiprintf_r+0x156>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	2301      	movs	r3, #1
 8006e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e04:	e7f0      	b.n	8006de8 <_vfiprintf_r+0x1b8>
 8006e06:	ab03      	add	r3, sp, #12
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	4b13      	ldr	r3, [pc, #76]	@ (8006e5c <_vfiprintf_r+0x22c>)
 8006e10:	a904      	add	r1, sp, #16
 8006e12:	f7fd fbc7 	bl	80045a4 <_printf_float>
 8006e16:	4607      	mov	r7, r0
 8006e18:	1c78      	adds	r0, r7, #1
 8006e1a:	d1d6      	bne.n	8006dca <_vfiprintf_r+0x19a>
 8006e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e1e:	07d9      	lsls	r1, r3, #31
 8006e20:	d405      	bmi.n	8006e2e <_vfiprintf_r+0x1fe>
 8006e22:	89ab      	ldrh	r3, [r5, #12]
 8006e24:	059a      	lsls	r2, r3, #22
 8006e26:	d402      	bmi.n	8006e2e <_vfiprintf_r+0x1fe>
 8006e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e2a:	f7fe f91d 	bl	8005068 <__retarget_lock_release_recursive>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	065b      	lsls	r3, r3, #25
 8006e32:	f53f af1f 	bmi.w	8006c74 <_vfiprintf_r+0x44>
 8006e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e38:	e71e      	b.n	8006c78 <_vfiprintf_r+0x48>
 8006e3a:	ab03      	add	r3, sp, #12
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4630      	mov	r0, r6
 8006e42:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <_vfiprintf_r+0x22c>)
 8006e44:	a904      	add	r1, sp, #16
 8006e46:	f7fd fe4b 	bl	8004ae0 <_printf_i>
 8006e4a:	e7e4      	b.n	8006e16 <_vfiprintf_r+0x1e6>
 8006e4c:	08008000 	.word	0x08008000
 8006e50:	08008006 	.word	0x08008006
 8006e54:	0800800a 	.word	0x0800800a
 8006e58:	080045a5 	.word	0x080045a5
 8006e5c:	08006c0d 	.word	0x08006c0d

08006e60 <__swbuf_r>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	460e      	mov	r6, r1
 8006e64:	4614      	mov	r4, r2
 8006e66:	4605      	mov	r5, r0
 8006e68:	b118      	cbz	r0, 8006e72 <__swbuf_r+0x12>
 8006e6a:	6a03      	ldr	r3, [r0, #32]
 8006e6c:	b90b      	cbnz	r3, 8006e72 <__swbuf_r+0x12>
 8006e6e:	f7fd ffe1 	bl	8004e34 <__sinit>
 8006e72:	69a3      	ldr	r3, [r4, #24]
 8006e74:	60a3      	str	r3, [r4, #8]
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	071a      	lsls	r2, r3, #28
 8006e7a:	d501      	bpl.n	8006e80 <__swbuf_r+0x20>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	b943      	cbnz	r3, 8006e92 <__swbuf_r+0x32>
 8006e80:	4621      	mov	r1, r4
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 f82a 	bl	8006edc <__swsetup_r>
 8006e88:	b118      	cbz	r0, 8006e92 <__swbuf_r+0x32>
 8006e8a:	f04f 37ff 	mov.w	r7, #4294967295
 8006e8e:	4638      	mov	r0, r7
 8006e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	6922      	ldr	r2, [r4, #16]
 8006e96:	b2f6      	uxtb	r6, r6
 8006e98:	1a98      	subs	r0, r3, r2
 8006e9a:	6963      	ldr	r3, [r4, #20]
 8006e9c:	4637      	mov	r7, r6
 8006e9e:	4283      	cmp	r3, r0
 8006ea0:	dc05      	bgt.n	8006eae <__swbuf_r+0x4e>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f7ff fd9b 	bl	80069e0 <_fflush_r>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d1ed      	bne.n	8006e8a <__swbuf_r+0x2a>
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	60a3      	str	r3, [r4, #8]
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	6022      	str	r2, [r4, #0]
 8006eba:	701e      	strb	r6, [r3, #0]
 8006ebc:	6962      	ldr	r2, [r4, #20]
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d004      	beq.n	8006ece <__swbuf_r+0x6e>
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	07db      	lsls	r3, r3, #31
 8006ec8:	d5e1      	bpl.n	8006e8e <__swbuf_r+0x2e>
 8006eca:	2e0a      	cmp	r6, #10
 8006ecc:	d1df      	bne.n	8006e8e <__swbuf_r+0x2e>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f7ff fd85 	bl	80069e0 <_fflush_r>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0d9      	beq.n	8006e8e <__swbuf_r+0x2e>
 8006eda:	e7d6      	b.n	8006e8a <__swbuf_r+0x2a>

08006edc <__swsetup_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4b29      	ldr	r3, [pc, #164]	@ (8006f84 <__swsetup_r+0xa8>)
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	b118      	cbz	r0, 8006ef0 <__swsetup_r+0x14>
 8006ee8:	6a03      	ldr	r3, [r0, #32]
 8006eea:	b90b      	cbnz	r3, 8006ef0 <__swsetup_r+0x14>
 8006eec:	f7fd ffa2 	bl	8004e34 <__sinit>
 8006ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef4:	0719      	lsls	r1, r3, #28
 8006ef6:	d422      	bmi.n	8006f3e <__swsetup_r+0x62>
 8006ef8:	06da      	lsls	r2, r3, #27
 8006efa:	d407      	bmi.n	8006f0c <__swsetup_r+0x30>
 8006efc:	2209      	movs	r2, #9
 8006efe:	602a      	str	r2, [r5, #0]
 8006f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	e033      	b.n	8006f74 <__swsetup_r+0x98>
 8006f0c:	0758      	lsls	r0, r3, #29
 8006f0e:	d512      	bpl.n	8006f36 <__swsetup_r+0x5a>
 8006f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f12:	b141      	cbz	r1, 8006f26 <__swsetup_r+0x4a>
 8006f14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <__swsetup_r+0x46>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f7fe ff0f 	bl	8005d40 <_free_r>
 8006f22:	2300      	movs	r3, #0
 8006f24:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	6063      	str	r3, [r4, #4]
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f043 0308 	orr.w	r3, r3, #8
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	b94b      	cbnz	r3, 8006f56 <__swsetup_r+0x7a>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f4c:	d003      	beq.n	8006f56 <__swsetup_r+0x7a>
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4628      	mov	r0, r5
 8006f52:	f000 f882 	bl	800705a <__smakebuf_r>
 8006f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5a:	f013 0201 	ands.w	r2, r3, #1
 8006f5e:	d00a      	beq.n	8006f76 <__swsetup_r+0x9a>
 8006f60:	2200      	movs	r2, #0
 8006f62:	60a2      	str	r2, [r4, #8]
 8006f64:	6962      	ldr	r2, [r4, #20]
 8006f66:	4252      	negs	r2, r2
 8006f68:	61a2      	str	r2, [r4, #24]
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	b942      	cbnz	r2, 8006f80 <__swsetup_r+0xa4>
 8006f6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f72:	d1c5      	bne.n	8006f00 <__swsetup_r+0x24>
 8006f74:	bd38      	pop	{r3, r4, r5, pc}
 8006f76:	0799      	lsls	r1, r3, #30
 8006f78:	bf58      	it	pl
 8006f7a:	6962      	ldrpl	r2, [r4, #20]
 8006f7c:	60a2      	str	r2, [r4, #8]
 8006f7e:	e7f4      	b.n	8006f6a <__swsetup_r+0x8e>
 8006f80:	2000      	movs	r0, #0
 8006f82:	e7f7      	b.n	8006f74 <__swsetup_r+0x98>
 8006f84:	20000020 	.word	0x20000020

08006f88 <_raise_r>:
 8006f88:	291f      	cmp	r1, #31
 8006f8a:	b538      	push	{r3, r4, r5, lr}
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	d904      	bls.n	8006f9c <_raise_r+0x14>
 8006f92:	2316      	movs	r3, #22
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f9e:	b112      	cbz	r2, 8006fa6 <_raise_r+0x1e>
 8006fa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fa4:	b94b      	cbnz	r3, 8006fba <_raise_r+0x32>
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 f830 	bl	800700c <_getpid_r>
 8006fac:	4622      	mov	r2, r4
 8006fae:	4601      	mov	r1, r0
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fb6:	f000 b817 	b.w	8006fe8 <_kill_r>
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d00a      	beq.n	8006fd4 <_raise_r+0x4c>
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	d103      	bne.n	8006fca <_raise_r+0x42>
 8006fc2:	2316      	movs	r3, #22
 8006fc4:	6003      	str	r3, [r0, #0]
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	e7e7      	b.n	8006f9a <_raise_r+0x12>
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006fd2:	4798      	blx	r3
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e7e0      	b.n	8006f9a <_raise_r+0x12>

08006fd8 <raise>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	@ (8006fe4 <raise+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f7ff bfd3 	b.w	8006f88 <_raise_r>
 8006fe2:	bf00      	nop
 8006fe4:	20000020 	.word	0x20000020

08006fe8 <_kill_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	2300      	movs	r3, #0
 8006fec:	4d06      	ldr	r5, [pc, #24]	@ (8007008 <_kill_r+0x20>)
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	f7fa ff70 	bl	8001eda <_kill>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d102      	bne.n	8007004 <_kill_r+0x1c>
 8006ffe:	682b      	ldr	r3, [r5, #0]
 8007000:	b103      	cbz	r3, 8007004 <_kill_r+0x1c>
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	20000858 	.word	0x20000858

0800700c <_getpid_r>:
 800700c:	f7fa bf5e 	b.w	8001ecc <_getpid>

08007010 <__swhatbuf_r>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	460c      	mov	r4, r1
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	4615      	mov	r5, r2
 800701a:	2900      	cmp	r1, #0
 800701c:	461e      	mov	r6, r3
 800701e:	b096      	sub	sp, #88	@ 0x58
 8007020:	da0c      	bge.n	800703c <__swhatbuf_r+0x2c>
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	2100      	movs	r1, #0
 8007026:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800702a:	bf14      	ite	ne
 800702c:	2340      	movne	r3, #64	@ 0x40
 800702e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007032:	2000      	movs	r0, #0
 8007034:	6031      	str	r1, [r6, #0]
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	b016      	add	sp, #88	@ 0x58
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	466a      	mov	r2, sp
 800703e:	f000 f849 	bl	80070d4 <_fstat_r>
 8007042:	2800      	cmp	r0, #0
 8007044:	dbed      	blt.n	8007022 <__swhatbuf_r+0x12>
 8007046:	9901      	ldr	r1, [sp, #4]
 8007048:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800704c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007050:	4259      	negs	r1, r3
 8007052:	4159      	adcs	r1, r3
 8007054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007058:	e7eb      	b.n	8007032 <__swhatbuf_r+0x22>

0800705a <__smakebuf_r>:
 800705a:	898b      	ldrh	r3, [r1, #12]
 800705c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705e:	079d      	lsls	r5, r3, #30
 8007060:	4606      	mov	r6, r0
 8007062:	460c      	mov	r4, r1
 8007064:	d507      	bpl.n	8007076 <__smakebuf_r+0x1c>
 8007066:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	2301      	movs	r3, #1
 8007070:	6163      	str	r3, [r4, #20]
 8007072:	b003      	add	sp, #12
 8007074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007076:	466a      	mov	r2, sp
 8007078:	ab01      	add	r3, sp, #4
 800707a:	f7ff ffc9 	bl	8007010 <__swhatbuf_r>
 800707e:	9f00      	ldr	r7, [sp, #0]
 8007080:	4605      	mov	r5, r0
 8007082:	4639      	mov	r1, r7
 8007084:	4630      	mov	r0, r6
 8007086:	f7fe fecd 	bl	8005e24 <_malloc_r>
 800708a:	b948      	cbnz	r0, 80070a0 <__smakebuf_r+0x46>
 800708c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007090:	059a      	lsls	r2, r3, #22
 8007092:	d4ee      	bmi.n	8007072 <__smakebuf_r+0x18>
 8007094:	f023 0303 	bic.w	r3, r3, #3
 8007098:	f043 0302 	orr.w	r3, r3, #2
 800709c:	81a3      	strh	r3, [r4, #12]
 800709e:	e7e2      	b.n	8007066 <__smakebuf_r+0xc>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	6020      	str	r0, [r4, #0]
 80070b0:	b15b      	cbz	r3, 80070ca <__smakebuf_r+0x70>
 80070b2:	4630      	mov	r0, r6
 80070b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b8:	f000 f81e 	bl	80070f8 <_isatty_r>
 80070bc:	b128      	cbz	r0, 80070ca <__smakebuf_r+0x70>
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	f023 0303 	bic.w	r3, r3, #3
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	431d      	orrs	r5, r3
 80070ce:	81a5      	strh	r5, [r4, #12]
 80070d0:	e7cf      	b.n	8007072 <__smakebuf_r+0x18>
	...

080070d4 <_fstat_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	2300      	movs	r3, #0
 80070d8:	4d06      	ldr	r5, [pc, #24]	@ (80070f4 <_fstat_r+0x20>)
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	4611      	mov	r1, r2
 80070e0:	602b      	str	r3, [r5, #0]
 80070e2:	f7fa ff59 	bl	8001f98 <_fstat>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d102      	bne.n	80070f0 <_fstat_r+0x1c>
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	b103      	cbz	r3, 80070f0 <_fstat_r+0x1c>
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	bd38      	pop	{r3, r4, r5, pc}
 80070f2:	bf00      	nop
 80070f4:	20000858 	.word	0x20000858

080070f8 <_isatty_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	2300      	movs	r3, #0
 80070fc:	4d05      	ldr	r5, [pc, #20]	@ (8007114 <_isatty_r+0x1c>)
 80070fe:	4604      	mov	r4, r0
 8007100:	4608      	mov	r0, r1
 8007102:	602b      	str	r3, [r5, #0]
 8007104:	f7fa ff57 	bl	8001fb6 <_isatty>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_isatty_r+0x1a>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_isatty_r+0x1a>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20000858 	.word	0x20000858

08007118 <_init>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr

08007124 <_fini>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	bf00      	nop
 8007128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712a:	bc08      	pop	{r3}
 800712c:	469e      	mov	lr, r3
 800712e:	4770      	bx	lr
